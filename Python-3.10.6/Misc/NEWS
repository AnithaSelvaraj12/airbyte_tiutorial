+++++++++++
Python News
+++++++++++

What's New in Python 3.10.6 final?
==================================

*Release date: 2022-08-01*

Security
--------

- gh-issue-87389: :mod:`http.server`: Fix an open redirection vulnerability
  in the HTTP server when an URI path starts with ``//``.  Vulnerability
  discovered, and initial fix proposed, by Hamza Avvan.

- gh-issue-92888: Fix ``memoryview`` use after free when accessing the
  backing buffer in certain cases.

Core and Builtins
-----------------

- gh-issue-95355: ``_PyPegen_Parser_New`` now properly detects token memory
  allocation errors. Patch by Honglin Zhu.

- gh-issue-94938: Fix error detection in some builtin functions when keyword
  argument name is an instance of a str subclass with overloaded ``__eq__``
  and ``__hash__``. Previously it could cause SystemError or other undesired
  behavior.

- gh-issue-94949: :func:`ast.parse` will no longer parse parenthesized
  context managers when passed ``feature_version`` less than ``(3, 9)``.
  Patch by Shantanu Jain.

- gh-issue-94947: :func:`ast.parse` will no longer parse assignment
  expressions when passed ``feature_version`` less than ``(3, 8)``. Patch by
  Shantanu Jain.

- gh-issue-94869: Fix the column offsets for some expressions in multi-line
  f-strings :mod:`ast` nodes. Patch by Pablo Galindo.

- gh-issue-91153: Fix an issue where a :class:`bytearray` item assignment
  could crash if it's resized by the new value's :meth:`__index__` method.

- gh-issue-94329: Compile and run code with unpacking of extremely large
  sequences (1000s of elements). Such code failed to compile. It now
  compiles and runs correctly.

- gh-issue-94360: Fixed a tokenizer crash when reading encoded files with
  syntax errors from ``stdin`` with non utf-8 encoded text. Patch by Pablo
  Galindo

- gh-issue-94192: Fix error for dictionary literals with invalid expression
  as value.

- gh-issue-93964: Strengthened compiler overflow checks to prevent crashes
  when compiling very large source files.

- gh-issue-93671: Fix some exponential backtrace case happening with deeply
  nested sequence patterns in match statements. Patch by Pablo Galindo

- gh-issue-93021: Fix the :attr:`__text_signature__` for :meth:`__get__`
  methods implemented in C. Patch by Jelle Zijlstra.

- gh-issue-92930: Fixed a crash in ``_pickle.c`` from mutating collections
  during ``__reduce__`` or ``persistent_id``.

- gh-issue-92914: Always round the allocated size for lists up to the
  nearest even number.

- gh-issue-92858: Improve error message for some suites with syntax error
  before ':'

Library
-------

- gh-issue-95339: Update bundled pip to 22.2.1.

- gh-issue-95045: Fix GC crash when deallocating ``_lsprof.Profiler`` by
  untracking it before calling any callbacks. Patch by Kumar Aditya.

- gh-issue-95087: Fix IndexError in parsing invalid date in the :mod:`email`
  module.

- gh-issue-95199: Upgrade bundled setuptools to 63.2.0.

- gh-issue-95194: Upgrade bundled pip to 22.2.

- gh-issue-93899: Fix check for existence of :data:`os.EFD_CLOEXEC`,
  :data:`os.EFD_NONBLOCK` and :data:`os.EFD_SEMAPHORE` flags on older kernel
  versions where these flags are not present. Patch by Kumar Aditya.

- gh-issue-95166: Fix :meth:`concurrent.futures.Executor.map` to cancel the
  currently waiting on future on an error - e.g. TimeoutError or
  KeyboardInterrupt.

- gh-issue-93157: Fix :mod:`fileinput` module didn't support ``errors``
  option when ``inplace`` is true.

- gh-issue-94821: Fix binding of unix socket to empty address on Linux to
  use an available address from the abstract namespace, instead of "\0".

- gh-issue-94736: Fix crash when deallocating an instance of a subclass of
  ``_multiprocessing.SemLock``. Patch by Kumar Aditya.

- gh-issue-94637: :meth:`SSLContext.set_default_verify_paths` now releases
  the GIL around ``SSL_CTX_set_default_verify_paths`` call. The function
  call performs I/O and CPU intensive work.

- gh-issue-94510: Re-entrant calls to :func:`sys.setprofile` and
  :func:`sys.settrace` now raise :exc:`RuntimeError`. Patch by Pablo
  Galindo.

- gh-issue-92336: Fix bug where :meth:`linecache.getline` fails on bad files
  with :exc:`UnicodeDecodeError` or :exc:`SyntaxError`. It now returns an
  empty string as per the documentation.

- gh-issue-89988: Fix memory leak in :class:`pickle.Pickler` when looking up
  :attr:`dispatch_table`. Patch by Kumar Aditya.

- gh-issue-94254: Fixed types of :mod:`struct` module to be immutable. Patch
  by Kumar Aditya.

- gh-issue-94245: Fix pickling and copying of ``typing.Tuple[()]``.

- gh-issue-94207: Made :class:`_struct.Struct` GC-tracked in order to fix a
  reference leak in the :mod:`_struct` module.

- gh-issue-94101: Manual instantiation of :class:`ssl.SSLSession` objects is
  no longer allowed as it lead to misconfigured instances that crashed the
  interpreter when attributes where accessed on them.

- gh-issue-84753: :func:`inspect.iscoroutinefunction`,
  :func:`inspect.isgeneratorfunction`, and
  :func:`inspect.isasyncgenfunction` now properly return ``True`` for
  duck-typed function-like objects like instances of
  :class:`unittest.mock.AsyncMock`.

  This makes :func:`inspect.iscoroutinefunction` consistent with the
  behavior of :func:`asyncio.iscoroutinefunction`.  Patch by Mehdi ABAAKOUK.

- gh-issue-83499: Fix double closing of file description in :mod:`tempfile`.

- gh-issue-79512: Fixed names and ``__module__`` value of :mod:`weakref`
  classes :class:`~weakref.ReferenceType`, :class:`~weakref.ProxyType`,
  :class:`~weakref.CallableProxyType`. It makes them pickleable.

- gh-issue-90494: :func:`copy.copy` and :func:`copy.deepcopy` now always
  raise a TypeError if ``__reduce__()`` returns a tuple with length 6
  instead of silently ignore the 6th item or produce incorrect result.

- gh-issue-90549: Fix a multiprocessing bug where a global named resource
  (such as a semaphore) could leak when a child process is spawned (as
  opposed to forked).

- gh-issue-79579: :mod:`sqlite3` now correctly detects DML queries with
  leading comments. Patch by Erlend E. Aasland.

- gh-issue-93421: Update :data:`sqlite3.Cursor.rowcount` when a DML
  statement has run to completion. This fixes the row count for SQL queries
  like ``UPDATE ... RETURNING``. Patch by Erlend E. Aasland.

- gh-issue-91810: Suppress writing an XML declaration in open files in
  ``ElementTree.write()`` with ``encoding='unicode'`` and
  ``xml_declaration=None``.

- gh-issue-93353: Fix the :func:`importlib.resources.as_file` context
  manager to remove the temporary file if destroyed late during Python
  finalization: keep a local reference to the :func:`os.remove` function.
  Patch by Victor Stinner.

- gh-issue-83658: Make :class:`multiprocessing.Pool` raise an exception if
  ``maxtasksperchild`` is not ``None`` or a positive int.

- gh-issue-74696: :func:`shutil.make_archive` no longer temporarily changes
  the current working directory during creation of standard ``.zip`` or tar
  archives.

- gh-issue-91577: Move imports in :class:`~multiprocessing.SharedMemory`
  methods to module level so that they can be executed late in python
  finalization.

- bpo-47231: Fixed an issue with inconsistent trailing slashes in tarfile
  longname directories.

- bpo-46755: In :class:`QueueHandler`, clear ``stack_info`` from
  :class:`LogRecord` to prevent stack trace from being written twice.

- bpo-46053: Fix OSS audio support on NetBSD.

- bpo-46197: Fix :mod:`ensurepip` environment isolation for subprocess
  running ``pip``.

- bpo-45924: Fix :mod:`asyncio` incorrect traceback when future's exception
  is raised multiple times. Patch by Kumar Aditya.

- bpo-34828: :meth:`sqlite3.Connection.iterdump` now handles databases that
  use ``AUTOINCREMENT`` in one or more tables.

Documentation
-------------

- gh-issue-94321: Document the :pep:`246` style protocol type
  :class:`sqlite3.PrepareProtocol`.

- gh-issue-86128: Document a limitation in ThreadPoolExecutor where its exit
  handler is executed before any handlers in atexit.

- gh-issue-61162: Clarify :mod:`sqlite3` behavior when
  :ref:`sqlite3-connection-context-manager`.

- gh-issue-87260: Align :mod:`sqlite3` argument specs with the actual
  implementation.

- gh-issue-86986: The minimum Sphinx version required to build the
  documentation is now 3.2.

- gh-issue-88831: Augmented documentation of asyncio.create_task().
  Clarified the need to keep strong references to tasks and added a code
  snippet detailing how to to this.

- bpo-47161: Document that :class:`pathlib.PurePath` does not collapse
  initial double slashes because they denote UNC paths.

Tests
-----

- gh-issue-95280: Fix problem with ``test_ssl`` ``test_get_ciphers`` on
  systems that require perfect forward secrecy (PFS) ciphers.

- gh-issue-95212: Make multiprocessing test case
  ``test_shared_memory_recreate`` parallel-safe.

- gh-issue-91330: Added more tests for :mod:`dataclasses` to cover behavior
  with data descriptor-based fields.

  # Write your Misc/NEWS entry below.  It should be a simple ReST paragraph.
  # Don't start with "- Issue #<n>: " or "- gh-issue-<n>: " or that sort of
  stuff.
  ###########################################################################

- gh-issue-94208: ``test_ssl`` is now checking for supported TLS version and
  protocols in more tests.

- gh-issue-93951: In test_bdb.StateTestCase.test_skip, avoid including
  auxiliary importers.

- gh-issue-93957: Provide nicer error reporting from subprocesses in
  test_venv.EnsurePipTest.test_with_pip.

- gh-issue-57539: Increase calendar test coverage for
  :meth:`calendar.LocaleTextCalendar.formatweekday`.

- gh-issue-92886: Fixing tests that fail when running with optimizations
  (``-O``) in ``test_zipimport.py``

- bpo-47016: Create a GitHub Actions workflow for verifying bundled pip and
  setuptools. Patch by Illia Volochii and Adam Turner.

Build
-----

- gh-issue-94841: Fix the possible performance regression of
  :c:func:`PyObject_Free` compiled with MSVC version 1932.

- bpo-45816: Python now supports building with Visual Studio 2022 (MSVC
  v143, VS Version 17.0). Patch by Jeremiah Vivian.

Windows
-------

- gh-issue-90844: Allow virtual environments to correctly launch when they
  have spaces in the path.

- gh-issue-92841: :mod:`asyncio` no longer throws ``RuntimeError: Event loop
  is closed`` on interpreter exit after asynchronous socket activity. Patch
  by Oleg Iarygin.

- bpo-42658: Support native Windows case-insensitive path comparisons by
  using ``LCMapStringEx`` instead of :func:`str.lower` in
  :func:`ntpath.normcase`. Add ``LCMapStringEx`` to the :mod:`_winapi`
  module.

IDLE
----

- gh-issue-95511: Fix the Shell context menu copy-with-prompts bug of
  copying an extra line when one selects whole lines.

- gh-issue-95471: In the Edit menu, move ``Select All`` and add a new
  separator.

- gh-issue-95411: Enable using IDLE's module browser with .pyw files.

- gh-issue-89610: Add .pyi as a recognized extension for IDLE on macOS.
  This allows opening stub files by double clicking on them in the Finder.

Tools/Demos
-----------

- gh-issue-94538: Fix Argument Clinic output to custom file destinations.
  Patch by Erlend E. Aasland.

- gh-issue-94430: Allow parameters named ``module`` and ``self`` with custom
  C names in Argument Clinic. Patch by Erlend E. Aasland

C API
-----

- gh-issue-94930: Fix ``SystemError`` raised when
  :c:func:`PyArg_ParseTupleAndKeywords` is used with ``#`` in ``(...)`` but
  without ``PY_SSIZE_T_CLEAN`` defined.

- gh-issue-94864: Fix ``PyArg_Parse*`` with deprecated format units "u" and
  "Z". It returned 1 (success) when warnings are turned into exceptions.


What's New in Python 3.10.5 final?
==================================

*Release date: 2022-06-06*

Core and Builtins
-----------------

- gh-issue-93418: Fixed an assert where an f-string has an equal sign '='
  following an expression, but there's no trailing brace. For example,
  f"{i=".

- gh-issue-91924: Fix ``__ltrace__`` debug feature if the stdout encoding is
  not UTF-8. Patch by Victor Stinner.

- gh-issue-93061: Backward jumps after ``async for`` loops are no longer
  given dubious line numbers.

- gh-issue-93065: Fix contextvars HAMT implementation to handle iteration
  over deep trees.

  The bug was discovered and fixed by Eli Libman. See
  `MagicStack/immutables#84
  <https://github.com/MagicStack/immutables/issues/84>`_ for more details.

- gh-issue-92311: Fixed a bug where setting ``frame.f_lineno`` to jump over
  a list comprehension could misbehave or crash.

- gh-issue-92112: Fix crash triggered by an evil custom ``mro()`` on a
  metaclass.

- gh-issue-92036: Fix a crash in subinterpreters related to the garbage
  collector. When a subinterpreter is deleted, untrack all objects tracked
  by its GC. To prevent a crash in deallocator functions expecting objects
  to be tracked by the GC, leak a strong reference to these objects on
  purpose, so they are never deleted and their deallocator functions are not
  called. Patch by Victor Stinner.

- gh-issue-91421: Fix a potential integer overflow in _Py_DecodeUTF8Ex.

- bpo-47212: Raise :exc:`IndentationError` instead of :exc:`SyntaxError` for
  a bare ``except`` with no following indent. Improve :exc:`SyntaxError`
  locations for an un-parenthesized generator used as arguments. Patch by
  Matthieu Dartiailh.

- bpo-47182: Fix a crash when using a named unicode character like
  ``"\N{digit nine}"`` after the main interpreter has been initialized a
  second time.

- bpo-46775: Some Windows system error codes(>= 10000) are now mapped into
  the correct errno and may now raise a subclass of :exc:`OSError`. Patch by
  Dong-hee Na.

- bpo-47117: Fix a crash if we fail to decode characters in interactive mode
  if the tokenizer buffers are uninitialized. Patch by Pablo Galindo.

- bpo-39829: Removed the ``__len__()`` call when initializing a list and
  moved initializing to ``list_extend``. Patch by Jeremiah Pascual.

- bpo-46962: Classes and functions that unconditionally declared their
  docstrings ignoring the `--without-doc-strings` compilation flag no longer
  do so.

  The classes affected are :class:`ctypes.UnionType`,
  :class:`pickle.PickleBuffer`, :class:`testcapi.RecursingInfinitelyError`,
  and :class:`types.GenericAlias`.

  The functions affected are 24 methods in :mod:`ctypes`.

  Patch by Oleg Iarygin.

- bpo-36819: Fix crashes in built-in encoders with error handlers that
  return position less or equal than the starting position of non-encodable
  characters.

Library
-------

- gh-issue-93156: Accessing the :attr:`pathlib.PurePath.parents` sequence of
  an absolute path using negative index values produced incorrect results.

- gh-issue-89973: Fix :exc:`re.error` raised in :mod:`fnmatch` if the
  pattern contains a character range with upper bound lower than lower bound
  (e.g. ``[c-a]``). Now such ranges are interpreted as empty ranges.

- gh-issue-93010: In a very special case, the email package tried to append
  the nonexistent ``InvalidHeaderError`` to the defect list. It should have
  been ``InvalidHeaderDefect``.

- gh-issue-92839: Fixed crash resulting from calling bisect.insort() or
  bisect.insort_left() with the key argument not equal to None.

- gh-issue-91581: :meth:`~datetime.datetime.utcfromtimestamp` no longer
  attempts to resolve ``fold`` in the pure Python implementation, since the
  fold is never 1 in UTC. In addition to being slightly faster in the common
  case, this also prevents some errors when the timestamp is close to
  :attr:`datetime.min <datetime.datetime.min>`.  Patch by Paul Ganssle.

- gh-issue-92530: Fix an issue that occurred after interrupting
  :func:`threading.Condition.notify`.

- gh-issue-92049: Forbid pickling constants ``re._constants.SUCCESS`` etc.
  Previously, pickling did not fail, but the result could not be unpickled.

- bpo-47029: Always close the read end of the pipe used by
  :class:`multiprocessing.Queue` *after* the last write of buffered data to
  the write end of the pipe to avoid :exc:`BrokenPipeError` at garbage
  collection and at :meth:`multiprocessing.Queue.close` calls. Patch by Géry
  Ogam.

- gh-issue-91401: Provide a fail-safe way to disable :mod:`subprocess` use
  of ``vfork()`` via a private ``subprocess._USE_VFORK`` attribute. While
  there is currently no known need for this, if you find a need please only
  set it to ``False``. File a CPython issue as to why you needed it and link
  to that from a comment in your code. This attribute is documented as a
  footnote in 3.11.

- gh-issue-91910: Add missing f prefix to f-strings in error messages from
  the :mod:`multiprocessing` and :mod:`asyncio` modules.

- gh-issue-91810: :class:`~xml.etree.ElementTree.ElementTree` method
  :meth:`~xml.etree.ElementTree.ElementTree.write` and function
  :func:`~xml.etree.ElementTree.tostring` now use the text file's encoding
  ("UTF-8" if not available) instead of locale encoding in XML declaration
  when ``encoding="unicode"`` is specified.

- gh-issue-91832: Add ``required`` attribute to :class:`argparse.Action`
  repr output.

- gh-issue-91734: Fix OSS audio support on Solaris.

- gh-issue-91700: Compilation of regular expression containing a conditional
  expression ``(?(group)...)`` now raises an appropriate :exc:`re.error` if
  the group number refers to not defined group. Previously an internal
  RuntimeError was raised.

- gh-issue-91676: Fix :class:`unittest.IsolatedAsyncioTestCase` to shutdown
  the per test event loop executor before returning from its ``run`` method
  so that a not yet stopped or garbage collected executor state does not
  persist beyond the test.

- gh-issue-90568: Parsing ``\N`` escapes of Unicode Named Character
  Sequences in a :mod:`regular expression <re>` raises now :exc:`re.error`
  instead of ``TypeError``.

- gh-issue-91595: Fix the comparison of character and integer inside
  :func:`Tools.gdb.libpython.write_repr`. Patch by Yu Liu.

- gh-issue-90622: Worker processes for
  :class:`concurrent.futures.ProcessPoolExecutor` are no longer spawned on
  demand (a feature added in 3.9) when the multiprocessing context start
  method is ``"fork"`` as that can lead to deadlocks in the child processes
  due to a fork happening while threads are running.

- gh-issue-91575: Update case-insensitive matching in the :mod:`re` module
  to the latest Unicode version.

- gh-issue-91581: Remove an unhandled error case in the C implementation of
  calls to :meth:`datetime.fromtimestamp <datetime.datetime.fromtimestamp>`
  with no time zone (i.e. getting a local time from an epoch timestamp).
  This should have no user-facing effect other than giving a possibly more
  accurate error message when called with timestamps that fall on
  10000-01-01 in the local time. Patch by Paul Ganssle.

- bpo-47260: Fix ``os.closerange()`` potentially being a no-op in a Linux
  seccomp sandbox.

- bpo-39064: :class:`zipfile.ZipFile` now raises :exc:`zipfile.BadZipFile`
  instead of ``ValueError`` when reading a corrupt zip file in which the
  central directory offset is negative.

- bpo-47151: When subprocess tries to use vfork, it now falls back to fork
  if vfork returns an error. This allows use in situations where vfork isn't
  allowed by the OS kernel.

- bpo-27929: Fix :meth:`asyncio.loop.sock_connect` to only resolve names for
  :const:`socket.AF_INET` or :const:`socket.AF_INET6` families. Resolution
  may not make sense for other families, like :const:`socket.AF_BLUETOOTH`
  and :const:`socket.AF_UNIX`.

- bpo-43323: Fix errors in the :mod:`email` module if the charset itself
  contains undecodable/unencodable characters.

- bpo-47101: :const:`hashlib.algorithms_available` now lists only algorithms
  that are provided by activated crypto providers on OpenSSL 3.0. Legacy
  algorithms are not listed unless the legacy provider has been loaded into
  the default OSSL context.

- bpo-46787: Fix :class:`concurrent.futures.ProcessPoolExecutor` exception
  memory leak

- bpo-45393: Fix the formatting for ``await x`` and ``not x`` in the
  operator precedence table when using the :func:`help` system.

- bpo-46415: Fix ipaddress.ip_{address,interface,network} raising TypeError
  instead of ValueError if given invalid tuple as address parameter.

- bpo-28249: Set :attr:`doctest.DocTest.lineno` to ``None`` when object does
  not have :attr:`__doc__`.

- bpo-45138: Fix a regression in the :mod:`sqlite3` trace callback where
  bound parameters were not expanded in the passed statement string. The
  regression was introduced in Python 3.10 by :issue:`40318`. Patch by
  Erlend E. Aasland.

- bpo-44493: Add missing terminated NUL in sockaddr_un's length

  This was potentially observable when using non-abstract AF_UNIX datagram
  sockets to processes written in another programming language.

- bpo-42627: Fix incorrect parsing of Windows registry proxy settings

- bpo-36073: Raise :exc:`~sqlite3.ProgrammingError` instead of segfaulting
  on recursive usage of cursors in :mod:`sqlite3` converters. Patch by
  Sergey Fedoseev.

Documentation
-------------

- gh-issue-86438: Clarify that :option:`-W` and :envvar:`PYTHONWARNINGS` are
  matched literally and case-insensitively, rather than as regular
  expressions, in :mod:`warnings`.

- gh-issue-92240: Added release dates for "What's New in Python 3.X" for
  3.0, 3.1, 3.2, 3.8 and 3.10

- gh-issue-91888: Add a new ``gh`` role to the documentation to link to
  GitHub issues.

- gh-issue-91783: Document security issues concerning the use of the
  function :meth:`shutil.unpack_archive`

- gh-issue-91547: Remove "Undocumented modules" page.

- bpo-44347: Clarify the meaning of *dirs_exist_ok*, a kwarg of
  :func:`shutil.copytree`.

- bpo-38668: Update the introduction to documentation for :mod:`os.path` to
  remove warnings that became irrelevant after the implementations of
  :pep:`383` and :pep:`529`.

- bpo-47138: Pin Jinja to a version compatible with Sphinx version 3.2.1.

- bpo-46962: All docstrings in code snippets are now wrapped into
  :func:`PyDoc_STR` to follow the guideline of `PEP 7's Documentation
  Strings paragraph
  <https://www.python.org/dev/peps/pep-0007/#documentation-strings>`_. Patch
  by Oleg Iarygin.

- bpo-26792: Improve the docstrings of :func:`runpy.run_module` and
  :func:`runpy.run_path`. Original patch by Andrew Brezovsky.

- bpo-40838: Document that :func:`inspect.getdoc`,
  :func:`inspect.getmodule`, and :func:`inspect.getsourcefile` might return
  ``None``.

- bpo-45790: Adjust inaccurate phrasing in
  :doc:`../extending/newtypes_tutorial` about the ``ob_base`` field and the
  macros used to access its contents.

- bpo-42340: Document that in some circumstances :exc:`KeyboardInterrupt`
  may cause the code to enter an inconsistent state. Provided a sample
  workaround to avoid it if needed.

- bpo-41233: Link the errnos referenced in ``Doc/library/exceptions.rst`` to
  their respective section in ``Doc/library/errno.rst``, and vice versa.
  Previously this was only done for EINTR and InterruptedError. Patch by Yan
  "yyyyyyyan" Orestes.

- bpo-38056: Overhaul the :ref:`error-handlers` documentation in
  :mod:`codecs`.

- bpo-13553: Document tkinter.Tk args.

Tests
-----

- gh-issue-92886: Fixing tests that fail when running with optimizations
  (``-O``) in ``test_imaplib.py``.

- gh-issue-92670: Skip
  ``test_shutil.TestCopy.test_copyfile_nonexistent_dir`` test on AIX as the
  test uses a trailing slash to force the OS consider the path as a
  directory, but on AIX the trailing slash has no effect and is considered
  as a file.

- gh-issue-91904: Fix initialization of
  :envvar:`PYTHONREGRTEST_UNICODE_GUARD` which prevented running regression
  tests on non-UTF-8 locale.

- gh-issue-91607: Fix ``test_concurrent_futures`` to test the correct
  multiprocessing start method context in several cases where the test logic
  mixed this up.

- bpo-47205: Skip test for :func:`~os.sched_getaffinity` and
  :func:`~os.sched_setaffinity` error case on FreeBSD.

- bpo-47104: Rewrite :func:`asyncio.to_thread` tests to use
  :class:`unittest.IsolatedAsyncioTestCase`.

- bpo-29890: Add tests for :class:`ipaddress.IPv4Interface` and
  :class:`ipaddress.IPv6Interface` construction with tuple arguments.
  Original patch and tests by louisom.

Build
-----

- bpo-47103: Windows ``PGInstrument`` builds now copy a required DLL into
  the output directory, making it easier to run the profile stage of a PGO
  build.

Windows
-------

- gh-issue-92984: Explicitly disable incremental linking for non-Debug
  builds

- bpo-47194: Update ``zlib`` to v1.2.12 to resolve CVE-2018-25032.

- bpo-46785: Fix race condition between :func:`os.stat` and unlinking a file
  on Windows, by using errors codes returned by ``FindFirstFileW()`` when
  appropriate in ``win32_xstat_impl``.

- bpo-40859: Update Windows build to use xz-5.2.5

Tools/Demos
-----------

- gh-issue-91583: Fix regression in the code generated by Argument Clinic
  for functions with the ``defining_class`` parameter.


What's New in Python 3.10.4 final?
==================================

*Release date: 2022-03-23*

Core and Builtins
-----------------

- bpo-46968: Check for the existence of the "sys/auxv.h" header in
  :mod:`faulthandler` to avoid compilation problems in systems where this
  header doesn't exist. Patch by Pablo Galindo

Library
-------

- bpo-23691: Protect the :func:`re.finditer` iterator from re-entering.

- bpo-42369: Fix thread safety of :meth:`zipfile._SharedFile.tell` to avoid
  a "zipfile.BadZipFile: Bad CRC-32 for file" exception when reading a
  :class:`ZipFile` from multiple threads.

- bpo-38256: Fix :func:`binascii.crc32` when it is compiled to use zlib'c
  crc32 to work properly on inputs 4+GiB in length instead of returning the
  wrong result. The workaround prior to this was to always feed the function
  data in increments smaller than 4GiB or to just call the zlib module
  function.

- bpo-39394: A warning about inline flags not at the start of the regular
  expression now contains the position of the flag.

- bpo-47061: Deprecate the various modules listed by :pep:`594`:

  aifc, asynchat, asyncore, audioop, cgi, cgitb, chunk, crypt, imghdr,
  msilib, nntplib, nis, ossaudiodev, pipes, smtpd, sndhdr, spwd, sunau,
  telnetlib, uu, xdrlib

- bpo-2604: Fix bug where doctests using globals would fail when run
  multiple times.

- bpo-45997: Fix :class:`asyncio.Semaphore` re-aquiring FIFO order.

- bpo-47022: The :mod:`asynchat`, :mod:`asyncore` and  :mod:`smtpd` modules
  have been deprecated since at least Python 3.6. Their documentation and
  deprecation warnings and have now been updated to note they will removed
  in Python 3.12 (:pep:`594`).

- bpo-46421: Fix a unittest issue where if the command was invoked as
  ``python -m unittest`` and the filename(s) began with a dot (.), a
  ``ValueError`` is returned.

- bpo-40296: Fix supporting generic aliases in :mod:`pydoc`.


What's New in Python 3.10.3 final?
==================================

*Release date: 2022-03-16*

Core and Builtins
-----------------

- bpo-46940: Avoid overriding :exc:`AttributeError` metadata information for
  nested attribute access calls. Patch by Pablo Galindo.

- bpo-46852: Rename the private undocumented ``float.__set_format__()``
  method to ``float.__setformat__()`` to fix a typo introduced in Python
  3.7. The method is only used by test_float. Patch by Victor Stinner.

- bpo-46794: Bump up the libexpat version into 2.4.6

- bpo-46820: Fix parsing a numeric literal immediately (without spaces)
  followed by "not in" keywords, like in ``1not in x``. Now the parser only
  emits a warning, not a syntax error.

- bpo-46762: Fix an assert failure in debug builds when a '<', '>', or '='
  is the last character in an f-string that's missing a closing right brace.

- bpo-46724: Make sure that all backwards jumps use the ``JUMP_ABSOLUTE``
  instruction, rather than ``JUMP_FORWARD`` with an argument of
  ``(2**32)+offset``.

- bpo-46732: Correct the docstring for the :meth:`__bool__` method. Patch by
  Jelle Zijlstra.

- bpo-46707: Avoid potential exponential backtracking when producing some
  syntax errors involving lots of brackets. Patch by Pablo Galindo.

- bpo-40479: Add a missing call to ``va_end()`` in
  ``Modules/_hashopenssl.c``.

- bpo-46615: When iterating over sets internally in ``setobject.c``, acquire
  strong references to the resulting items from the set.  This prevents
  crashes in corner-cases of various set operations where the set gets
  mutated.

- bpo-45773: Remove two invalid "peephole" optimizations from the bytecode
  compiler.

- bpo-43721: Fix docstrings of :attr:`~property.getter`,
  :attr:`~property.setter`, and :attr:`~property.deleter` to clarify that
  they create a new copy of the property.

- bpo-46503: Fix an assert when parsing some invalid \N escape sequences in
  f-strings.

- bpo-46417: Fix a race condition on setting a type ``__bases__`` attribute:
  the internal function ``add_subclass()`` now gets the
  ``PyTypeObject.tp_subclasses`` member after calling
  :c:func:`PyWeakref_NewRef` which can trigger a garbage collection which
  can indirectly modify ``PyTypeObject.tp_subclasses``. Patch by Victor
  Stinner.

- bpo-46383: Fix invalid signature of ``_zoneinfo``'s ``module_free``
  function to resolve a crash on wasm32-emscripten platform.

- bpo-46070: :c:func:`Py_EndInterpreter` now explicitly untracks all objects
  currently tracked by the GC. Previously, if an object was used later by
  another interpreter, calling :c:func:`PyObject_GC_UnTrack` on the object
  crashed if the previous or the next object of the :c:type:`PyGC_Head`
  structure became a dangling pointer. Patch by Victor Stinner.

- bpo-46339: Fix a crash in the parser when retrieving the error text for
  multi-line f-strings expressions that do not start in the first line of
  the string. Patch by Pablo Galindo

- bpo-46240: Correct the error message for unclosed parentheses when the
  tokenizer doesn't reach the end of the source when the error is reported.
  Patch by Pablo Galindo

- bpo-46091: Correctly calculate indentation levels for lines with
  whitespace character that are ended by line continuation characters. Patch
  by Pablo Galindo

Library
-------

- bpo-43253: Fix a crash when closing transports where the underlying socket
  handle is already invalid on the Proactor event loop.

- bpo-47004: Apply bugfixes from importlib_metadata 4.11.3, including bugfix
  for EntryPoint.extras, which was returning match objects and not the
  extras strings.

- bpo-46985: Upgrade pip wheel bundled with ensurepip (pip 22.0.4)

- bpo-46968: :mod:`faulthandler`: On Linux 5.14 and newer, dynamically
  determine size of signal handler stack size CPython allocates using
  ``getauxval(AT_MINSIGSTKSZ)``. This changes allows for Python extension's
  request to Linux kernel to use AMX_TILE instruction set on Sapphire Rapids
  Xeon processor to succeed, unblocking use of the ISA in frameworks.

- bpo-46955: Expose :class:`asyncio.base_events.Server` as
  :class:`asyncio.Server`. Patch by Stefan Zabka.

- bpo-23325: The :mod:`signal` module no longer assumes that
  :const:`~signal.SIG_IGN` and :const:`~signal.SIG_DFL` are small int
  singletons.

- bpo-46932: Update bundled libexpat to 2.4.7

- bpo-25707: Fixed a file leak in :func:`xml.etree.ElementTree.iterparse`
  when the iterator is not exhausted. Patch by Jacob Walls.

- bpo-44886: Inherit asyncio proactor datagram transport from
  :class:`asyncio.DatagramTransport`.

- bpo-46827: Support UDP sockets in  :meth:`asyncio.loop.sock_connect` for
  selector-based event loops.  Patch by Thomas Grainger.

- bpo-46811: Make test suite support Expat >=2.4.5

- bpo-46252: Raise :exc:`TypeError` if :class:`ssl.SSLSocket` is passed to
  transport-based APIs.

- bpo-46784: Fix libexpat symbols collisions with user dynamically loaded or
  statically linked libexpat in embedded Python.

- bpo-39327: :func:`shutil.rmtree` can now work with VirtualBox shared
  folders when running from the guest operating-system.

- bpo-46756: Fix a bug in
  :meth:`urllib.request.HTTPPasswordMgr.find_user_password` and
  :meth:`urllib.request.HTTPPasswordMgrWithPriorAuth.is_authenticated` which
  allowed to bypass authorization. For example, access to URI
  ``example.org/foobar`` was allowed if the user was authorized for URI
  ``example.org/foo``.

- bpo-46643: In :func:`typing.get_type_hints`, support evaluating
  stringified ``ParamSpecArgs`` and ``ParamSpecKwargs`` annotations. Patch
  by Gregory Beauregard.

- bpo-45863: When the :mod:`tarfile` module creates a pax format archive, it
  will put an integer representation of timestamps in the ustar header (if
  possible) for the benefit of older unarchivers, in addition to the
  existing full-precision timestamps in the pax extended header.

- bpo-46676: Make :data:`typing.ParamSpec` args and kwargs equal to
  themselves. Patch by Gregory Beauregard.

- bpo-46672: Fix ``NameError`` in :func:`asyncio.gather` when initial type
  check fails.

- bpo-46655: In :func:`typing.get_type_hints`, support evaluating bare
  stringified ``TypeAlias`` annotations. Patch by Gregory Beauregard.

- bpo-45948: Fixed a discrepancy in the C implementation of the
  :mod:`xml.etree.ElementTree` module. Now, instantiating an
  :class:`xml.etree.ElementTree.XMLParser` with a ``target=None`` keyword
  provides a default :class:`xml.etree.ElementTree.TreeBuilder` target as
  the Python implementation does.

- bpo-46521: Fix a bug in the :mod:`codeop` module that was incorrectly
  identifying invalid code involving string quotes as valid code.

- bpo-46581: Brings :class:`ParamSpec` propagation for :class:`GenericAlias`
  in line with :class:`Concatenate` (and others).

- bpo-46591: Make the IDLE doc URL on the About IDLE dialog clickable.

- bpo-46400: expat: Update libexpat from 2.4.1 to 2.4.4

- bpo-46487: Add the ``get_write_buffer_limits`` method to
  :class:`asyncio.transports.WriteTransport` and to the SSL transport.

- bpo-45173: Note the configparser deprecations will be removed in Python
  3.12.

- bpo-46539: In :func:`typing.get_type_hints`, support evaluating
  stringified ``ClassVar`` and ``Final`` annotations inside ``Annotated``.
  Patch by Gregory Beauregard.

- bpo-46491: Allow :data:`typing.Annotated` to wrap :data:`typing.Final` and
  :data:`typing.ClassVar`. Patch by Gregory Beauregard.

- bpo-46436: Fix command-line option ``-d``/``--directory`` in module
  :mod:`http.server` which is ignored when combined with command-line option
  ``--cgi``. Patch by Géry Ogam.

- bpo-41403: Make :meth:`mock.patch` raise a :exc:`TypeError` with a
  relevant error message on invalid arg. Previously it allowed a cryptic
  :exc:`AttributeError` to escape.

- bpo-46474: In ``importlib.metadata.EntryPoint.pattern``, avoid potential
  REDoS by limiting ambiguity in consecutive whitespace.

- bpo-46469: :mod:`asyncio` generic classes now return
  :class:`types.GenericAlias` in ``__class_getitem__`` instead of the same
  class.

- bpo-46434: :mod:`pdb` now gracefully handles ``help`` when :attr:`__doc__`
  is missing, for example when run with pregenerated optimized ``.pyc``
  files.

- bpo-46333: The :meth:`__eq__` and :meth:`__hash__` methods of
  :class:`typing.ForwardRef` now honor the ``module`` parameter of
  :class:`typing.ForwardRef`. Forward references from different modules are
  now differentiated.

- bpo-46246: Add missing ``__slots__`` to
  ``importlib.metadata.DeprecatedList``. Patch by Arie Bovenberg.

- bpo-46266: Improve day constants in :mod:`calendar`.

  Now all constants (`MONDAY` ... `SUNDAY`) are documented, tested, and
  added to ``__all__``.

- bpo-46232: The :mod:`ssl` module now handles certificates with bit strings
  in DN correctly.

- bpo-43118: Fix a bug in :func:`inspect.signature` that was causing it to
  fail on some subclasses of classes with a ``__text_signature__``
  referencing module globals. Patch by Weipeng Hong.

- bpo-26552: Fixed case where failing :func:`asyncio.ensure_future` did not
  close the coroutine. Patch by Kumar Aditya.

- bpo-21987: Fix an issue with :meth:`tarfile.TarFile.getmember` getting a
  directory name with a trailing slash.

- bpo-20392: Fix inconsistency with uppercase file extensions in
  :meth:`MimeTypes.guess_type`. Patch by Kumar Aditya.

- bpo-46080: Fix exception in argparse help text generation if a
  :class:`argparse.BooleanOptionalAction` argument's default is
  ``argparse.SUPPRESS`` and it has ``help`` specified.  Patch by Felix
  Fontein.

- bpo-44439: Fix ``.write()`` method of a member file in ``ZipFile``, when
  the input data is an object that supports the buffer protocol, the file
  length may be wrong.

- bpo-45703: When a namespace package is imported before another module from
  the same namespace is created/installed in a different :data:`sys.path`
  location while the program is running, calling the
  :func:`importlib.invalidate_caches` function will now also guarantee the
  new module is noticed.

- bpo-24959: Fix bug where :mod:`unittest` sometimes drops frames from
  tracebacks of exceptions raised in tests.

- bpo-44791: Fix substitution of :class:`~typing.ParamSpec` in
  :data:`~typing.Concatenate` with different parameter expressions.
  Substitution with a list of types returns now a tuple of types.
  Substitution with ``Concatenate`` returns now a ``Concatenate`` with
  concatenated lists of arguments.

- bpo-14156: argparse.FileType now supports an argument of '-' in binary
  mode, returning the .buffer attribute of sys.stdin/sys.stdout as
  appropriate. Modes including 'x' and 'a' are treated equivalently to 'w'
  when argument is '-'. Patch contributed by Josh Rosenberg

Documentation
-------------

- bpo-46463: Fixes :file:`escape4chm.py` script used when building the CHM
  documentation file

Tests
-----

- bpo-46913: Fix test_faulthandler.test_sigfpe() if Python is built with
  undefined behavior sanitizer (UBSAN): disable UBSAN on the
  faulthandler_sigfpe() function. Patch by Victor Stinner.

- bpo-46708: Prevent default asyncio event loop policy modification warning
  after ``test_asyncio`` execution.

- bpo-46678: The function ``make_legacy_pyc`` in
  ``Lib/test/support/import_helper.py`` no longer fails when
  ``PYTHONPYCACHEPREFIX`` is set to a directory on a different device from
  where tempfiles are stored.

- bpo-46616: Ensures ``test_importlib.test_windows`` cleans up registry keys
  after completion.

- bpo-44359: test_ftplib now silently ignores socket errors to prevent
  logging unhandled threading exceptions. Patch by Victor Stinner.

- bpo-46542: Fix a Python crash in test_lib2to3 when using Python built in
  debug mode: limit the recursion limit. Patch by Victor Stinner.

- bpo-46576: test_peg_generator now disables compiler optimization when
  testing compilation of its own C extensions to significantly speed up the
  testing on non-debug builds of CPython.

- bpo-46542: Fix ``test_json`` tests checking for :exc:`RecursionError`:
  modify these tests to use ``support.infinite_recursion()``. Patch by
  Victor Stinner.

- bpo-13886: Skip test_builtin PTY tests on non-ASCII characters if the
  readline module is loaded. The readline module changes input() behavior,
  but test_builtin is not intented to test the readline module. Patch by
  Victor Stinner.

Build
-----

- bpo-47032: Ensure Windows install builds fail correctly with a non-zero
  exit code when part of the build fails.

- bpo-47024: Update OpenSSL to 1.1.1n for macOS installers and all Windows
  builds.

- bpo-38472: Fix GCC detection in setup.py when cross-compiling. The C
  compiler is now run with LC_ALL=C. Previously, the detection failed with a
  German locale.

- bpo-46513: :program:`configure` no longer uses ``AC_C_CHAR_UNSIGNED``
  macro and ``pyconfig.h`` no longer defines reserved symbol
  ``__CHAR_UNSIGNED__``.

- bpo-45925: Update Windows installer to use SQLite 3.37.2.

Windows
-------

- bpo-44549: Update bzip2 to 1.0.8 in Windows builds to mitigate
  CVE-2016-3189 and CVE-2019-12900

- bpo-46948: Prevent CVE-2022-26488 by ensuring the Add to PATH option in
  the Windows installer uses the correct path when being repaired.

- bpo-46638: Ensures registry virtualization is consistently disabled. For
  3.10 and earlier, it remains enabled (some registry writes are protected),
  while for 3.11 and later it is disabled (registry modifications affect all
  applications).

macOS
-----

- bpo-45925: Update macOS installer to SQLite 3.37.2.

IDLE
----

- bpo-46630: Make query dialogs on Windows start with a cursor in the entry
  box.

- bpo-45296: Clarify close, quit, and exit in IDLE.  In the File menu,
  'Close' and 'Exit' are now 'Close Window' (the current one) and 'Exit' is
  now 'Exit IDLE' (by closing all windows).  In Shell, 'quit()' and 'exit()'
  mean 'close Shell'. If there are no other windows, this also exits IDLE.

- bpo-45447: Apply IDLE syntax highlighting to `.pyi` files. Patch by Alex
  Waygood and Terry Jan Reedy.

C API
-----

- bpo-46433: The internal function _PyType_GetModuleByDef now correctly
  handles inheritance patterns involving static types.

- bpo-14916: Fixed bug in the tokenizer that prevented
  ``PyRun_InteractiveOne`` from parsing from the provided FD.


What's New in Python 3.10.2 final?
==================================

*Release date: 2022-01-13*

Core and Builtins
-----------------

- bpo-46347: Fix memory leak in PyEval_EvalCodeEx.

- bpo-46289: ASDL declaration of ``FormattedValue`` has changed to reflect
  ``conversion`` field is not optional.

- bpo-46237: Fix the line number of tokenizer errors inside f-strings. Patch
  by Pablo Galindo.

- bpo-46006: Fix a regression when a type method like ``__init__()`` is
  modified in a subinterpreter. Fix a regression in
  ``_PyUnicode_EqualToASCIIId()`` and type ``update_slot()``. Revert the
  change which made the Unicode dictionary of interned strings compatible
  with subinterpreters: the internal interned dictionary is shared again by
  all interpreters. Patch by Victor Stinner.

- bpo-46085: Fix iterator cache mechanism of :class:`OrderedDict`.

- bpo-46110: Add a maximum recursion check to the PEG parser to avoid stack
  overflow. Patch by Pablo Galindo

- bpo-46054: Fix parser error when parsing non-utf8 characters in source
  files. Patch by Pablo Galindo.

- bpo-46042: Improve the location of the caret in :exc:`SyntaxError`
  exceptions emitted by the symbol table. Patch by Pablo Galindo.

- bpo-46025: Fix a crash in the :mod:`atexit` module involving functions
  that unregister themselves before raising exceptions. Patch by Pablo
  Galindo.

- bpo-46009: Restore behavior from 3.9 and earlier when sending non-None to
  newly started generator. In 3.9 this did not affect the state of the
  generator. In 3.10.0 and 3.10.1 ``gen_func().send(0)`` is equivalent to
  ``gen_func().throw(TypeError(...)`` which exhausts the generator. In
  3.10.2 onward, the behavior has been reverted to that of 3.9.

- bpo-46000: Improve compatibility of the :mod:`curses` module with NetBSD
  curses.

- bpo-46004: Fix the :exc:`SyntaxError` location for errors involving for
  loops with invalid targets. Patch by Pablo Galindo

- bpo-42918: Fix bug where the built-in :func:`compile` function did not
  always raise a :exc:`SyntaxError` when passed multiple statements in
  'single' mode. Patch by Weipeng Hong.

Library
-------

- bpo-40479: Fix :mod:`hashlib` *usedforsecurity* option to work correctly
  with OpenSSL 3.0.0 in FIPS mode.

- bpo-46070: Fix possible segfault when importing the :mod:`asyncio` module
  from different sub-interpreters in parallel. Patch by Erlend E. Aasland.

- bpo-46278: Reflect ``context`` argument in ``AbstractEventLoop.call_*()``
  methods. Loop implementations already support it.

- bpo-46239: Improve error message when importing
  :mod:`asyncio.windows_events` on non-Windows.

- bpo-20369: :func:`concurrent.futures.wait` no longer blocks forever when
  given duplicate Futures. Patch by Kumar Aditya.

- bpo-46105: Honor spec when generating requirement specs with urls and
  extras (importlib_metadata 4.8.3).

- bpo-26952: :mod:`argparse` raises :exc:`ValueError` with clear message
  when trying to render usage for an empty mutually-exclusive group.
  Previously it raised a cryptic :exc:`IndexError`.

- bpo-27718: Fix help for the :mod:`signal` module. Some functions (e.g.
  ``signal()`` and ``getsignal()``) were omitted.

- bpo-46032: The ``registry()`` method of :func:`functools.singledispatch`
  functions checks now the first argument or the first parameter annotation
  and raises a TypeError if it is not supported. Previously unsupported
  "types" were ignored (e.g. ``typing.List[int]``) or caused an error at
  calling time (e.g. ``list[int]``).

- bpo-46018: Ensure that :func:`math.expm1` does not raise on underflow.

- bpo-45755: :mod:`typing` generic aliases now reveal the class attributes
  of the original generic class when passed to ``dir()``. This was the
  behavior up to Python 3.6, but was changed in 3.7-3.9.

- bpo-13236: :class:`unittest.TextTestResult` and
  :class:`unittest.TextTestRunner` flush now the output stream more often.

- bpo-42378: Fixes the issue with log file being overwritten when
  :class:`logging.FileHandler` is used in :mod:`atexit` with *filemode* set
  to ``'w'``. Note this will cause the message in *atexit* not being logged
  if the log stream is already closed due to shutdown of logging.

Documentation
-------------

- bpo-46120: State that ``|`` is preferred for readability over ``Union`` in
  the :mod:`typing` docs.

- bpo-46040: Fix removal Python version for ``@asyncio.coroutine``, the
  correct value is 3.11.

- bpo-19737: Update the documentation for the :func:`globals` function.

- bpo-45840: Improve cross-references in the documentation for the data
  model.

Tests
-----

- bpo-46205: Fix hang in runtest_mp due to race condition

- bpo-46263: Fix test_capi on FreeBSD 14-dev: instruct jemalloc to not fill
  freed memory with junk byte.

- bpo-46150: Now ``fakename`` in
  ``test_pathlib.PosixPathTest.test_expanduser`` is checked to be
  non-existent.

- bpo-46129: Rewrite ``asyncio.locks`` tests with
  :class:`unittest.IsolatedAsyncioTestCase` usage.

- bpo-46114: Fix test case for OpenSSL 3.0.1 version. OpenSSL 3.0 uses
  ``0xMNN00PP0L``.

Build
-----

- bpo-46263: ``configure`` no longer sets ``MULTIARCH`` on FreeBSD
  platforms.

- bpo-46106: Updated OpenSSL to 1.1.1m in Windows builds, macOS installer
  builds, and CI. Patch by Kumar Aditya.

macOS
-----

- bpo-40477: The Python Launcher app for macOS now properly launches scripts
  and, if necessary, the Terminal app when running on recent macOS releases.

C API
-----

- bpo-46236: Fix a bug in :c:func:`PyFunction_GetAnnotations` that caused it
  to return a ``tuple`` instead of a ``dict``.


What's New in Python 3.10.1 final?
==================================

*Release date: 2021-12-06*

Core and Builtins
-----------------

- bpo-42268: Fail the configure step if the selected compiler doesn't
  support memory sanitizer. Patch by Pablo Galindo

- bpo-45727: Refine the custom syntax error that suggests that a comma may
  be missing to trigger only when the expressions are detected between
  parentheses or brackets. Patch by Pablo Galindo

- bpo-45614: Fix :mod:`traceback` display for exceptions with invalid module
  name.

- bpo-45848: Allow the parser to obtain error lines directly from encoded
  files. Patch by Pablo Galindo

- bpo-45826: Fixed a crash when calling ``.with_traceback(None)`` on
  ``NameError``. This occurs internally in
  ``unittest.TestCase.assertRaises()``.

- bpo-45822: Fixed a bug in the parser that was causing it to not respect
  :pep:`263` coding cookies when no flags are provided. Patch by Pablo
  Galindo

- bpo-45820: Fix a segfault when the parser fails without reading any input.
  Patch by Pablo Galindo

- bpo-42540: Fix crash when :func:`os.fork` is called with an active
  non-default memory allocator.

- bpo-45738: Fix computation of error location for invalid continuation
  characters in the parser. Patch by Pablo Galindo.

- bpo-45773: Fix a compiler hang when attempting to optimize certain jump
  patterns.

- bpo-45716: Improve the :exc:`SyntaxError` message when using ``True``,
  ``None`` or ``False`` as keywords in a function call. Patch by Pablo
  Galindo.

- bpo-45688: :data:`sys.stdlib_module_names` now contains the macOS-specific
  module :mod:`_scproxy`.

- bpo-30570: Fixed a crash in ``issubclass()`` from infinite recursion when
  searching pathological ``__bases__`` tuples.

- bpo-45521: Fix a bug in the obmalloc radix tree code.  On 64-bit machines,
  the bug causes the tree to hold 46-bits of virtual addresses, rather than
  the intended 48-bits.

- bpo-45494: Fix parser crash when reporting errors involving invalid
  continuation characters. Patch by Pablo Galindo.

- bpo-45408: Fix a crash in the parser when reporting tokenizer errors that
  occur at the same time unclosed parentheses are detected. Patch by Pablo
  Galindo.

- bpo-45385: Fix reference leak from descr_check. Patch by Dong-hee Na.

- bpo-45167: Fix deepcopying of :class:`types.GenericAlias` objects.

- bpo-44219: Release the GIL while performing ``isatty`` system calls on
  arbitrary file descriptors. In particular, this affects :func:`os.isatty`,
  :func:`os.device_encoding` and :class:`io.TextIOWrapper`. By extension,
  :func:`io.open` in text mode is also affected. This change solves a
  deadlock in :func:`os.isatty`. Patch by Vincent Michel in :issue:`44219`.

- bpo-44959: Added fallback to extension modules with '.sl' suffix on HP-UX

- bpo-44050: Extensions that indicate they use global state (by setting
  ``m_size`` to -1) can again be used in multiple interpreters. This reverts
  to behavior of Python 3.8.

- bpo-45121: Fix issue where ``Protocol.__init__`` raises ``RecursionError``
  when it's called directly or via ``super()``. Patch provided by Yurii
  Karabas.

- bpo-45083: When the interpreter renders an exception, its name now has a
  complete qualname. Previously only the class name was concatenated to the
  module name, which sometimes resulted in an incorrect full name being
  displayed.

  (This issue impacted only the C code exception rendering, the
  :mod:`traceback` module was using qualname already).

- bpo-45056: Compiler now removes trailing unused constants from co_consts.

Library
-------

- bpo-27946: Fix possible crash when getting an attribute of
  class:`xml.etree.ElementTree.Element` simultaneously with replacing the
  ``attrib`` dict.

- bpo-37658: Fix issue when on certain conditions ``asyncio.wait_for()`` may
  allow a coroutine to complete successfully, but fail to return the result,
  potentially causing memory leaks or other issues.

- bpo-44649: Handle dataclass(slots=True) with a field that has default a
  default value, but for which init=False.

- bpo-45803: Added missing kw_only parameter to
  dataclasses.make_dataclass().

- bpo-45831: :mod:`faulthandler` can now write ASCII-only strings (like
  filenames and function names) with a single write() syscall when dumping a
  traceback. It reduces the risk of getting an unreadable dump when two
  threads or two processes dump a traceback to the same file (like stderr)
  at the same time. Patch by Victor Stinner.

- bpo-41735: Fix thread lock in ``zlib.Decompress.flush()`` method before
  ``PyObject_GetBuffer``.

- bpo-45235: Reverted an argparse bugfix that caused regression in the
  handling of default arguments for subparsers.  This prevented leaf level
  arguments from taking precedence over root level arguments.

- bpo-45765: In importlib.metadata, fix distribution discovery for an empty
  path.

- bpo-45757: Fix bug where :mod:`dis` produced an incorrect oparg when
  :opcode:`EXTENDED_ARG` is followed by an opcode that does not use its
  argument.

- bpo-45644: In-place JSON file formatting using ``python3 -m json.tool
  infile infile`` now works correctly, previously it left the file empty.
  Patch by Chris Wesseling.

- bpo-45679: Fix caching of multi-value :data:`typing.Literal`.
  ``Literal[True, 2]`` is no longer equal to ``Literal[1, 2]``.

- bpo-45664: Fix :func:`types.resolve_bases` and :func:`types.new_class` for
  :class:`types.GenericAlias` instance as a base.

- bpo-45663: Fix :func:`dataclasses.is_dataclass` for dataclasses which are
  subclasses of :class:`types.GenericAlias`.

- bpo-45662: Fix the repr of :data:`dataclasses.InitVar` with a type alias
  to the built-in class, e.g. ``InitVar[list[int]]``.

- bpo-45438: Fix typing.Signature string representation for generic builtin
  types.

- bpo-45574: Fix warning about ``print_escape`` being unused.

- bpo-45581: :meth:`sqlite3.connect` now correctly raises :exc:`MemoryError`
  if the underlying SQLite API signals memory error. Patch by Erlend E.
  Aasland.

- bpo-45557: pprint.pprint() now handles underscore_numbers correctly.
  Previously it was always setting it to False.

- bpo-45515: Add references to :mod:`zoneinfo` in the :mod:`datetime`
  documentation, mostly replacing outdated references to ``dateutil.tz``.
  Change by Paul Ganssle.

- bpo-45475: Reverted optimization of iterating :class:`gzip.GzipFile`,
  :class:`bz2.BZ2File`, and :class:`lzma.LZMAFile` (see bpo-43787) because
  it caused regression when user iterate them without having reference of
  them. Patch by Inada Naoki.

- bpo-45428: Fix a regression in py_compile when reading filenames from
  standard input.

- bpo-45467: Fix incremental decoder and stream reader in the
  "raw-unicode-escape" codec. Previously they failed if the escape sequence
  was split.

- bpo-45461: Fix incremental decoder and stream reader in the
  "unicode-escape" codec. Previously they failed if the escape sequence was
  split.

- bpo-45239: Fixed :func:`email.utils.parsedate_tz` crashing with
  :exc:`UnboundLocalError` on certain invalid input instead of returning
  ``None``. Patch by Ben Hoyt.

- bpo-45249: Fix the behaviour of :func:`traceback.print_exc` when
  displaying the caret when the ``end_offset`` in the exception is set to 0.
  Patch by Pablo Galindo

- bpo-45416: Fix use of :class:`asyncio.Condition` with explicit
  :class:`asyncio.Lock` objects, which was a regression due to removal of
  explicit loop arguments. Patch by Joongi Kim.

- bpo-45419: Correct interfaces on DegenerateFiles.Path.

- bpo-44904: Fix bug in the :mod:`doctest` module that caused it to fail if
  a docstring included an example with a ``classmethod`` ``property``. Patch
  by Alex Waygood.

- bpo-45406: Make :func:`inspect.getmodule` catch ``FileNotFoundError``
  raised by :'func:`inspect.getabsfile`, and return ``None`` to indicate
  that the module could not be determined.

- bpo-45262: Prevent use-after-free in asyncio. Make sure the cached running
  loop holder gets cleared on dealloc to prevent use-after-free in
  get_running_loop

- bpo-45386: Make :mod:`xmlrpc.client` more robust to C runtimes where the
  underlying C ``strftime`` function results in a ``ValueError`` when
  testing for year formatting options.

- bpo-45371: Fix clang rpath issue in :mod:`distutils`. The UnixCCompiler
  now uses correct clang option to add a runtime library directory (rpath)
  to a shared library.

- bpo-20028: Improve error message of :class:`csv.Dialect` when
  initializing. Patch by Vajrasky Kok and Dong-hee Na.

- bpo-45343: Update bundled pip to 21.2.4 and setuptools to 58.1.0

- bpo-45329: Fix freed memory access in :class:`pyexpat.xmlparser` when
  building it with an installed expat library <= 2.2.0.

- bpo-41710: On Unix, if the ``sem_clockwait()`` function is available in
  the C library (glibc 2.30 and newer), the :meth:`threading.Lock.acquire`
  method now uses the monotonic clock (:data:`time.CLOCK_MONOTONIC`) for the
  timeout, rather than using the system clock (:data:`time.CLOCK_REALTIME`),
  to not be affected by system clock changes. Patch by Victor Stinner.

- bpo-45328: Fixed :class:`http.client.HTTPConnection` to work properly in
  OSs that don't support the ``TCP_NODELAY`` socket option.

- bpo-1596321: Fix the :func:`threading._shutdown` function when the
  :mod:`threading` module was imported first from a thread different than
  the main thread: no longer log an error at Python exit.

- bpo-45274: Fix a race condition in the :meth:`Thread.join()
  <threading.Thread.join>` method of the :mod:`threading` module. If the
  function is interrupted by a signal and the signal handler raises an
  exception, make sure that the thread remains in a consistent state to
  prevent a deadlock. Patch by Victor Stinner.

- bpo-45238: Fix :meth:`unittest.IsolatedAsyncioTestCase.debug`: it runs now
  asynchronous methods and callbacks.

- bpo-36674: :meth:`unittest.TestCase.debug` raises now a
  :class:`unittest.SkipTest` if the class or the test method are decorated
  with the skipping decorator.

- bpo-45235: Fix an issue where argparse would not preserve values in a
  provided namespace when using a subparser with defaults.

- bpo-45183: Have zipimport.zipimporter.find_spec() not raise an exception
  when the underlying zip file has been deleted and the internal cache has
  been reset via invalidate_cache().

- bpo-45234: Fixed a regression in :func:`~shutil.copyfile`,
  :func:`~shutil.copy`, :func:`~shutil.copy2` raising
  :exc:`FileNotFoundError` when source is a directory, which should raise
  :exc:`IsADirectoryError`

- bpo-45228: Fix stack buffer overflow in parsing J1939 network address.

- bpo-45192: Fix the ``tempfile._infer_return_type`` function so that the
  ``dir`` argument of the :mod:`tempfile` functions accepts an object
  implementing the ``os.PathLike`` protocol.

  Patch by Kyungmin Lee.

- bpo-42135: Fix typo: ``importlib.find_loader`` is really slated for
  removal in Python 3.12 not 3.10, like the others in PR 25169.

  Patch by Hugo van Kemenade.

- bpo-45160: When tracing a tkinter variable used by a ttk OptionMenu,
  callbacks are no longer made twice.

- bpo-35474: Calling :func:`mimetypes.guess_all_extensions` with
  ``strict=False`` no longer affects the result of the following call with
  ``strict=True``. Also, mutating the returned list no longer affects the
  global state.

- bpo-45166: :func:`typing.get_type_hints` now works with
  :data:`~typing.Final` wrapped in :class:`~typing.ForwardRef`.

- bpo-20499: Improve the speed and accuracy of statistics.pvariance().

- bpo-24444: Fixed an error raised in :mod:`argparse` help display when help
  for an option is set to 1+ blank spaces or when *choices* arg is an empty
  container.

- bpo-45021: Fix a potential deadlock at shutdown of forked children when
  using :mod:`concurrent.futures` module

- bpo-39039: tarfile.open raises :exc:`~tarfile.ReadError` when a zlib error
  occurs during file extraction.

- bpo-44594: Fix an edge case of :class:`ExitStack` and
  :class:`AsyncExitStack` exception chaining.  They will now match ``with``
  block behavior when ``__context__`` is explicitly set to ``None`` when the
  exception is in flight.

- bpo-44295: Ensure deprecation warning from
  :func:`assertDictContainsSubset` points at calling code - by Anthony
  Sottile.

- bpo-43498: Avoid a possible *"RuntimeError: dictionary changed size during
  iteration"* when adjusting the process count of
  :class:`ProcessPoolExecutor`.

Documentation
-------------

- bpo-45640: Properly marked-up grammar tokens in the documentation are now
  clickable and take you to the definition of a given piece of grammar.
  Patch by Arthur Milchior.

- bpo-45788: Link doc for sys.prefix to sysconfig doc on installation paths.

- bpo-45772: ``socket.socket`` documentation is corrected to a class from a
  function.

- bpo-45392: Update the docstring of the :class:`type` built-in to remove a
  redundant line and to mention keyword arguments for the constructor.

- bpo-45726: Improve documentation for :func:`functools.singledispatch` and
  :class:`functools.singledispatchmethod`.

- bpo-45680: Amend the docs on ``GenericAlias`` objects to clarify that
  non-container classes can also implement ``__class_getitem__``. Patch
  contributed by Alex Waygood.

- bpo-45655: Add a new "relevant PEPs" section to the top of the
  documentation for the ``typing`` module. Patch by Alex Waygood.

- bpo-45604: Add ``level`` argument to ``multiprocessing.log_to_stderr``
  function docs.

- bpo-45250: Update the documentation to note that CPython does not
  consistently require iterators to define ``__iter__``.

- bpo-45464: Mention in the documentation of :ref:`Built-in Exceptions
  <bltin-exceptions>` that inheriting from multiple exception types in a
  single subclass is not recommended due to possible memory layout
  incompatibility.

- bpo-45449: Add note about :pep:`585` in :mod:`collections.abc`.

- bpo-45516: Add protocol description to the
  :class:`importlib.abc.Traversable` documentation.

- bpo-20692: Add Programming FAQ entry explaining that int literal attribute
  access requires either a space after or parentheses around the literal.

- bpo-45216: Remove extra documentation listing methods in ``difflib``. It
  was rendering twice in pydoc and was outdated in some places.

- bpo-45024: :mod:`collections.abc` documentation has been expanded to
  explicitly cover how instance and subclass checks work, with additional
  doctest examples and an exhaustive list of ABCs which test membership
  purely by presence of the right :term:`special method`\s. Patch by Raymond
  Hettinger.

- bpo-25381: In the extending chapter of the extending doc, update a
  paragraph about the global variables containing exception information.

- bpo-43905: Expanded :func:`~dataclasses.astuple` and
  :func:`~dataclasses.asdict` docs, warning about deepcopy being applied and
  providing a workaround.

Tests
-----

- bpo-19460: Add new Test for
  :class:`email.mime.nonmultipart.MIMENonMultipart`.

- bpo-45835: Fix race condition in test_queue tests with multiple "feeder"
  threads.

- bpo-45678: Add tests for scenarios in which
  :class:`functools.singledispatchmethod` is stacked on top of a method that
  has already been wrapped by two other decorators. Patch by Alex Waygood.

- bpo-45578: Add tests for :func:`dis.distb`

- bpo-45678: Add tests to ensure that ``functools.singledispatchmethod``
  correctly wraps the attributes of the target function.

- bpo-45577: Add subtests for all ``pickle`` protocols in ``test_zoneinfo``.

- bpo-45566: Fix ``test_frozen_pickle`` in ``test_dataclasses`` to check all
  ``pickle`` versions.

- bpo-43592: :mod:`test.libregrtest` now raises the soft resource limit for
  the maximum number of file descriptors when the default is too low for our
  test suite as was often the case on macOS.

- bpo-39679: Add more test cases for `@functools.singledispatchmethod` when
  combined with `@classmethod` or `@staticmethod`.

- bpo-45400: Fix
  test_name_error_suggestions_do_not_trigger_for_too_many_locals() of
  test_exceptions if a directory name contains "a1" (like
  "Python-3.11.0a1"): use a stricter regular expression. Patch by Victor
  Stinner.

- bpo-40173: Fix :func:`test.support.import_helper.import_fresh_module`.

- bpo-45280: Add a test case for empty :class:`typing.NamedTuple`.

- bpo-45269: Cover case when invalid ``markers`` type is supplied to
  ``c_make_encoder``.

- bpo-45128: Fix ``test_multiprocessing_fork`` failure due to
  ``test_logging`` and ``sys.modules`` manipulation.

- bpo-45209: Fix ``UserWarning: resource_tracker`` warning in
  ``_test_multiprocessing._TestSharedMemory.test_shared_memory_cleaned_after_process_termination``

- bpo-45195: Fix test_readline.test_nonascii(): sometimes, the newline
  character is not written at the end, so don't expect it in the output.
  Patch by Victor Stinner.

- bpo-45156: Fixes infinite loop on :func:`unittest.mock.seal` of mocks
  created by :func:`~unittest.create_autospec`.

- bpo-45125: Improves pickling tests and docs of ``SharedMemory`` and
  ``SharableList`` objects.

- bpo-44860: Update ``test_sysconfig.test_user_similar()`` for the
  posix_user scheme: ``platlib`` doesn't use :data:`sys.platlibdir`. Patch
  by Victor Stinner.

- bpo-25130: Add calls of :func:`gc.collect` in tests to support PyPy.

Build
-----

- bpo-44035: CI now verifies that autoconf files have been regenerated with
  a current and unpatched autoconf package.

- bpo-33393: Update ``config.guess`` to 2021-06-03 and ``config.sub`` to
  2021-08-14. ``Makefile`` now has an ``update-config`` target to make
  updating more convenient.

- bpo-45866: ``make regen-all`` now produces the same output when run from a
  directory other than the source tree: when building Python out of the
  source tree. pegen now strips directory of the "generated by pygen from
  <FILENAME>" header Patch by Victor Stinner.

- bpo-41498: Python now compiles on platforms without ``sigset_t``. Several
  functions in :mod:`signal` are not available when ``sigset_t`` is missing.

  Based on patch by Roman Yurchak for pyodide.

- bpo-45881: ``setup.py`` now uses ``CC`` from environment first to discover
  multiarch and cross compile paths.

- bpo-43158: ``setup.py`` now uses values from configure script to build the
  ``_uuid`` extension module. Configure now detects util-linux's
  ``libuuid``, too.

- bpo-45571: ``Modules/Setup`` now use ``PY_CFLAGS_NODIST`` instead of
  ``PY_CFLAGS`` to compile shared modules.

- bpo-45561: Run smelly.py tool from $(srcdir).

- bpo-45532: Update :data:`sys.version` to use ``main`` as fallback
  information. Patch by Jeong YunWon.

- bpo-45536: The ``configure`` script now checks whether OpenSSL headers and
  libraries provide required APIs. Most common APIs are verified. The check
  detects outdated or missing OpenSSL. Failures do not stop configure.

- bpo-45221: Fixed regression in handling of ``LDFLAGS`` and ``CPPFLAGS``
  options where :meth:`argparse.parse_known_args` could interpret an option
  as one of the built-in command line argument, for example ``-h`` for help.

- bpo-45405: Prevent ``internal configure error`` when running ``configure``
  with recent versions of non-Apple clang.  Patch by David Bohman.

- bpo-45220: Avoid building with the Windows 11 SDK previews automatically.
  This may be overridden by setting the ``DefaultWindowsSDKVersion``
  environment variable before building.

- bpo-45067: The ncurses function extended_color_content was introduced in
  2017

  (https://invisible-island.net/ncurses/NEWS.html#index-t20170401).  The

  ncurses-devel package in CentOS 7 had a older version ncurses resulted in
  compilation error.  For compiling ncurses with extended color support, we
  verify the version of the ncurses library >= 20170401.

Windows
-------

- bpo-45901: When installed through the Microsoft Store and set as the
  default app for :file:`*.py` files, command line arguments will now be
  passed to Python when invoking a script without explicitly launching
  Python (that is, ``script.py args`` rather than ``python script.py
  args``).

- bpo-45616: Fix Python Launcher's ability to distinguish between versions
  3.1 and 3.10 when either one is explicitly requested.  Previously, 3.1
  would be used if 3.10 was requested but not installed, and 3.10 would be
  used if 3.1 was requested but 3.10 was installed.

- bpo-45732: Updates bundled Tcl/Tk to 8.6.12.

- bpo-45720: Internal reference to :file:`shlwapi.dll` was dropped to help
  improve startup time. This DLL will no longer be loaded at the start of
  every Python process.

- bpo-43652: Update Tcl/Tk to 8.6.11, actually this time. The previous
  update incorrectly included 8.6.10.

- bpo-45337: venv now warns when the created environment may need to be
  accessed at a different path, due to redirections, links or junctions. It
  also now correctly installs or upgrades components when the alternate path
  is required.

macOS
-----

- bpo-45732: Update python.org macOS installer to use Tcl/Tk 8.6.12.

- bpo-44828: Avoid tkinter file dialog failure on macOS 12 Monterey when
  using the Tk 8.6.11 provided by python.org macOS installers. Patch by Marc
  Culler of the Tk project.

- bpo-34602: When building CPython on macOS with ``./configure
  --with-undefined-behavior-sanitizer --with-pydebug``, the stack size is
  now quadrupled to allow for the entire test suite to pass.

IDLE
----

- bpo-45495: Add context keywords 'case' and 'match' to completions list.

- bpo-45296: On Windows, change exit/quit message to suggest Ctrl-D, which
  works, instead of <Ctrl-Z Return>, which does not work in IDLE.

- bpo-45193: Make completion boxes appear on Ubuntu again.

Tools/Demos
-----------

- bpo-44786: Fix a warning in regular expression in the c-analyzer script.

C API
-----

- bpo-39026: Fix Python.h to build C extensions with Xcode: remove a
  relative include from ``Include/cpython/pystate.h``.

- bpo-45307: Restore the private C API function
  :func:`_PyImport_FindExtensionObject`. It will be removed in Python 3.11.

- bpo-44687: :meth:`BufferedReader.peek` no longer raises :exc:`ValueError`
  when the entire file has already been buffered.

- bpo-44751: Remove ``crypt.h`` include from the public ``Python.h`` header.


What's New in Python 3.10.0 final?
==================================

*Release date: 2021-10-04*

Core and Builtins
-----------------

- bpo-45121: Fix issue where ``Protocol.__init__`` raises ``RecursionError``
  when it's called directly or via ``super()``. Patch provided by Yurii
  Karabas.

Library
-------

- bpo-45234: Fixed a regression in :func:`~shutil.copyfile`,
  :func:`~shutil.copy`, :func:`~shutil.copy2` raising
  :exc:`FileNotFoundError` when source is a directory, which should raise
  :exc:`IsADirectoryError`

Documentation
-------------

- bpo-45216: Remove extra documentation listing methods in ``difflib``. It
  was rendering twice in pydoc and was outdated in some places.

- bpo-45024: :mod:`collections.abc` documentation has been expanded to
  explicitly cover how instance and subclass checks work, with additional
  doctest examples and an exhaustive list of ABCs which test membership
  purely by presence of the right :term:`special method`\s. Patch by Raymond
  Hettinger.

Tests
-----

- bpo-45128: Fix ``test_multiprocessing_fork`` failure due to
  ``test_logging`` and ``sys.modules`` manipulation.

- bpo-44860: Update ``test_sysconfig.test_user_similar()`` for the
  posix_user scheme: ``platlib`` doesn't use :data:`sys.platlibdir`. Patch
  by Victor Stinner.

Build
-----

- bpo-45067: The ncurses function extended_color_content was introduced in
  2017

  (https://invisible-island.net/ncurses/NEWS.html#index-t20170401).  The

  ncurses-devel package in CentOS 7 had a older version ncurses resulted in
  compilation error.  For compiling ncurses with extended color support, we
  verify the version of the ncurses library >= 20170401.

IDLE
----

- bpo-45193: Make completion boxes appear on Ubuntu again.

C API
-----

- bpo-45307: Restore the private C API function
  :func:`_PyImport_FindExtensionObject`. It will be removed in Python 3.11.


What's New in Python 3.10.0 release candidate 2?
================================================

*Release date: 2021-09-07*

Security
--------

- bpo-42278: Replaced usage of :func:`tempfile.mktemp` with
  :class:`~tempfile.TemporaryDirectory` to avoid a potential race condition.

- bpo-44394: Update the vendored copy of libexpat to 2.4.1 (from 2.2.8) to
  get the fix for the CVE-2013-0340 "Billion Laughs" vulnerability. This
  copy is most used on Windows and macOS.

- bpo-43124: Made the internal ``putcmd`` function in :mod:`smtplib`
  sanitize input for presence of ``\r`` and ``\n`` characters to avoid
  (unlikely) command injection.

Core and Builtins
-----------------

- bpo-45123: Fix PyAiter_Check to only check for the __anext__ presence (not
  for __aiter__). Rename PyAiter_Check to PyAIter_Check, PyObject_GetAiter
  -> PyObject_GetAIter.

- bpo-45018: Fixed pickling of range iterators that iterated for over 2**32
  times.

- bpo-45000: A :exc:`SyntaxError` is now raised when trying to delete
  :const:`__debug__`. Patch by Dong-hee Na.

- bpo-44963: Implement ``send()`` and ``throw()`` methods for
  ``anext_awaitable`` objects. Patch by Pablo Galindo.

- bpo-44962: Fix a race in WeakKeyDictionary, WeakValueDictionary and
  WeakSet when two threads attempt to commit the last pending removal. This
  fixes asyncio.create_task and fixes a data loss in asyncio.run where
  shutdown_asyncgens is not run

- bpo-44954: Fixed a corner case bug where the result of
  ``float.fromhex('0x.8p-1074')`` was rounded the wrong way.

- bpo-44947: Refine the syntax error for trailing commas in import
  statements. Patch by Pablo Galindo.

- bpo-44698: Restore behaviour of complex exponentiation with integer-valued
  exponent of type :class:`float` or :class:`complex`.

- bpo-44885: Correct the ast locations of f-strings with format specs and
  repeated expressions. Patch by Pablo Galindo

- bpo-44872: Use new trashcan macros (Py_TRASHCAN_BEGIN/END) in
  frameobject.c instead of the old ones (Py_TRASHCAN_SAFE_BEGIN/END).

- bpo-33930: Fix segmentation fault with deep recursion when cleaning method
  objects. Patch by Augusto Goulart and Pablo Galindo.

- bpo-25782: Fix bug where ``PyErr_SetObject`` hangs when the current
  exception has a cycle in its context chain.

- bpo-44856: Fix reference leaks in the error paths of ``update_bases()``
  and ``__build_class__``. Patch by Pablo Galindo.

- bpo-44838: Fixed a bug that was causing the parser to raise an incorrect
  custom :exc:`SyntaxError` for invalid 'if' expressions. Patch by Pablo
  Galindo.

- bpo-44584: The threading debug (:envvar:`PYTHONTHREADDEBUG` environment
  variable) is deprecated in Python 3.10 and will be removed in Python 3.12.
  This feature requires a debug build of Python. Patch by Victor Stinner.

- bpo-39091: Fix crash when using passing a non-exception to a generator's
  ``throw()`` method. Patch by Noah Oxer

Library
-------

- bpo-45081: Fix issue when dataclasses that inherit from
  ``typing.Protocol`` subclasses have wrong ``__init__``. Patch provided by
  Yurii Karabas.

- bpo-41620: :meth:`~unittest.TestCase.run` now always return a
  :class:`~unittest.TestResult` instance. Previously it returned ``None`` if
  the test class or method was decorated with a skipping decorator.

- bpo-43913: Fix bugs in cleaning up classes and modules in :mod:`unittest`:

  * Functions registered with :func:`~unittest.addModuleCleanup` were not called unless the user defines ``tearDownModule()`` in their test module.
  * Functions registered with :meth:`~unittest.TestCase.addClassCleanup` were not called if ``tearDownClass`` is set to ``None``.
  * Buffering in :class:`~unittest.TestResult` did not work with functions registered with ``addClassCleanup()`` and ``addModuleCleanup()``.
  * Errors in functions registered with ``addClassCleanup()`` and ``addModuleCleanup()`` were not handled correctly in buffered and debug modes.
  * Errors in ``setUpModule()`` and functions registered with ``addModuleCleanup()`` were reported in wrong order.
  * And several lesser bugs.

- bpo-45030: Fix integer overflow in pickling and copying the range
  iterator.

- bpo-45001: Made email date parsing more robust against malformed input,
  namely a whitespace-only ``Date:`` header. Patch by Wouter Bolsterlee.

- bpo-44449: Fix a crash in the signal handler of the :mod:`faulthandler`
  module: no longer modify the reference count of frame objects. Patch by
  Victor Stinner.

- bpo-44955: Method :meth:`~unittest.TestResult.stopTestRun` is now always
  called in pair with method :meth:`~unittest.TestResult.startTestRun` for
  :class:`~unittest.TestResult` objects implicitly created in
  :meth:`~unittest.TestCase.run`. Previously it was not called for test
  methods and classes decorated with a skipping decorator.

- bpo-44935: :mod:`subprocess` on Solaris now also uses
  :func:`os.posix_spawn()` for better performance.

- bpo-44911: :class:`~unittest.IsolatedAsyncioTestCase` will no longer throw
  an exception while cancelling leaked tasks. Patch by Bar Harel.

- bpo-44524: Make exception message more useful when subclass from typing
  special form alias. Patch provided by Yurii Karabas.

- bpo-38956: :class:`argparse.BooleanOptionalAction`'s default value is no
  longer printed twice when used with
  :class:`argparse.ArgumentDefaultsHelpFormatter`.

- bpo-44860: Fix the ``posix_user`` scheme in :mod:`sysconfig` to not depend
  on :data:`sys.platlibdir`.

- bpo-44581: Upgrade bundled pip to 21.2.3 and setuptools to 57.4.0

- bpo-44849: Fix the :func:`os.set_inheritable` function on FreeBSD 14 for
  file descriptor opened with the :data:`~os.O_PATH` flag: ignore the
  :data:`~errno.EBADF` error on ``ioctl()``, fallback on the ``fcntl()``
  implementation. Patch by Victor Stinner.

- bpo-44605: The @functools.total_ordering() decorator now works with
  metaclasses.

- bpo-44524: Fixed an issue wherein the ``__name__`` and ``__qualname__``
  attributes of subscribed specialforms could be ``None``.

- bpo-44822: :mod:`sqlite3` user-defined functions and aggregators returning
  :class:`strings <str>` with embedded NUL characters are no longer
  truncated. Patch by Erlend E. Aasland.

- bpo-44801: Ensure that the :class:`~typing.ParamSpec` variable in Callable
  can only be substituted with a parameters expression (a list of types, an
  ellipsis, ParamSpec or Concatenate).

- bpo-27334: The :mod:`sqlite3` context manager now performs a rollback
  (thus releasing the database lock) if commit failed.  Patch by Luca Citi
  and Erlend E. Aasland.

- bpo-41402: Fix :meth:`email.message.EmailMessage.set_content` when called
  with binary data and ``7bit`` content transfer encoding.

- bpo-32695: The *compresslevel* and *preset* keyword arguments of
  :func:`tarfile.open` are now both documented and tested.

- bpo-34990: Fixed a Y2k38 bug in the compileall module where it would fail
  to compile files with a modification time after the year 2038.

- bpo-38840: Fix ``test___all__`` on platforms lacking a shared memory
  implementation.

- bpo-26228: pty.spawn no longer hangs on FreeBSD, macOS, and Solaris.

- bpo-33349: lib2to3 now recognizes async generators everywhere.

Documentation
-------------

- bpo-44957: Promote PEP 604 union syntax by using it where possible. Also,
  mention ``X | Y`` more prominently in section about ``Union`` and mention
  ``X | None`` at all in section about ``Optional``.

- bpo-44903: Removed the othergui.rst file, any references to it, and the
  list of GUI frameworks in the FAQ. In their place I've added links to the
  Python Wiki `page on GUI frameworks
  <https://wiki.python.org/moin/GuiProgramming>`.

- bpo-33479: Tkinter documentation has been greatly expanded with new
  "Architecture" and "Threading model" sections.

- bpo-36700: :mod:`base64` RFC references were updated to point to
  :rfc:`4648`; a section was added to point users to the new "security
  considerations" section of the RFC.

- bpo-44756: Reverted automated virtual environment creation on ``make
  html`` when building documentation. It turned out to be disruptive for
  downstream distributors.

- bpo-42958: Updated the docstring and docs of :func:`filecmp.cmp` to be
  more accurate and less confusing especially in respect to *shallow* arg.

- bpo-43066: Added a warning to :mod:`zipfile` docs: filename arg with a
  leading slash may cause archive to be un-openable on Windows systems.

- bpo-39452: Rewrote ``Doc/library/__main__.rst``. Broadened scope of the
  document to explicitly discuss and differentiate between ``__main__.py``
  in packages versus the ``__name__ == '__main__'`` expression (and the
  idioms that surround it).

- bpo-27752: Documentation of csv.Dialect is more descriptive.

- bpo-41576: document BaseException in favor of bare except

- bpo-39498: Add a "Security Considerations" index which links to standard
  library modules that have explicitly documented security considerations.

- bpo-33479: Remove the unqualified claim that tkinter is threadsafe. It has
  not been true for several years and likely never was. An explanation of
  what is true may be added later, after more discussion, and possibly after
  patching _tkinter.c,

Tests
-----

- bpo-45052: ``WithProcessesTestSharedMemory.test_shared_memory_basics``
  test was ignored, because ``self.assertEqual(sms.size, sms2.size)`` line
  was failing. It is now removed and test is unskipped.

  The main motivation for this line to be removed from the test is that the
  ``size`` of ``SharedMemory`` is not ever guaranteed to be the same. It is
  decided by the platform.

- bpo-45042: Fixes that test classes decorated with
  ``@hashlib_helper.requires_hashdigest`` were skipped all the time.

- bpo-45011: Made tests relying on the :mod:`_asyncio` C extension module
  optional to allow running on alternative Python implementations. Patch by
  Serhiy Storchaka.

- bpo-44949: Fix auto history tests of test_readline: sometimes, the newline
  character is not written at the end, so don't expect it in the output.

- bpo-44891: Tests were added to clarify :func:`id` is preserved when ``obj
  * 1`` is used on :class:`str` and :class:`bytes` objects. Patch by Nikita
  Sobolev.

- bpo-44852: Add ability to wholesale silence DeprecationWarnings while
  running the regression test suite.

- bpo-40928: Notify users running test_decimal regression tests on macOS of
  potential harmless "malloc can't allocate region" messages spewed by
  test_decimal.

Windows
-------

- bpo-45007: Update to OpenSSL 1.1.1l in Windows build

macOS
-----

- bpo-45007: Update macOS installer builds to use OpenSSL 1.1.1l.

- bpo-44689: :meth:`ctypes.util.find_library` now works correctly on macOS
  11 Big Sur even if Python is built on an older version of macOS.
  Previously, when built on older macOS systems, ``find_library`` was not
  able to find  macOS system libraries when running on Big Sur due to
  changes in  how system libraries are stored.


What's New in Python 3.10.0 release candidate 1?
================================================

*Release date: 2021-08-02*

Security
--------

- bpo-44600: Fix incorrect line numbers while tracing some failed patterns
  in :ref:`match <match>` statements. Patch by Charles Burkland.

Core and Builtins
-----------------

- bpo-44792: Improve syntax errors for if expressions. Patch by Miguel Brito

- bpo-34013: Generalize the invalid legacy statement custom error message
  (like the one generated when "print" is called without parentheses) to
  include more generic expressions. Patch by Pablo Galindo

- bpo-44732: Rename ``types.Union`` to ``types.UnionType``.

- bpo-44698: Fix undefined behaviour in complex object exponentiation.

- bpo-44653: Support :mod:`typing` types in parameter substitution in the
  union type.

- bpo-44676: Add ability to serialise ``types.Union`` objects. Patch
  provided by Yurii Karabas.

- bpo-44633: Parameter substitution of the union type with wrong types now
  raises ``TypeError`` instead of returning ``NotImplemented``.

- bpo-44662: Add ``__module__`` to ``types.Union``. This also fixes
  ``types.Union`` issues with ``typing.Annotated``. Patch provided by Yurii
  Karabas.

- bpo-44655: Include the name of the type in unset __slots__ attribute
  errors. Patch by Pablo Galindo

- bpo-44655: Don't include a missing attribute with the same name as the
  failing one when offering suggestions for missing attributes. Patch by
  Pablo Galindo

- bpo-44646: Fix the hash of the union type: it no longer depends on the
  order of arguments.

- bpo-44636: Collapse union of equal types. E.g. the result of ``int | int``
  is now ``int``. Fix comparison of the union type with non-hashable
  objects. E.g. ``int | str == {}`` no longer raises a TypeError.

- bpo-44635: Convert ``None`` to ``type(None)`` in the union type
  constructor.

- bpo-44589: Mapping patterns in ``match`` statements with two or more equal
  literal keys will now raise a :exc:`SyntaxError` at compile-time.

- bpo-44606: Fix ``__instancecheck__`` and ``__subclasscheck__`` for the
  union type.

- bpo-42073: The ``@classmethod`` decorator can now wrap other
  classmethod-like descriptors.

- bpo-44490: :mod:`typing` now searches for type parameters in
  ``types.Union`` objects. ``get_type_hints`` will also properly resolve
  annotations with nested ``types.Union`` objects. Patch provided by Yurii
  Karabas.

- bpo-44490: Add ``__parameters__`` attribute and ``__getitem__`` operator
  to ``types.Union``. Patch provided by Yurii Karabas.

- bpo-44472: Fix ltrace functionality when exceptions are raised. Patch by
  Pablo Galindo

Library
-------

- bpo-44806: Non-protocol subclasses of :class:`typing.Protocol` ignore now
  the ``__init__`` method inherited from protocol base classes.

- bpo-44793: Fix checking the number of arguments when subscribe a generic
  type with ``ParamSpec`` parameter.

- bpo-44784: In importlib.metadata tests, override warnings behavior under
  expected DeprecationWarnings (importlib_metadata 4.6.3).

- bpo-44667: The :func:`tokenize.tokenize` doesn't incorrectly generate a
  ``NEWLINE`` token if the source doesn't end with a new line character but
  the last line is a comment, as the function is already generating a ``NL``
  token. Patch by Pablo Galindo

- bpo-44752: :mod:`rcompleter` does not call :func:`getattr` on
  :class:`property` objects to avoid the side-effect of  evaluating the
  corresponding method.

- bpo-44720: ``weakref.proxy`` objects referencing non-iterators now raise
  ``TypeError`` rather than dereferencing the null ``tp_iternext`` slot and
  crashing.

- bpo-44704: The implementation of ``collections.abc.Set._hash()`` now
  matches that of ``frozenset.__hash__()``.

- bpo-44666: Fixed issue in :func:`compileall.compile_file` when
  ``sys.stdout`` is redirected. Patch by Stefan Hölzl.

- bpo-42854: Fixed a bug in the :mod:`_ssl` module that was throwing
  :exc:`OverflowError` when using :meth:`_ssl._SSLSocket.write` and
  :meth:`_ssl._SSLSocket.read` for a big value of the ``len`` parameter.
  Patch by Pablo Galindo

- bpo-44353: Refactor ``typing.NewType`` from function into callable class.
  Patch provided by Yurii Karabas.

- bpo-44524: Add missing ``__name__`` and ``__qualname__`` attributes to
  ``typing`` module classes. Patch provided by Yurii Karabas.

- bpo-40897: Give priority to using the current class constructor in
  :func:`inspect.signature`. Patch by Weipeng Hong.

- bpo-44648: Fixed wrong error being thrown by :func:`inspect.getsource`
  when examining a class in the interactive session. Instead of
  :exc:`TypeError`, it should be :exc:`OSError` with appropriate error
  message.

- bpo-44608: Fix memory leak in :func:`_tkinter._flatten` if it is called
  with a sequence or set, but not list or tuple.

- bpo-44559: [Enum] module reverted to 3.9; 3.10 changes pushed until 3.11

- bpo-41928: Update :func:`shutil.copyfile` to raise
  :exc:`FileNotFoundError` instead of confusing :exc:`IsADirectoryError`
  when a path ending with a :const:`os.path.sep` does not exist;
  :func:`shutil.copy` and :func:`shutil.copy2` are also affected.

- bpo-44566: handle StopIteration subclass raised from
  @contextlib.contextmanager generator

- bpo-41249: Fixes ``TypedDict`` to work with ``typing.get_type_hints()``
  and postponed evaluation of annotations across modules.

- bpo-44461: Fix bug with :mod:`pdb`'s handling of import error due to a
  package which does not have a ``__main__`` module

- bpo-43625: Fix a bug in the detection of CSV file headers by
  :meth:`csv.Sniffer.has_header` and improve documentation of same.

- bpo-42892: Fixed an exception thrown while parsing a malformed multipart
  email by :class:`email.message.EmailMessage`.

- bpo-27827: :meth:`pathlib.PureWindowsPath.is_reserved` now identifies a
  greater range of reserved filenames, including those with trailing spaces
  or colons.

- bpo-38741: :mod:`configparser`: using ']' inside a section header will no
  longer cut the section name short at the ']'

- bpo-27513: :func:`email.utils.getaddresses` now accepts
  :class:`email.header.Header` objects along with string values. Patch by
  Zackery Spytz.

- bpo-29298: Fix ``TypeError`` when required subparsers without ``dest`` do
  not receive arguments. Patch by Anthony Sottile.

Documentation
-------------

- bpo-44740: Replaced occurences of uppercase "Web" and "Internet" with
  lowercase versions per the 2016 revised Associated Press Style Book.

- bpo-44693: Update the definition of __future__ in the glossary by
  replacing the confusing word "pseudo-module" with a more accurate
  description.

- bpo-35183: Add typical examples to os.path.splitext docs

- bpo-30511: Clarify that :func:`shutil.make_archive` is not thread-safe due
  to reliance on changing the current working directory.

- bpo-44561: Update of three expired hyperlinks in
  Doc/distributing/index.rst: "Project structure", "Building and packaging
  the project", and "Uploading the project to the Python Packaging Index".

- bpo-44613: importlib.metadata is no longer provisional.

- bpo-44544: List all kwargs for :func:`textwrap.wrap`,
  :func:`textwrap.fill`, and :func:`textwrap.shorten`. Now, there are nav
  links to attributes of :class:`TextWrap`, which makes navigation much
  easier while minimizing duplication in the documentation.

- bpo-44453: Fix documentation for the return type of
  :func:`sysconfig.get_path`.

Tests
-----

- bpo-44734: Fixed floating point precision issue in turtle tests.

- bpo-44708: Regression tests, when run with -w, are now re-running only the
  affected test methods instead of re-running the entire test file.

- bpo-44647: Added a permanent Unicode-valued environment variable to
  regression tests to ensure they handle this use case in the future. If
  your test environment breaks because of that, report a bug to us, and
  temporarily set PYTHONREGRTEST_UNICODE_GUARD=0 in your test environment.

- bpo-44515: Adjust recently added contextlib tests to avoid assuming the
  use of a refcounted GC

Windows
-------

- bpo-44572: Avoid consuming standard input in the :mod:`platform` module

- bpo-40263: This is a follow-on bug from
  https://bugs.python.org/issue26903. Once that is applied we run into an
  off-by-one assertion problem. The assert was not correct.

macOS
-----

- bpo-41972: The framework build's user header path in sysconfig is changed
  to add a 'pythonX.Y' component to match distutils's behavior.

- bpo-34932: Add socket.TCP_KEEPALIVE support for macOS. Patch by Shane
  Harvey.

Tools/Demos
-----------

- bpo-44756: In the Makefile for documentation (:file:`Doc/Makefile`), the
  ``build`` rule is dependent on the ``venv`` rule. Therefore, ``html``,
  ``latex``, and other build-dependent rules are also now dependent on
  ``venv``. The ``venv`` rule only performs an action if ``$(VENVDIR)`` does
  not exist. :file:`Doc/README.rst` was updated; most users now only need to
  type ``make html``.

C API
-----

- bpo-41103: Reverts removal of the old buffer protocol because they are
  part of stable ABI.

- bpo-42747: The ``Py_TPFLAGS_HAVE_VERSION_TAG`` type flag now does nothing.
  The ``Py_TPFLAGS_HAVE_AM_SEND`` flag (which was added in 3.10) is removed.
  Both were unnecessary because it is not possible to have type objects with
  the relevant fields missing.


What's New in Python 3.10.0 beta 4?
===================================

*Release date: 2021-07-10*

Security
--------

- bpo-41180: Add auditing events to the :mod:`marshal` module, and stop
  raising ``code.__init__`` events for every unmarshalled code object.
  Directly instantiated code objects will continue to raise an event, and
  audit event handlers should inspect or collect the raw marshal data. This
  reduces a significant performance overhead when loading from ``.pyc``
  files.

Core and Builtins
-----------------

- bpo-44562: Remove uses of :c:func:`PyObject_GC_Del` in error path when
  initializing :class:`types.GenericAlias`.

- bpo-41486: Fix a memory consumption and copying performance regression in
  earlier 3.10 beta releases if someone used an output buffer larger than
  4GiB with zlib.decompress on input data that expands that large.

- bpo-44553: Implement GC methods for ``types.Union`` to break reference
  cycles and prevent memory leaks.

- bpo-44523: Remove the pass-through for :func:`hash` of
  :class:`weakref.proxy` objects to prevent unintended consequences when the
  original referred object dies while the proxy is part of a hashable
  object. Patch by Pablo Galindo.

- bpo-44483: Fix a crash in ``types.Union`` objects when creating a union of
  an object with bad ``__module__`` field.

- bpo-44297: Make sure that the line number is set when entering a
  comprehension scope. Ensures that backtraces inclusing generator
  expressions show the correct line number.

- bpo-44456: Improve the syntax error when mixing positional and keyword
  patterns. Patch by Pablo Galindo.

- bpo-44368: Improve syntax errors for invalid "as" targets. Patch by Pablo
  Galindo

- bpo-44317: Improve tokenizer error with improved locations. Patch by Pablo
  Galindo.

- bpo-43667: Improve Unicode support in non-UTF locales on Oracle Solaris.
  This issue does not affect other Solaris systems.

Library
-------

- bpo-44558: Make the implementation consistency of
  :func:`~operator.indexOf` between C and Python versions. Patch by Dong-hee
  Na.

- bpo-34798: Break up paragraph about :class:`pprint.PrettyPrinter`
  construction parameters to make it easier to read.

- bpo-44516: Update vendored pip to 21.1.3

- bpo-44468: :func:`typing.get_type_hints` now finds annotations in classes
  and base classes with unexpected ``__module__``. Previously, it skipped
  those MRO elements.

- bpo-43977: Set the proper :const:`Py_TPFLAGS_MAPPING` and
  :const:`Py_TPFLAGS_SEQUENCE` flags for subclasses created before a parent
  has been registered as a :class:`collections.abc.Mapping` or
  :class:`collections.abc.Sequence`.

- bpo-44482: Fix very unlikely resource leak in :mod:`glob` in alternate
  Python implementations.

- bpo-44466: The :mod:`faulthandler` module now detects if a fatal error
  occurs during a garbage collector collection. Patch by Victor Stinner.

- bpo-44404: :mod:`tkinter`'s ``after()`` method now supports callables
  without the ``__name__`` attribute.

- bpo-44458: ``BUFFER_BLOCK_SIZE`` is now declared static, to avoid linking
  collisions when bz2, lmza or zlib are statically linked.

- bpo-44464: Remove exception for flake8 in deprecated importlib.metadata
  interfaces. Sync with importlib_metadata 4.6.

- bpo-44446: Take into account that ``lineno`` might be ``None`` in
  :class:`traceback.FrameSummary`.

- bpo-44439: Fix in :meth:`bz2.BZ2File.write` / :meth:`lzma.LZMAFile.write`
  methods, when the input data is an object that supports the buffer
  protocol, the file length may be wrong.

- bpo-44434: _thread.start_new_thread() no longer calls
  PyThread_exit_thread() explicitly at the thread exit, the call was
  redundant. On Linux with the glibc, pthread_exit() aborts the whole
  process if dlopen() fails to open libgcc_s.so file (ex: EMFILE error).
  Patch by Victor Stinner.

- bpo-44395: Fix :meth:`~email.message.MIMEPart.as_string` to pass unixfrom
  properly. Patch by Dong-hee Na.

- bpo-34266: Handle exceptions from parsing the arg of :mod:`pdb`'s
  run/restart command.

- bpo-44077: It's now possible to receive the type of service (ToS), a.k.a.
  differentiated services (DS), a.k.a. differenciated services code point
  (DSCP) and excplicit congestion notification (ECN) IP header fields with
  ``socket.IP_RECVTOS``.

- bpo-43024: Improve the help signature of
  :func:`traceback.print_exception`, :func:`traceback.format_exception` and
  :func:`traceback.format_exception_only`.

- bpo-30256: Pass multiprocessing BaseProxy argument ``manager_owned``
  through AutoProxy.

Documentation
-------------

- bpo-44558: Match the docstring and python implementation of
  :func:`~operator.countOf` to the behavior of its c implementation.

- bpo-38062: Clarify that atexit uses equality comparisons internally.

- bpo-40620: Convert examples in tutorial controlflow.rst section 4.3 to be
  interpreter-demo style.

- bpo-13814: In the Design FAQ, answer "Why don't generators support the
  with statement?"

- bpo-41621: Document that :class:`collections.defaultdict` parameter
  ``default_factory`` defaults to None and is positional-only.

Tests
-----

- bpo-44287: Fix asyncio test_popen() of test_windows_utils by using a
  longer timeout. Use military grade battle-tested
  :data:`test.support.SHORT_TIMEOUT` timeout rather than a hardcoded timeout
  of 10 seconds: it's 30 seconds by default, but it is made longer on slow
  buildbots. Patch by Victor Stinner.

- bpo-44451: Reset ``DeprecationWarning`` filters in
  ``test.test_importlib.test_metadata_api.APITests.test_entry_points_by_index``
  to avoid ``StopIteration`` error if ``DeprecationWarnings`` are ignored.

- bpo-30256: Add test for nested queues when using ``multiprocessing``
  shared objects ``AutoProxy[Queue]`` inside ``ListProxy`` and ``DictProxy``

Build
-----

- bpo-44535: Enable building using a Visual Studio 2022 install on Windows.

- bpo-43298: Improved error message when building without a Windows SDK
  installed.

Windows
-------

- bpo-44582: Accelerate speed of :mod:`mimetypes` initialization using a
  native implementation of the registry scan.

- bpo-41299: Fix 16ms jitter when using timeouts in :mod:`threading`, such
  as with :meth:`threading.Lock.acquire` or
  :meth:`threading.Condition.wait`.

C API
-----

- bpo-44441: :c:func:`Py_RunMain` now resets :c:data:`PyImport_Inittab` to
  its initial value at exit. It must be possible to call
  :c:func:`PyImport_AppendInittab` or :c:func:`PyImport_ExtendInittab` at
  each Python initialization. Patch by Victor Stinner.

- bpo-40939: Removed documentation for the removed ``PyParser_*`` C API.


What's New in Python 3.10.0 beta 3?
===================================

*Release date: 2021-06-17*

Core and Builtins
-----------------

- bpo-44409: Fix error location information for tokenizer errors raised on
  initialization of the tokenizer. Patch by Pablo Galindo.

- bpo-44396: Fix a possible crash in the tokenizer when raising syntax
  errors for unclosed strings. Patch by Pablo Galindo.

- bpo-44349: Fix an edge case when displaying text from files with encoding
  in syntax errors. Patch by Pablo Galindo.

- bpo-44335: Fix a regression when identifying incorrect characters in
  syntax errors. Patch by Pablo Galindo

- bpo-44304: Fix a crash in the :mod:`sqlite3` module that happened when the
  garbage collector clears :class:`sqlite.Statement` objects. Patch by Pablo
  Galindo

- bpo-44305: Improve error message for ``try`` blocks without ``except`` or
  ``finally`` blocks. Patch by Pablo Galindo.

- bpo-43833: Emit a deprecation warning if the numeric literal is
  immediately followed by one of keywords: and, else, for, if, in, is, or.
  Raise a syntax error with more informative message if it is immediately
  followed by other keyword or identifier.

- bpo-11105: When compiling :class:`ast.AST` objects with recursive
  references through :func:`compile`, the interpreter doesn't crash anymore
  instead it raises a :exc:`RecursionError`.

Library
-------

- bpo-42972: The _thread.RLock type now fully implement the GC protocol: add
  a traverse function and the :const:`Py_TPFLAGS_HAVE_GC` flag. Patch by
  Victor Stinner.

- bpo-44422: The :func:`threading.enumerate` function now uses a reentrant
  lock to prevent a hang on reentrant call. Patch by Victor Stinner.

- bpo-44389: Fix deprecation of :data:`ssl.OP_NO_TLSv1_3`

- bpo-44362: Improve :mod:`ssl` module's deprecation messages, error
  reporting, and documentation for deprecations.

- bpo-44342: [Enum] Change pickling from by-value to by-name.

- bpo-44356: [Enum] Allow multiple data-type mixins if they are all the
  same.

- bpo-44351: Restore back :func:`parse_makefile` in
  :mod:`distutils.sysconfig` because it behaves differently than the similar
  implementation in :mod:`sysconfig`.

- bpo-44242: Remove missing flag check from Enum creation and move into a
  ``verify`` decorator.

- bpo-44246: In ``importlib.metadata``, restore compatibility in the result
  from ``Distribution.entry_points`` (``EntryPoints``) to honor expectations
  in older implementations and issuing deprecation warnings for these cases:
  A. ``EntryPoints`` objects are once again mutable, allowing   for
  ``sort()`` and other list-based mutation operations.   Avoid deprecation
  warnings by casting to a   mutable sequence (e.g.
  ``list(dist.entry_points).sort()``). B. ``EntryPoints`` results once again
  allow   for access by index. To avoid deprecation warnings,   cast the
  result to a Sequence first   (e.g. ``tuple(dist.entry_points)[0]``).

- bpo-44246: In importlib.metadata.entry_points, de-duplication of
  distributions no longer requires loading the full metadata for
  PathDistribution objects, improving entry point loading performance by
  ~10x.

- bpo-43853: Improved string handling for :mod:`sqlite3` user-defined
  functions and aggregates:

  * It is now possible to pass strings with embedded null characters to UDFs
  * Conversion failures now correctly raise :exc:`MemoryError`

  Patch by Erlend E. Aasland.

- bpo-43318: Fix a bug where :mod:`pdb` does not always echo cleared
  breakpoints.

- bpo-37022: :mod:`pdb` now displays exceptions from ``repr()`` with its
  ``p`` and ``pp`` commands.

Documentation
-------------

- bpo-44392: Added a new section in the C API documentation for types used
  in type hinting.  Documented ``Py_GenericAlias`` and
  ``Py_GenericAliasType``.

- bpo-38291: Mark ``typing.io`` and ``typing.re`` as deprecated since Python
  3.8 in the documentation. They were never properly supported by type
  checkers.

- bpo-44322: Document that SyntaxError args have a details tuple and that
  details are adjusted for errors in f-string field replacement expressions.

Tests
-----

- bpo-44363: Account for address sanitizer in test_capi. test_capi now
  passes when run GCC address sanitizer.

- bpo-43921: Fix test_ssl.test_wrong_cert_tls13(): use
  ``suppress_ragged_eofs=False``, since ``read()`` can raise
  :exc:`ssl.SSLEOFError` on Windows. Patch by Victor Stinner.

- bpo-43921: Fix test_pha_required_nocert() of test_ssl: catch two more EOF
  cases (when the ``recv()`` method returns an empty string). Patch by
  Victor Stinner.

Build
-----

- bpo-44381: The Windows build now accepts :envvar:`EnableControlFlowGuard`
  set to ``guard`` to enable CFG.

IDLE
----

- bpo-40128: Mostly fix completions on macOS when not using tcl/tk 8.6.11
  (as with 3.9). The added update_idletask call should be harmless and
  possibly helpful otherwise.

- bpo-33962: Move the indent space setting from the Font tab to the new
  Windows tab. Patch by Mark Roseman and Terry Jan Reedy.

- bpo-40468: Split the settings dialog General tab into Windows and Shell/ED
  tabs. Move help sources, which extend the Help menu, to the Extensions
  tab. Make space for new options and shorten the dialog. The latter makes
  the dialog better fit small screens.

C API
-----

- bpo-43795: The list in :ref:`stable-abi-list` now shows the public name
  :c:struct:`PyFrameObject` rather than ``_frame``. The non-existing entry
  ``_node`` no longer appears in the list.

- bpo-44378: :c:func:`Py_IS_TYPE` no longer uses :c:func:`Py_TYPE` to avoid
  a compiler warning: no longer cast ``const PyObject*`` to ``PyObject*``.
  Patch by Victor Stinner.


What's New in Python 3.10.0 beta 2?
===================================

*Release date: 2021-05-31*

Security
--------

- bpo-44022: mod:`http.client` now avoids infinitely reading potential HTTP
  headers after a ``100 Continue`` status response from the server.

Core and Builtins
-----------------

- bpo-43667: Improve Unicode support in non-UTF locales on Oracle Solaris.
  This issue does not affect other Solaris systems.

- bpo-44232: Fix a regression in :func:`type` when a metaclass raises an
  exception. The C function :c:func:`type_new` must properly report the
  exception when a metaclass constructor raises an exception and the winner
  class is not the metaclass. Patch by Victor Stinner.

- bpo-44201: Avoid side effects of checking for specialized syntax errors in
  the REPL that was causing it to ask for extra tokens after a syntax error
  had been detected. Patch by Pablo Galindo

- bpo-44184: Fix a crash at Python exit when a deallocator function removes
  the last strong reference to a heap type. Patch by Victor Stinner.

- bpo-44180: The parser doesn't report generic syntax errors that happen in
  a position further away that the one it reached in the first pass. Patch
  by Pablo Galindo

- bpo-44168: Fix error message in the parser involving keyword arguments
  with invalid expressions. Patch by Pablo Galindo

- bpo-44143: Fixed a crash in the parser that manifest when raising
  tokenizer errors when an existing exception was present. Patch by Pablo
  Galindo.

- bpo-44114: Fix incorrect dictkeys_reversed and dictitems_reversed function
  signatures in C code, which broke webassembly builds.

- bpo-43149: Corrent the syntax error message regarding multiple exception
  types to not refer to "exception groups". Patch by Pablo Galindo

- bpo-44056: Syntax errors when default ``except`` is not the last
  ``except``  are reported with the correct location. Patch by Mark Shannon.

- bpo-43822: The parser will prioritize tokenizer errors over custom syntax
  errors when raising exceptions. Patch by Pablo Galindo.

- bpo-28146: Fix a confusing error message in :func:`str.format`.

Library
-------

- bpo-44254: On Mac, give turtledemo button text a color that works on both
  light or dark background.  Programmers cannot control the latter.

- bpo-38693: Prefer f-strings to ``.format`` in importlib.resources.

- bpo-33693: Importlib.metadata now prefers f-strings to .format.

- bpo-44241: Incorporate minor tweaks from importlib_metadata 4.1:
  SimplePath protocol, support for Metadata 2.2.

- bpo-44210: Make importlib.metadata._meta.PackageMetadata public.

- bpo-43643: Declare readers.MultiplexedPath.name as a property per the
  spec.

- bpo-33433: For IPv4 mapped IPv6 addresses (:rfc:`4291` Section 2.5.5.2),
  the :mod:`ipaddress.IPv6Address.is_private` check is deferred to the
  mapped IPv4 address. This solves a bug where public mapped IPv4 addresses
  were considered private by the IPv6 check.

- bpo-44145: :mod:`hmac` computations were not releasing the GIL while
  calling the OpenSSL ``HMAC_Update`` C API (a new feature in 3.9).  This
  unintentionally prevented parallel computation as other :mod:`hashlib`
  algorithms support.

- bpo-37788: Fix a reference leak when a Thread object is never joined.

- bpo-38908: Subclasses of ``typing.Protocol`` which only have data
  variables declared will now raise a ``TypeError`` when checked with
  ``isinstance`` unless they are decorated with :func:`runtime_checkable`.
  Previously, these checks passed silently. Patch provided by Yurii Karabas.

- bpo-44098: ``typing.ParamSpec`` will no longer be found in the
  ``__parameters__`` of most :mod:`typing` generics except in valid use
  locations specified by :pep:`612`. This prevents incorrect usage like
  ``typing.List[P][int]``. This change means incorrect usage which may have
  passed silently in 3.10 beta 1 and earlier will now error.

- bpo-44089: Allow subclassing ``csv.Error`` in 3.10 (it was allowed in 3.9
  and earlier but was disallowed in early versions of 3.10).

- bpo-44059: Register the SerenityOS Browser in the :mod:`webbrowser`
  module.

- bpo-36515: The :mod:`hashlib` module no longer does unaligned memory
  accesses when compiled for ARM platforms.

- bpo-44018: random.seed() no longer mutates bytearray inputs.

- bpo-38352: Add ``IO``, ``BinaryIO``, ``TextIO``, ``Match``, and
  ``Pattern`` to ``typing.__all__``. Patch by Jelle Zijlstra.

- bpo-43972: When :class:`http.server.SimpleHTTPRequestHandler` sends a
  ``301 (Moved Permanently)`` for a directory path not ending with `/`, add
  a ``Content-Length: 0`` header. This improves the behavior for certain
  clients.

- bpo-28528: Fix a bug in :mod:`pdb` where :meth:`~pdb.Pdb.checkline` raises
  :exc:`AttributeError` if it is called after :meth:`~pdb.Pdb.reset`.

- bpo-43650: Fix :exc:`MemoryError` in :func:`shutil.unpack_archive` which
  fails inside :func:`shutil._unpack_zipfile` on large files. Patch by Igor
  Bolshakov.

- bpo-41730: ``DeprecationWarning`` is now raised when importing
  :mod:`tkinter.tix`, which has been deprecated in documentation since
  Python 3.6.

Documentation
-------------

- bpo-42392: Document the deprecation and removal of the ``loop`` parameter
  for many functions and classes in :mod:`asyncio`.

- bpo-44195: Corrected references to ``TraversableResources`` in docs. There
  is no ``TraversableReader``.

- bpo-41963: Document that ``ConfigParser`` strips off comments when reading
  configuration files.

- bpo-44072: Correct where in the numeric ABC hierarchy ``**`` support is
  added, i.e., in numbers.Complex, not numbers.Integral.

- bpo-43558: Add the remark to :mod:`dataclasses` documentation that the
  :meth:`__init__` of any base class has to be called in
  :meth:`__post_init__`, along with a code example.

- bpo-44025: Clarify when '_' in match statements is a keyword, and when
  not.

Tests
-----

- bpo-31904: Ignore error string case in test_py_compile
  ``test_file_not_exists()``.

- bpo-42083: Add test to check that ``PyStructSequence_NewType`` accepts a
  ``PyStructSequence_Desc`` with ``doc`` field set to ``NULL``.

- bpo-35753: Fix crash in doctest when doctest parses modules that include
  unwrappable functions by skipping those functions.

Build
-----

- bpo-41282: Fix broken ``make install`` that caused standard library
  extension modules to be unnecessarily and incorrectly rebuilt during the
  install phase of cpython.

Windows
-------

- bpo-42686: Build :mod:`sqlite3` with math functions enabled. Patch by
  Erlend E. Aasland.

macOS
-----

- bpo-43109: Allow --with-lto configure option to work with Apple-supplied
  Xcode or Command Line Tools.

IDLE
----

- bpo-41611: Avoid uncaught exceptions in
  ``AutoCompleteWindow.winconfig_event()``.

- bpo-41611: Fix IDLE sometimes freezing upon tab-completion on macOS.

- bpo-44010: Highlight the new :ref:`match <match>` statement's :ref:`soft
  keywords <soft-keywords>`: :keyword:`match`, :keyword:`case <match>`, and
  :keyword:`_ <wildcard-patterns>`. However, this highlighting is not
  perfect and will be incorrect in some rare cases, including some ``_``-s
  in ``case`` patterns.

- bpo-44026: Include interpreter's typo fix suggestions in message line for
  NameErrors and AttributeErrors.  Patch by E. Paine.

Tools/Demos
-----------

- bpo-44074: Make patchcheck automatically detect the correct base branch
  name (previously it was hardcoded to 'master')

C API
-----

- bpo-43795: The undocumented function :c:func:`Py_FrozenMain` is removed
  from the Limited API.

- bpo-43795: :c:func:`PyCodec_Unregister` is now properly exported as a
  function in the Windows Stable ABI DLL.


What's New in Python 3.10.0 beta 1?
===================================

*Release date: 2021-05-03*

Security
--------

- bpo-43434: Creating :class:`sqlite3.Connection` objects now also produces
  ``sqlite3.connect`` and ``sqlite3.connect/handle`` :ref:`auditing events
  <auditing>`. Previously these events were only produced by
  :func:`sqlite3.connect` calls. Patch by Erlend E. Aasland.

- bpo-43998: The :mod:`ssl` module sets more secure cipher suites defaults.
  Ciphers without forward secrecy and with SHA-1 MAC are disabled by
  default. Security level 2 prohibits weak RSA, DH, and ECC keys with less
  than 112 bits of security. :class:`~ssl.SSLContext` defaults to minimum
  protocol version TLS 1.2. Settings are based on Hynek Schlawack's
  research.

- bpo-43882: The presence of newline or tab characters in parts of a URL
  could allow some forms of attacks.

  Following the controlling specification for URLs defined by WHATWG
  :func:`urllib.parse` now removes ASCII newlines and tabs from URLs,
  preventing such attacks.

- bpo-43472: Ensures interpreter-level audit hooks receive the
  ``cpython.PyInterpreterState_New`` event when called through the
  ``_xxsubinterpreters`` module.

- bpo-43362: Fix invalid free in _sha3 module. The issue was introduced in
  3.10.0a1. Python 3.9 and earlier are not affected.

- bpo-43762: Add audit events for :func:`sqlite3.connect/handle`,
  :meth:`sqlite3.Connection.enable_load_extension`, and
  :meth:`sqlite3.Connection.load_extension`. Patch by Erlend E. Aasland.

- bpo-43756: Add new audit event ``glob.glob/2`` to incorporate the new
  *root_dir* and *dir_fd* arguments added to :func:`glob.glob` and
  :func:`glob.iglob`.

- bpo-36384: :mod:`ipaddress` module no longer accepts any leading zeros in
  IPv4 address strings. Leading zeros are ambiguous and interpreted as octal
  notation by some libraries. For example the legacy function
  :func:`socket.inet_aton` treats leading zeros as octal notatation. glibc
  implementation of modern :func:`~socket.inet_pton` does not accept any
  leading zeros. For a while the :mod:`ipaddress` module used to accept
  ambiguous leading zeros.

- bpo-43075: Fix Regular Expression Denial of Service (ReDoS) vulnerability
  in :class:`urllib.request.AbstractBasicAuthHandler`.  The ReDoS-vulnerable
  regex has quadratic worst-case complexity and it allows cause a denial of
  service when identifying crafted invalid RFCs. This ReDoS issue is on the
  client side and needs remote attackers to control the HTTP server.

- bpo-42800: Audit hooks are now fired for frame.f_code, traceback.tb_frame,
  and generator code/frame attribute access.

- bpo-37363: Add audit events to the :mod:`http.client` module.

Core and Builtins
-----------------

- bpo-43977: Prevent classes being both a sequence and a mapping when
  pattern matching.

- bpo-43977: Use :c:member:`~PyTypeObject.tp_flags` on the class object to
  determine if the subject is a sequence or mapping when pattern matching.
  Avoids the need to import :mod:`collections.abc` when pattern matching.

- bpo-43892: Restore proper validation of complex literal value patterns
  when parsing :keyword:`!match` blocks.

- bpo-43933: Set frame.f_lineno to the line number of the 'with' kweyword
  when executing the call to ``__exit__``.

- bpo-43933: If the current position in a frame has no line number then set
  the f_lineno attribute to None, instead of -1, to conform to PEP 626. This
  should not normally be possible, but might occur in some unusual
  circumstances.

- bpo-43963: Importing the :mod:`_signal` module in a subinterpreter has no
  longer side effects.

- bpo-42739: The internal representation of line number tables is changed to
  not use sentinels, and an explicit length parameter is added to the out of
  process API function ``PyLineTable_InitAddressRange``. This makes the
  handling of line number tables more robust in some circumstances.

- bpo-43908: Make :mod:`re` types immutable. Patch by Erlend E. Aasland.

- bpo-43908: Make the :class:`array.array` type immutable. Patch by Erlend
  E. Aasland.

- bpo-43901: Change class and module objects to lazy-create empty
  annotations dicts on demand.  The annotations dicts are stored in the
  object's __dict__ for backwards compatibility.

- bpo-43892: Match patterns now use new dedicated AST nodes (``MatchValue``,
  ``MatchSingleton``, ``MatchSequence``, ``MatchStar``, ``MatchMapping``,
  ``MatchClass``) rather than reusing expression AST nodes. ``MatchAs`` and
  ``MatchOr`` are now defined as pattern nodes rather than as expression
  nodes. Patch by Nick Coghlan.

- bpo-42725: Usage of ``await``/``yield``/``yield from`` and named
  expressions within an annotation is now forbidden when PEP 563 is
  activated.

- bpo-43754: When performing structural pattern matching (:pep:`634`),
  captured names are now left unbound until the *entire* pattern has matched
  successfully.

- bpo-42737: Annotations for complex targets (everything beside simple
  names) no longer cause any runtime effects with ``from __future__ import
  annotations``.

- bpo-43914: :exc:`SyntaxError` exceptions raised by the interpreter will
  highlight the full error range of the expression that consistutes the
  syntax error itself, instead of just where the problem is detected. Patch
  by Pablo Galindo.

- bpo-38605: Revert making ``from __future__ import annotations`` the
  default. This follows the Steering Council decision to postpone PEP 563
  changes to at least Python 3.11. See the original email for more
  information regarding the decision:
  https://mail.python.org/archives/list/python-dev@python.org/thread/CLVXXPQ2T2LQ5MP2Y53VVQFCXYWQJHKZ/.
  Patch by Pablo Galindo.

- bpo-43475: Hashes of NaN values now depend on object identity.  Formerly,
  they always hashed to 0 even though NaN values are not equal to one
  another.  Having the same hash for unequal values caused pile-ups in hash
  tables.

- bpo-43859: Improve the error message for :exc:`IndentationError`
  exceptions. Patch by Pablo Galindo

- bpo-41323: Constant tuple folding in bytecode optimizer now reuses tuple
  in constant table.

- bpo-43846: Data stack usage is much reduced for large literal and call
  expressions.

- bpo-38530: When printing :exc:`NameError` raised by the interpreter,
  :c:func:`PyErr_Display` will offer suggestions of similar variable names
  in the function that the exception was raised from. Patch by Pablo Galindo

- bpo-43823: Improve syntax errors for invalid dictionary literals. Patch by
  Pablo Galindo.

- bpo-43822: Improve syntax errors in the parser for missing commas between
  expressions. Patch by Pablo Galindo.

- bpo-43798: :class:`ast.alias` nodes now include source location metadata
  attributes e.g. lineno, col_offset.

- bpo-43797: Improve ``SyntaxError`` error messages for invalid comparisons.
  Patch by Pablo Galindo.

- bpo-43760: Move the flag for checking whether tracing is enabled to the C
  stack, from the heap. Should speed up dispatch in the interpreter.

- bpo-43682: Static methods (:func:`@staticmethod <staticmethod>`) and class
  methods (:func:`@classmethod <classmethod>`) now inherit the method
  attributes (``__module__``, ``__name__``, ``__qualname__``, ``__doc__``,
  ``__annotations__``) and have a new ``__wrapped__`` attribute. Patch by
  Victor Stinner.

- bpo-43751: Fixed a bug where ``anext(ait, default)`` would erroneously
  return None.

- bpo-42128: :data:`~object.__match_args__` is no longer allowed to be a
  list.

- bpo-43683: Add GEN_START opcode. Marks start of generator, including
  async, or coroutine and handles sending values to a newly created
  generator or coroutine.

- bpo-43105: Importlib now resolves relative paths when creating module spec
  objects from file locations.

- bpo-43682: Static methods (:func:`@staticmethod <staticmethod>`) are now
  callable as regular functions. Patch by Victor Stinner.

- bpo-42609: Prevented crashes in the AST validator and optimizer when
  compiling some absurdly long expressions like ``"+0"*1000000``.
  :exc:`RecursionError` is now raised instead.

- bpo-38530: When printing :exc:`AttributeError`, :c:func:`PyErr_Display`
  will offer suggestions of similar attribute names in the object that the
  exception was raised from. Patch by Pablo Galindo

Library
-------

- bpo-44015: In @dataclass(), raise a TypeError if KW_ONLY is specified more
  than once.

- bpo-25478: Added a *total()* method to collections.Counter() to compute
  the sum of the counts.

- bpo-43733: Change :class:`netrc.netrc` to use UTF-8 encoding before using
  locale encoding.

- bpo-43979: Removed an unnecessary list comprehension before looping from
  :func:`urllib.parse.parse_qsl`.  Patch by Christoph Zwerschke and Dong-hee
  Na.

- bpo-43993: Update bundled pip to 21.1.1.

- bpo-43957: [Enum] Deprecate ``TypeError`` when non-member is used in a
  containment check; In 3.12 ``True`` or ``False`` will be returned instead,
  and containment will return ``True`` if the value is either a member of
  that enum or one of its members' value.

- bpo-42904: For backwards compatibility with previous minor versions of
  Python, if :func:`typing.get_type_hints` receives no namespace dictionary
  arguments, :func:`typing.get_type_hints` will search through the global
  then local namespaces during evaluation of stringized type annotations
  (string forward references) inside a class.

- bpo-43945: [Enum] Deprecate non-standard mixin format() behavior: in 3.12
  the enum member, not the member's value, will be used for format() calls.

- bpo-41139: Deprecate undocumented ``cgi.log()`` API.

- bpo-43937: Fixed the :mod:`turtle` module working with non-default root
  window.

- bpo-43930: Update bundled pip to 21.1 and setuptools to 56.0.0

- bpo-43907: Fix a bug in the pure-Python pickle implementation when using
  protocol 5, where bytearray instances that occur several time in the
  pickled object graph would incorrectly unpickle into repeated copies of
  the bytearray object.

- bpo-43926: In ``importlib.metadata``, provide a uniform interface to
  ``Description``, allow for any field to be encoded with multiline values,
  remove continuation lines from multiline values, and add a ``.json``
  property for easy access to the PEP 566 JSON-compatible form. Sync with
  ``importlib_metadata 4.0``.

- bpo-43920: OpenSSL 3.0.0: :meth:`~ssl.SSLContext.load_verify_locations`
  now returns a consistent error message when cadata contains no valid
  certificate.

- bpo-43607: :mod:`urllib` can now convert Windows paths with ``\\?\``
  prefixes into URL paths.

- bpo-43817: Add :func:`inspect.get_annotations`, which safely computes the
  annotations defined on an object.  It works around the quirks of accessing
  the annotations from various types of objects, and makes very few
  assumptions about the object passed in. :func:`inspect.get_annotations`
  can also correctly un-stringize stringized annotations.

  :func:`inspect.signature`, :func:`inspect.from_callable`, and
  :func:`inspect.from_function` now call :func:`inspect.get_annotations` to
  retrieve annotations.  This means :func:`inspect.signature` and
  :func:`inspect.from_callable` can now un-stringize stringized annotations,
  too.

- bpo-43284: platform.win32_ver derives the windows version from
  sys.getwindowsversion().platform_version which in turn derives the version
  from kernel32.dll (which can be of a different version than Windows
  itself). Therefore change the platform.win32_ver to determine the version
  using the platform module's _syscmd_ver private function to return an
  accurate version.

- bpo-42854: The :mod:`ssl` module now uses ``SSL_read_ex`` and
  ``SSL_write_ex`` internally. The functions support reading and writing of
  data larger than 2 GB. Writing zero-length data no longer fails with a
  protocol violation error.

- bpo-42333: Port ``_ssl`` extension module to multiphase initialization.

- bpo-43880: :mod:`ssl` now raises DeprecationWarning for OP_NO_SSL/TLS*
  options, old TLS versions, old protocols, and other features that have
  been deprecated since Python 3.6, 3.7, or OpenSSL 1.1.0.

- bpo-41559: :pep:`612` is now implemented purely in Python; builtin
  ``types.GenericAlias`` objects no longer include ``typing.ParamSpec`` in
  ``__parameters__`` (with the exception of ``collections.abc.Callable``\ 's
  ``GenericAlias``). This means previously invalid uses of ``ParamSpec``
  (such as ``list[P]``) which worked in earlier versions of Python 3.10
  alpha, will now raise ``TypeError`` during substitution.

- bpo-43867: The :mod:`multiprocessing` ``Server`` class now explicitly
  catches :exc:`SystemExit` and closes the client connection in this case.
  It happens when the ``Server.serve_client()`` method reaches the end of
  file (EOF).

- bpo-40443: Remove unused imports: pyclbr no longer uses copy, and typing
  no longer uses ast. Patch by Victor Stinner.

- bpo-43820: Remove an unneeded copy of the namespace passed to
  dataclasses.make_dataclass().

- bpo-43787: Add ``__iter__()`` method to :class:`bz2.BZ2File`,
  :class:`gzip.GzipFile`, and :class:`lzma.LZMAFile`. It makes iterating
  them about 2x faster. Patch by Inada Naoki.

- bpo-43680: Deprecate io.OpenWrapper and _pyio.OpenWrapper: use io.open and
  _pyio.open instead. Until Python 3.9, _pyio.open was not a static method
  and builtins.open was set to OpenWrapper to not become a bound method when
  set to a class variable. _io.open is a built-in function whereas
  _pyio.open is a Python function. In Python 3.10, _pyio.open() is now a
  static method, and builtins.open() is now io.open().

- bpo-43680: The Python :func:`_pyio.open` function becomes a static method
  to behave as :func:`io.open` built-in function: don't become a bound
  method when stored as a class variable. It becomes possible since static
  methods are now callable in Python 3.10. Moreover,
  :func:`_pyio.OpenWrapper` becomes a simple alias to :func:`_pyio.open`.
  Patch by Victor Stinner.

- bpo-41515: Fix :exc:`KeyError` raised in :func:`typing.get_type_hints` due
  to synthetic modules that don't appear in ``sys.modules``.

- bpo-43776: When :class:`subprocess.Popen` args are provided as a string or
  as :class:`pathlib.Path`, the Popen instance repr now shows the right
  thing.

- bpo-42248: [Enum] ensure exceptions raised in ``_missing__`` are released

- bpo-43744: fix issue with enum member name matching the start of a private
  variable name

- bpo-43772: Fixed the return value of ``TypeVar.__ror__``. Patch by Jelle
  Zijlstra.

- bpo-43764: Add match_args parameter to @dataclass decorator to allow
  suppression of __match_args__ generation.

- bpo-43799: OpenSSL 3.0.0: define ``OPENSSL_API_COMPAT`` 1.1.1 to suppress
  deprecation warnings. Python requires OpenSSL 1.1.1 APIs.

- bpo-43478: Mocks can no longer be used as the specs for other Mocks. As a
  result, an already-mocked object cannot have an attribute mocked using
  ``autospec=True`` or be the subject of a ``create_autospec(...)`` call.
  This can uncover bugs in tests since these Mock-derived Mocks will always
  pass certain tests (e.g. :func:`isinstance`) and builtin assert functions
  (e.g. assert_called_once_with) will unconditionally pass.

- bpo-43794: Add :data:`ssl.OP_IGNORE_UNEXPECTED_EOF` constants (OpenSSL
  3.0.0)

- bpo-43785: Improve ``bz2.BZ2File`` performance by removing the RLock from
  BZ2File. This makes BZ2File thread unsafe in the face of multiple
  simultaneous readers or writers, just like its equivalent classes in
  :mod:`gzip` and :mod:`lzma` have always been.  Patch by Inada Naoki.

- bpo-43789: OpenSSL 3.0.0: Don't call the password callback function a
  second time when first call has signaled an error condition.

- bpo-43788: The header files for :mod:`ssl` error codes are now OpenSSL
  version-specific. Exceptions will now show correct reason and library
  codes. The ``make_ssl_data.py`` script has been rewritten to use OpenSSL's
  text file with error codes.

- bpo-43766: Implement :pep:`647` in the :mod:`typing` module by adding
  :data:`TypeGuard`.

- bpo-25264: :func:`os.path.realpath` now accepts a *strict* keyword-only
  argument. When set to ``True``, :exc:`OSError` is raised if a path doesn't
  exist or a symlink loop is encountered.

- bpo-43780: In ``importlib.metadata``, incorporate changes from
  importlib_metadata 3.10: Add mtime-based caching during distribution
  discovery. Flagged use of dict result from ``entry_points()`` as
  deprecated.

- The ``P.args`` and ``P.kwargs`` attributes of :class:`typing.ParamSpec`
  are now instances of the new classes :class:`typing.ParamSpecArgs` and
  :class:`typing.ParamSpecKwargs`, which enables a more useful ``repr()``.
  Patch by Jelle Zijlstra.

- bpo-43731: Add an ``encoding`` parameter :func:`logging.fileConfig()`.

- bpo-43712: Add ``encoding`` and ``errors`` parameters to
  :func:`fileinput.input` and :class:`fileinput.FileInput`.

- bpo-38659: A ``simple_enum`` decorator is added to the ``enum`` module to
  convert a normal class into an Enum. ``test_simple_enum`` added to test
  simple enums against a corresponding normal Enum.  Standard library
  modules updated to use ``simple_enum``.

- bpo-43764: Fix an issue where :data:`~object.__match_args__` generation
  could fail for some :mod:`dataclasses`.

- bpo-43752: Fix :mod:`sqlite3` regression for zero-sized blobs with
  converters, where ``b""`` was returned instead of ``None``. The regression
  was introduced by PR 24723. Patch by Erlend E. Aasland.

- bpo-43655: :mod:`tkinter` dialog windows are now recognized as dialogs by
  window managers on macOS and X Window.

- bpo-43723: The following ``threading`` methods are now deprecated and
  should be replaced:

  - ``currentThread`` => :func:`threading.current_thread`

  - ``activeCount`` => :func:`threading.active_count`

  - ``Condition.notifyAll`` => :meth:`threading.Condition.notify_all`

  - ``Event.isSet`` => :meth:`threading.Event.is_set`

  - ``Thread.setName`` => :attr:`threading.Thread.name`

  - ``thread.getName`` => :attr:`threading.Thread.name`

  - ``Thread.isDaemon`` => :attr:`threading.Thread.daemon`

  - ``Thread.setDaemon`` => :attr:`threading.Thread.daemon`

  Patch by Jelle Zijlstra.

- bpo-2135: Deprecate find_module() and find_loader() implementations in
  importlib and zipimport.

- bpo-43534: :func:`turtle.textinput` and :func:`turtle.numinput` create now
  a transient window working on behalf of the canvas window.

- bpo-43532: Add the ability to specify keyword-only fields to dataclasses.
  These fields will become keyword-only arguments to the generated __init__.

- bpo-43522: Fix problem with
  :attr:`~ssl.SSLContext.hostname_checks_common_name`. OpenSSL does not copy
  hostflags from *struct SSL_CTX* to *struct SSL*.

- bpo-8978: Improve error message for :func:`tarfile.open` when :mod:`lzma`
  / :mod:`bz2` are unavailable.  Patch by Anthony Sottile.

- bpo-42967: Allow :class:`bytes` ``separator`` argument in
  ``urllib.parse.parse_qs`` and ``urllib.parse.parse_qsl`` when parsing
  :class:`str` query strings. Previously, this raised a ``TypeError``.

- bpo-43296: Improve :mod:`sqlite3` error handling: ``sqlite3_value_blob()``
  errors that set ``SQLITE_NOMEM`` now raise :exc:`MemoryError`. Patch by
  Erlend E. Aasland.

- bpo-43312: New functions :func:`sysconfig.get_preferred_scheme` and
  :func:`sysconfig.get_default_scheme` are added to query a platform for its
  preferred "user", "home", and "prefix" (default) scheme names.

- bpo-43265: Improve :meth:`sqlite3.Connection.backup` error handling. The
  error message for non-existent target database names is now ``unknown
  database <database name>`` instead of ``SQL logic error``. Patch by Erlend
  E. Aasland.

- bpo-41282: Install schemes in :mod:`distutils.command.install` are now
  loaded from :mod:`sysconfig`.

- bpo-41282: :mod:`distutils.sysconfig` has been merged to :mod:`sysconfig`.

- bpo-43176: Fixed processing of a dataclass that inherits from a frozen
  dataclass with no fields.  It is now correctly detected as an error.

- bpo-43080: :mod:`pprint` now has support for
  :class:`dataclasses.dataclass`. Patch by Lewis Gaul.

- bpo-39950: Add `pathlib.Path.hardlink_to()` method that supersedes
  `link_to()`. The new method has the same argument order as `symlink_to()`.

- bpo-42904: :func:`typing.get_type_hints` now checks the local namespace of
  a class when evaluating :pep:`563` annotations inside said class.

- bpo-42269: Add ``slots`` parameter to ``dataclasses.dataclass`` decorator
  to automatically generate ``__slots__`` for class. Patch provided by Yurii
  Karabas.

- bpo-39529: Deprecated use of :func:`asyncio.get_event_loop` without
  running event loop. Emit deprecation warning for :mod:`asyncio` functions
  which implicitly create a :class:`~asyncio.Future` or
  :class:`~asyncio.Task` objects if there is no running event loop and no
  explicit *loop* argument is passed: :func:`~asyncio.ensure_future`,
  :func:`~asyncio.wrap_future`, :func:`~asyncio.gather`,
  :func:`~asyncio.shield`, :func:`~asyncio.as_completed` and constructors of
  :class:`~asyncio.Future`, :class:`~asyncio.Task`,
  :class:`~asyncio.StreamReader`, :class:`~asyncio.StreamReaderProtocol`.

- bpo-18369: Certificate and PrivateKey classes were added to the ssl
  module. Certificates and keys can now be loaded from memory buffer, too.

- bpo-41486: Use a new output buffer management code for :mod:`bz2` /
  :mod:`lzma` / :mod:`zlib` modules, and add ``.readall()`` function to
  ``_compression.DecompressReader`` class. These bring some performance
  improvements. Patch by Ma Lin.

- bpo-31870: The :func:`ssl.get_server_certificate` function now has a
  *timeout* parameter.

- bpo-41735: Fix thread locks in zlib module may go wrong in rare case.
  Patch by Ma Lin.

- bpo-36470: Fix dataclasses with ``InitVar``\s and
  :func:`~dataclasses.replace()`. Patch by Claudiu Popa.

- bpo-40849: Expose X509_V_FLAG_PARTIAL_CHAIN ssl flag

- bpo-35114: :func:`ssl.RAND_status` now returns a boolean value (as
  documented) instead of ``1`` or ``0``.

- bpo-39906: :meth:`pathlib.Path.stat` and :meth:`~pathlib.Path.chmod` now
  accept a *follow_symlinks* keyword-only argument for consistency with
  corresponding functions in the :mod:`os` module.

- bpo-39899: :func:`os.path.expanduser()` now refuses to guess Windows home
  directories if the basename of current user's home directory does not
  match their username.

  :meth:`pathlib.Path.expanduser()` and :meth:`~pathlib.Path.home()` now
  consistently raise :exc:`RuntimeError` exception when a home directory
  cannot be resolved. Previously a :exc:`KeyError` exception could be raised
  on Windows when the ``"USERNAME"``  environment variable was unset.

- bpo-36076: Added SNI support to :func:`ssl.get_server_certificate`.

- bpo-38490: Covariance, Pearson's correlation, and simple linear regression
  functionality was added to statistics module. Patch by Tymoteusz Wołodźko.

- bpo-33731: Provide a locale.localize() function, which converts a
  normalized number string into a locale format.

- bpo-32745: Fix a regression in the handling of ctypes'
  :data:`ctypes.c_wchar_p` type: embedded null characters would cause a
  :exc:`ValueError` to be raised. Patch by Zackery Spytz.

Documentation
-------------

- bpo-43987: Add "Annotations Best Practices" document as a new HOWTO.

- bpo-43977: Document the new :const:`Py_TPFLAGS_MAPPING` and
  :const:`Py_TPFLAGS_SEQUENCE` type flags.

- bpo-43959: The documentation on the PyContextVar C-API was clarified.

- bpo-43938: Update dataclasses documentation to express that
  FrozenInstanceError is derived from AttributeError.

- bpo-43778: Fix the Sphinx glossary_search extension: create the _static/
  sub-directory if it doesn't exist.

- bpo-43755: Update documentation to reflect that unparenthesized lambda
  expressions can no longer be the expression part in an ``if`` clause in
  comprehensions and generator expressions since Python 3.9.

- bpo-43739: Fixing the example code in Doc/extending/extending.rst to
  declare and initialize the pmodule variable to be of the right type.

Tests
-----

- bpo-43961: Fix test_logging.test_namer_rotator_inheritance() on Windows:
  use :func:`os.replace` rather than :func:`os.rename`. Patch by Victor
  Stinner.

- bpo-43842: Fix a race condition in the SMTP test of test_logging. Don't
  close a file descriptor (socket) from a different thread while
  asyncore.loop() is polling the file descriptor. Patch by Victor Stinner.

- bpo-43843: :mod:`test.libregrtest` now marks a test as ENV_CHANGED
  (altered the execution environment) if a thread raises an exception but
  does not catch it. It sets a hook on :func:`threading.excepthook`. Use
  ``--fail-env-changed`` option to mark the test as failed. Patch by Victor
  Stinner.

- bpo-43811: Tests multiple OpenSSL versions on GitHub Actions. Use ccache
  to speed up testing.

- bpo-43791: OpenSSL 3.0.0: Disable testing of legacy protocols TLS 1.0 and
  1.1. Tests are failing with TLSV1_ALERT_INTERNAL_ERROR.

Build
-----

- bpo-43567: Improved generated code refresh (AST/tokens/opcodes/keywords)
  on Windows.

- bpo-43669: Implement :pep:`644`. Python now requires OpenSSL 1.1.1 or
  newer.

Windows
-------

- bpo-35306: Adds additional arguments to :func:`os.startfile` function.

- bpo-43538: Avoid raising errors from :meth:`pathlib.Path.exists()` when
  passed an invalid filename.

- bpo-38822: Fixed :func:`os.stat` failing on inaccessible directories with
  a trailing slash, rather than falling back to the parent directory's
  metadata. This implicitly affected :func:`os.path.exists` and
  :func:`os.path.isdir`.

- bpo-26227: Fixed decoding of host names in :func:`socket.gethostbyaddr`
  and :func:`socket.gethostbyname_ex`.

- bpo-40432: Updated pegen regeneration script on Windows to find and use
  Python 3.8 or higher.  Prior to this, pegen regeneration already required
  3.8 or higher, but the script may have used lower versions of Python.

- bpo-43745: Actually updates Windows release to OpenSSL 1.1.1k. Earlier
  releases were mislabelled and actually included 1.1.1i again.

- bpo-43652: Update Tcl and Tk to 8.6.11 in Windows installer.

- bpo-43492: Upgrade Windows installer to use SQLite 3.35.5.

- bpo-30555: Fix ``WindowsConsoleIO`` errors in the presence of fd
  redirection. Patch by Segev Finer.

macOS
-----

- bpo-42119: Fix check for macOS SDK paths when building Python. Narrow
  search to match contents of SDKs, namely only files in
  ``/System/Library``, ``/System/IOSSupport``, and ``/usr`` other than
  ``/usr/local``. Previously, anything under ``/System`` was assumed to be
  in an SDK which causes problems with the new file system layout in 10.15+
  where user file systems may appear to be mounted under ``/System``.  Paths
  in ``/Library`` were also incorrectly treated as SDK locations.

- bpo-43568: Drop support for MACOSX_DEPLOYMENT_TARGET < 10.3

- bpo-44009: Provide "python3.x-intel64" executable to allow reliably
  forcing macOS universal2 framework builds to run under Rosetta 2 Intel-64
  emulation on Apple Silicon Macs.  This can be useful for testing or when
  universal2 wheels are not yet available.

- bpo-43851: Build SQLite with ``SQLITE_OMIT_AUTOINIT`` on macOS. Patch by
  Erlend E. Aasland.

- bpo-43492: Update macOS installer to use SQLite 3.35.4.

- bpo-42235: ``Mac/BuildScript/build-installer.py`` will now use
  "--enable-optimizations" and ``--with-lto`` when building on macOS 10.15
  or later.

IDLE
----

- bpo-37903: Add mouse actions to the shell sidebar.  Left click and
  optional drag selects one or more lines, as with the editor line number
  sidebar.  Right click after selecting raises a context menu with 'copy
  with prompts'.  This zips together prompts from the sidebar with lines
  from the selected text.

- bpo-43981: Fix reference leak in test_sidebar and test_squeezer. Patches
  by Terry Jan Reedy and Pablo Galindo

- bpo-37892: Indent IDLE Shell input with spaces instead of tabs

- bpo-43655: IDLE dialog windows are now recognized as dialogs by window
  managers on macOS and X Window.

- bpo-37903: IDLE's shell now shows prompts in a separate side-bar.

C API
-----

- bpo-43916: Add a new :c:data:`Py_TPFLAGS_DISALLOW_INSTANTIATION` type flag
  to disallow creating type instances. Patch by Victor Stinner.

- bpo-43774: Remove the now unused ``PYMALLOC_DEBUG`` macro. Debug hooks on
  memory allocators are now installed by default if Python is built in debug
  mode (if ``Py_DEBUG`` macro is defined). Moreover, they can now be used on
  Python build in release mode (ex: using ``PYTHONMALLOC=debug`` environment
  variable).

- bpo-43962: _PyInterpreterState_IDIncref() now calls
  _PyInterpreterState_IDInitref() and always increments id_refcount.
  Previously, calling _xxsubinterpreters.get_current() could create an
  id_refcount inconsistency when a _xxsubinterpreters.InterpreterID object
  was deallocated. Patch by Victor Stinner.

- bpo-28254: Add new C-API functions to control the state of the garbage
  collector: :c:func:`PyGC_Enable()`, :c:func:`PyGC_Disable()`,
  :c:func:`PyGC_IsEnabled()`, corresponding to the functions in the
  :mod:`gc` module.

- bpo-43908: Introduce :const:`Py_TPFLAGS_IMMUTABLETYPE` flag for immutable
  type objects, and modify :c:func:`PyType_Ready` to set it for static
  types. Patch by Erlend E. Aasland.

- bpo-43795: :c:func:`PyMem_Calloc` is now available in the limited C API
  (``Py_LIMITED_API``).

- bpo-43868: :c:func:`PyOS_ReadlineFunctionPointer` is no longer exported by
  limited C API headers and by ``python3.dll`` on Windows. Like any function
  that takes ``FILE*``, it is not part of the stable ABI.

- bpo-43795: Stable ABI and limited API definitions are generated from a
  central manifest (:pep:`652`).

- bpo-43753: Add the :c:func:`Py_Is(x, y) <Py_Is>` function to test if the
  *x* object is the *y* object, the same as ``x is y`` in Python. Add also
  the :c:func:`Py_IsNone`, :c:func:`Py_IsTrue`, :c:func:`Py_IsFalse`
  functions to test if an object is, respectively, the ``None`` singleton,
  the ``True`` singleton or the ``False`` singleton. Patch by Victor
  Stinner.


What's New in Python 3.10.0 alpha 7?
====================================

*Release date: 2021-04-05*

Security
--------

- bpo-42988: CVE-2021-3426: Remove the ``getfile`` feature of the
  :mod:`pydoc` module which could be abused to read arbitrary files on the
  disk (directory traversal vulnerability). Moreover, even source code of
  Python modules can contain sensitive data like passwords. Vulnerability
  reported by David Schwörer.

- bpo-43285: :mod:`ftplib` no longer trusts the IP address value returned
  from the server in response to the PASV command by default.  This prevents
  a malicious FTP server from using the response to probe IPv4 address and
  port combinations on the client network.

  Code that requires the former vulnerable behavior may set a
  ``trust_server_pasv_ipv4_address`` attribute on their :class:`ftplib.FTP`
  instances to ``True`` to re-enable it.

- bpo-43439: Add audit hooks for :func:`gc.get_objects`,
  :func:`gc.get_referrers` and :func:`gc.get_referents`. Patch by Pablo
  Galindo.

Core and Builtins
-----------------

- bpo-27129: Update CPython bytecode magic number.

- bpo-43672: Raise ImportWarning when calling find_loader().

- bpo-43660: Fix crash that happens when replacing ``sys.stderr`` with a
  callable that can remove the object while an exception is being printed.
  Patch by Pablo Galindo.

- bpo-27129: The bytecode interpreter uses instruction, rather byte, offsets
  internally. This reduces the number of EXTENDED_ARG instructions needed
  and streamlines instruction dispatch a bit.

- bpo-40645: Fix reference leak in the :mod:`_hashopenssl` extension. Patch
  by Pablo Galindo.

- bpo-42134: Calls to find_module() by the import system now raise
  ImportWarning.

- bpo-41064: Improve the syntax error for invalid usage of double starred
  elements ('**') in f-strings. Patch by Pablo Galindo.

- bpo-43575: Speed up calls to ``map()`` by using the :pep:`590`
  ``vectorcall`` calling convention. Patch by Dong-hee Na.

- bpo-42137: The import system now prefers using ``__spec__`` for
  ``ModuleType.__repr__`` over ``module_repr()``.

- bpo-43452: Added micro-optimizations to ``_PyType_Lookup()`` to improve
  cache lookup performance in the common case of cache hits.

- bpo-43555: Report the column offset for :exc:`SyntaxError` for invalid
  line continuation characters. Patch by Pablo Galindo.

- bpo-43517: Fix misdetection of circular imports when using ``from pkg.mod
  import attr``, which caused false positives in non-trivial multi-threaded
  code.

- bpo-43497: Emit SyntaxWarnings for assertions with tuple constants, this
  is a regression introduced in python3.7

- bpo-39316: Tracing now has correct line numbers for attribute accesses
  when the the attribute is on a different line from the object. Improves
  debugging and profiling for multi-line method chains.

- bpo-35883: Python no longer fails at startup with a fatal error if a
  command line argument contains an invalid Unicode character. The
  :c:func:`Py_DecodeLocale` function now escapes byte sequences which would
  be decoded as Unicode characters outside the [U+0000; U+10ffff] range.

- bpo-43410: Fix a bug that was causing the parser to crash when emitting
  syntax errors when reading input from stdin. Patch by Pablo Galindo

- bpo-43406: Fix a possible race condition where ``PyErr_CheckSignals``
  tries to execute a non-Python signal handler.

- bpo-42128: Add ``__match_args__`` to :c:type:`structsequence` based
  classes. Patch by Pablo Galindo.

- bpo-43390: CPython now sets the ``SA_ONSTACK`` flag in ``PyOS_setsig`` for
  the VM's default signal handlers.  This is friendlier to other in-process
  code that an extension module or embedding use could pull in (such as
  Golang's cgo) where tiny thread stacks are the norm and ``sigaltstack()``
  has been used to provide for signal handlers.  This is a no-op change for
  the vast majority of processes that don't use sigaltstack.

- bpo-43287: Speed up calls to ``filter()`` by using the :pep:`590`
  ``vectorcall`` calling convention. Patch by Dong-hee Na.

- bpo-37448: Add a radix tree based memory map to track in-use obmalloc
  arenas. Use to replace the old implementation of address_in_range(). The
  radix tree approach makes it easy to increase pool sizes beyond the OS
  page size. Boosting the pool and arena size allows obmalloc to handle a
  significantly higher percentage of requests from its ultra-fast paths.

  It also has the advantage of eliminating the memory unsanitary behavior of
  the previous address_in_range(). The old address_in_range() was marked
  with the annotations _Py_NO_SANITIZE_ADDRESS, _Py_NO_SANITIZE_THREAD, and
  _Py_NO_SANITIZE_MEMORY. Those annotations are no longer needed.

  To disable the radix tree map, set a preprocessor flag as follows:
  `-DWITH_PYMALLOC_RADIX_TREE=0`.

  Co-authored-by: Tim Peters <tim.peters@gmail.com>

- bpo-29988: Only handle asynchronous exceptions and requests to drop the
  GIL when returning from a call or on the back edges of loops. Makes sure
  that :meth:`__exit__` is always called in with statements, even for
  interrupts.

Library
-------

- bpo-43720: Document various stdlib deprecations in imp, pkgutil, and
  importlib.util for removal in Python 3.12.

- bpo-43433: :class:`xmlrpc.client.ServerProxy` no longer ignores query and
  fragment in the URL of the server.

- bpo-31956: The :meth:`~array.array.index` method of :class:`array.array`
  now has optional *start* and *stop* parameters.

- bpo-40066: Enum: adjust ``repr()`` to show only enum and member name (not
  value, nor angle brackets) and ``str()`` to show only member name.  Update
  and improve documentation to match.

- bpo-42136: Deprecate all module_repr() methods found in importlib as their
  use is being phased out by Python 3.12.

- bpo-35930: Raising an exception raised in a "future" instance will create
  reference cycles.

- bpo-41369: Finish updating the vendored libmpdec to version 2.5.1.  Patch
  by Stefan Krah.

- bpo-43422: Revert the _decimal C API which was added in bpo-41324.

- bpo-43577: Fix deadlock when using :class:`ssl.SSLContext` debug callback
  with :meth:`ssl.SSLContext.sni_callback`.

- bpo-43571: It's now possible to create MPTCP sockets with IPPROTO_MPTCP

- bpo-43542: ``image/heic`` and ``image/heif`` were added to
  :mod:`mimetypes`.

- bpo-40645: The :mod:`hmac` module now uses OpenSSL's HMAC implementation
  when digestmod argument is a hash name or builtin hash function.

- bpo-43510: Implement :pep:`597`: Add ``EncodingWarning`` warning, ``-X
  warn_default_encoding`` option, :envvar:`PYTHONWARNDEFAULTENCODING`
  environment variable and ``encoding="locale"`` argument value.

- bpo-43521: ``ast.unparse`` can now render NaNs and empty sets.

- bpo-42914: :func:`pprint.pprint` gains a new boolean
  ``underscore_numbers`` optional argument to emit integers with thousands
  separated by an underscore character for improved readability (for example
  ``1_000_000`` instead of ``1000000``).

- bpo-41361: :meth:`~collections.deque.rotate` calls are now slightly faster
  due to faster argument parsing.

- bpo-43423: :func:`subprocess.communicate` no longer raises an IndexError
  when there is an empty stdout or stderr IO buffer during a timeout on
  Windows.

- bpo-27820: Fixed long-standing bug of smtplib.SMTP where doing AUTH LOGIN
  with initial_response_ok=False will fail.

  The cause is that SMTP.auth_login _always_ returns a password if provided
  with a challenge string, thus non-compliant with the standard for AUTH
  LOGIN.

  Also fixes bug with the test for smtpd.

- bpo-43445: Add frozen modules to :data:`sys.stdlib_module_names`. For
  example, add ``"_frozen_importlib"`` and ``"_frozen_importlib_external"``
  names.

- bpo-43245: Add keyword arguments support to ``ChainMap.new_child()``.

- bpo-29982: Add optional parameter *ignore_cleanup_errors* to
  :func:`tempfile.TemporaryDirectory` and allow multiple :func:`cleanup`
  attempts. Contributed by C.A.M. Gerlach.

- bpo-43428: Include changes from `importlib_metadata 3.7
  <https://importlib-metadata.readthedocs.io/en/latest/history.html#v3-7-0>`_:

  Performance enhancements to distribution discovery.

  ``entry_points`` only returns unique distributions.

  Introduces new ``EntryPoints`` object for containing a set of entry points
  with convenience methods for selecting entry points by group or name.
  ``entry_points`` now returns this object if selection parameters are
  supplied but continues to return a dict object for compatibility. Users
  are encouraged to rely on the selection interface. The dict object result
  is likely to be deprecated in the future.

  Added packages_distributions function to return a mapping of packages to
  the distributions that provide them.

- bpo-43332: Improves the networking efficiency of :mod:`http.client` when
  using a proxy via :meth:`~HTTPConnection.set_tunnel`.  Fewer small send
  calls are made during connection setup.

- bpo-43420: Improve performance of :class:`fractions.Fraction` arithmetics
  for large components.  Contributed by Sergey B. Kirpichev.

- bpo-43356: Allow passing a signal number to ``_thread.interrupt_main()``.

- bpo-43399: Fix ``ElementTree.extend`` not working on iterators when using
  the Python implementation

- bpo-43369: Improve :mod:`sqlite3` error handling: If
  ``sqlite3_column_text()`` and ``sqlite3_column_blob()`` set
  ``SQLITE_NOMEM``, :exc:`MemoryError` is now raised. Patch by Erlend E.
  Aasland.

- bpo-43368: Fix a regression introduced in PR 24562, where an empty
  bytestring was fetched as ``None`` instead of ``b''`` in :mod:`sqlite3`.
  Patch by Mariusz Felisiak.

- bpo-41282: Fixed stacklevel of ``DeprecationWarning`` emitted from
  ``import distutils``.

- bpo-42129: ``importlib.resources`` now honors namespace packages, merging
  resources from each location in the namespace as introduced in
  ``importlib_resources`` 3.2 and including incidental changes through
  5.0.3.

- bpo-43295: :meth:`datetime.datetime.strptime` now raises ``ValueError``
  instead of ``IndexError`` when matching ``'z'`` with the ``%z`` format
  specifier.

- bpo-43125: Return empty string if base64mime.body_encode receive empty
  bytes

- bpo-43084: :func:`curses.window.enclose` returns now ``True`` or ``False``
  (as was documented) instead of ``1`` or ``0``.

- bpo-42994: Add MIME types for opus, AAC, 3gpp and 3gpp2

- bpo-14678: Add an invalidate_caches() method to the zipimport.zipimporter
  class to support importlib.invalidate_caches(). Patch by Desmond Cheong.

- bpo-42782: Fail fast in :func:`shutil.move()` to avoid creating
  destination directories on failure.

- bpo-40066: Enum's `repr()` and `str()` have changed: `repr()` is now
  *EnumClass.MemberName* and `str()` is *MemberName*.  Additionally, stdlib
  Enum's whose contents are available as module attributes, such as
  `RegexFlag.IGNORECASE`, have their `repr()` as *module.name*, e.g.
  `re.IGNORECASE`.

- bpo-26053: Fixed bug where the :mod:`pdb` interactive run command echoed
  the args from the shell command line, even if those have been overridden
  at the pdb prompt.

- bpo-24160: Fixed bug where breakpoints did not persist across multiple
  debugger sessions in :mod:`pdb`'s interactive mode.

- bpo-40701: When the :data:`tempfile.tempdir` global variable is set to a
  value of type bytes, it is now handled consistently.  Previously
  exceptions could be raised from some tempfile APIs when the directory did
  not already exist in this situation.  Also ensures that the
  :func:`tempfile.gettempdir()` and :func:`tempfile.gettempdirb()` functions
  *always* return ``str`` and ``bytes`` respectively.

- bpo-39342: Expose ``X509_V_FLAG_ALLOW_PROXY_CERTS`` as
  :data:`~ssl.VERIFY_ALLOW_PROXY_CERTS` to allow proxy certificate
  validation as explained in
  https://www.openssl.org/docs/man1.1.1/man7/proxy-certificates.html.

- bpo-31861: Add builtins.aiter and builtins.anext. Patch by Joshua Bronson
  (@jab), Daniel Pope (@lordmauve), and Justin Wang (@justin39).

Documentation
-------------

- bpo-43199: Answer "Why is there no goto?" in the Design and History FAQ.

- bpo-43407: Clarified that a result from :func:`time.monotonic`,
  :func:`time.perf_counter`, :func:`time.process_time`, or
  :func:`time.thread_time` can be compared with the result from any
  following call to the same function - not just the next immediate call.

- bpo-43354: Fix type documentation for ``Fault.faultCode``; the type has to
  be ``int`` instead of ``str``.

- bpo-41933: Clarified wording of s * n in the Common Sequence Operations

Tests
-----

- bpo-37945: Fix test_getsetlocale_issue1813() of test_locale: skip the test
  if ``setlocale()`` fails. Patch by Victor Stinner.

- bpo-41561: Add workaround for Ubuntu's custom OpenSSL security level
  policy.

Build
-----

- bpo-43179: Introduce and correctly use ALIGNOF_X in place of SIZEOF_X for
  alignment-related code in optimized string routines. Patch by Jessica
  Clarke.

- bpo-43631: Update macOS, Windows, and CI to OpenSSL 1.1.1k.

- bpo-43617: Improve configure.ac: Check for presence of autoconf-archive
  package and remove our copies of M4 macros.

- bpo-43466: The ``configure`` script now supports ``--with-openssl-rpath``
  option.

- bpo-43372: Use ``_freeze_importlib`` to generate code for the
  ``__hello__`` module. This approach ensures the code matches the
  interpreter version.  Previously, PYTHON_FOR_REGEN was used to generate
  the code, which might be wrong.  The marshal format for code objects has
  changed with bpo-42246, commit 877df851. Update the code and the expected
  code sizes in ctypes test_frozentable.

Windows
-------

- bpo-43440: Build :mod:`sqlite3` with the ``R*Tree`` module enabled. Patch
  by Erlend E. Aasland.

IDLE
----

- bpo-42225: Document that IDLE can fail on Unix either from misconfigured
  IP masquerade rules or failure displaying complex colored (non-ascii)
  characters.

C API
-----

- bpo-43688: The limited C API is now supported if Python is built in debug
  mode (if the ``Py_DEBUG`` macro is defined). In the limited C API, the
  :c:func:`Py_INCREF` and :c:func:`Py_DECREF` functions are now implemented
  as opaque function calls, rather than accessing directly the
  :c:member:`PyObject.ob_refcnt` member, if Python is built in debug mode
  and the ``Py_LIMITED_API`` macro targets Python 3.10 or newer. It became
  possible to support the limited C API in debug mode because the
  :c:type:`PyObject` structure is the same in release and debug mode since
  Python 3.8 (see :issue:`36465`).

  The limited C API is still not supported in the ``--with-trace-refs``
  special build (``Py_TRACE_REFS`` macro).

  Patch by Victor Stinner.

- bpo-43244: Remove the ``pyarena.h`` header file with functions:

  * ``PyArena_New()``
  * ``PyArena_Free()``
  * ``PyArena_Malloc()``
  * ``PyArena_AddPyObject()``

  These functions were undocumented, excluded from the limited C API, and
  were only used internally by the compiler. Patch by Victor Stinner.

- bpo-43244: Remove the compiler and parser functions using ``struct _mod``
  type, because the public AST C API was removed:

  * ``PyAST_Compile()``
  * ``PyAST_CompileEx()``
  * ``PyAST_CompileObject()``
  * ``PyFuture_FromAST()``
  * ``PyFuture_FromASTObject()``
  * ``PyParser_ASTFromFile()``
  * ``PyParser_ASTFromFileObject()``
  * ``PyParser_ASTFromFilename()``
  * ``PyParser_ASTFromString()``
  * ``PyParser_ASTFromStringObject()``

  These functions were undocumented and excluded from the limited C API.
  Patch by Victor Stinner.

- bpo-43244: Remove ``ast.h``, ``asdl.h``, and ``Python-ast.h`` header
  files. These functions were undocumented and excluded from the limited C
  API. Most names defined by these header files were not prefixed by ``Py``
  and so could create names conflicts. For example, ``Python-ast.h`` defined
  a ``Yield`` macro which was conflict with the ``Yield`` name used by the
  Windows ``<winbase.h>`` header. Use the Python :mod:`ast` module instead.
  Patch by Victor Stinner.

- bpo-43541: Fix a ``PyEval_EvalCodeEx()`` regression: fix reference
  counting on builtins. Patch by Victor Stinner.

- bpo-43244: Remove the ``symtable.h`` header file and the undocumented
  functions:

  * ``PyST_GetScope()``
  * ``PySymtable_Build()``
  * ``PySymtable_BuildObject()``
  * ``PySymtable_Free()``
  * ``Py_SymtableString()``
  * ``Py_SymtableStringObject()``

  The ``Py_SymtableString()`` function was part the stable ABI by mistake
  but it could not be used, because the ``symtable.h`` header file was
  excluded from the limited C API.

  The Python :mod:`symtable` module remains available and is unchanged.

  Patch by Victor Stinner.

- bpo-43244: Remove the ``PyAST_Validate()`` function. It is no longer
  possible to build a AST object (``mod_ty`` type) with the public C API.
  The function was already excluded from the limited C API (:pep:`384`).
  Patch by Victor Stinner.


What's New in Python 3.10.0 alpha 6?
====================================

*Release date: 2021-03-01*

Security
--------

- bpo-42967: Fix web cache poisoning vulnerability by defaulting the query
  args separator to ``&``, and allowing the user to choose a custom
  separator.

Core and Builtins
-----------------

- bpo-43321: Fix ``SystemError`` raised when ``PyArg_Parse*()`` is used with
  ``#`` but without ``PY_SSIZE_T_CLEAN`` defined.

- bpo-36346: ``PyArg_Parse*()`` functions now emits ``DeprecationWarning``
  when ``u`` or ``Z`` format is used. See :pep:`623` for detail.

- bpo-43277: Add a new :c:func:`PySet_CheckExact` function to the C-API to
  check if an object is an instance of :class:`set` but not an instance of a
  subtype. Patch by Pablo Galindo.

- bpo-42990: The :data:`types.FunctionType` constructor now inherits the
  current builtins if the *globals* dictionary has no ``"__builtins__"``
  key, rather than using ``{"None": None}`` as builtins: same behavior as
  :func:`eval` and :func:`exec` functions. Defining a function with ``def
  function(...): ...`` in Python is not affected, globals cannot be
  overridden with this syntax: it also inherits the current builtins. Patch
  by Victor Stinner.

- bpo-42990: Functions have a new ``__builtins__`` attribute which is used
  to look for builtin symbols when a function is executed, instead of
  looking into ``__globals__['__builtins__']``. Patch by Mark Shannon and
  Victor Stinner.

- bpo-43149: Improve the error message in the parser for exception groups
  without parentheses. Patch by Pablo Galindo.

- bpo-43121: Fixed an incorrect :exc:`SyntaxError` message for missing comma
  in literals. Patch by Pablo Galindo.

- bpo-42819: :mod:`readline`: Explicitly disable bracketed paste in the
  interactive interpreter, even if it's set in the inputrc, is enabled by
  default (eg GNU Readline 8.1), or a user calls
  ``readline.read_init_file()``. The Python REPL has not implemented
  bracketed paste support. Also, bracketed mode writes the ``"\x1b[?2004h"``
  escape sequence into stdout which causes test failures in applications
  that don't support it. It can still be explicitly enabled by calling
  ``readline.parse_and_bind("set enable-bracketed-paste on")``. Patch by
  Dustin Rodrigues.

- bpo-42808: Simple calls to ``type(object)`` are now faster due to the
  ``vectorcall`` calling convention. Patch by Dennis Sweeney.

- bpo-42217: Make the compiler merges same co_code and co_linetable objects
  in a module like already did for co_consts.

- bpo-41972: Substring search functions such as ``str1 in str2`` and
  ``str2.find(str1)`` now sometimes use the "Two-Way" string comparison
  algorithm to avoid quadratic behavior on long strings.

- bpo-42128: Implement :pep:`634` (structural pattern matching). Patch by
  Brandt Bucher.

- bpo-40692: In the :class:`concurrent.futures.ProcessPoolExecutor`,
  validate that :func:`multiprocess.synchronize` is available on a given
  platform and rely on that check in the :mod:`concurrent.futures` test
  suite so we can run tests that are unrelated to
  :class:`ProcessPoolExecutor` on those platforms.

- bpo-38302: If :func:`object.__ipow__` returns :const:`NotImplemented`, the
  operator will correctly fall back to :func:`object.__pow__` and
  :func:`object.__rpow__` as expected.

Library
-------

- bpo-43316: The ``python -m gzip`` command line application now properly
  fails when detecting an unsupported extension. It exits with a non-zero
  exit code and prints an error message to stderr.

- bpo-43317: Set the chunk size for the ``gzip`` module main function to
  io.DEFAULT_BUFFER_SIZE. This is slightly faster than the 1024 bytes
  constant that was used previously.

- bpo-43146: Handle None in single-arg versions of
  :func:`~traceback.print_exception` and
  :func:`~traceback.format_exception`.

- bpo-43260: Fix TextIOWrapper can not flush internal buffer forever after
  very large text is written.

- bpo-43258: Prevent needless allocation of :mod:`sqlite3` aggregate
  function context when no rows match an aggregate query. Patch by Erlend E.
  Aasland.

- bpo-43251: Improve :mod:`sqlite3` error handling:
  ``sqlite3_column_name()`` failures now result in :exc:`MemoryError`. Patch
  by Erlend E. Aasland.

- bpo-40956: Fix segfault in :meth:`sqlite3.Connection.backup` if no
  argument was provided. The regression was introduced by PR 23838. Patch by
  Erlend E. Aasland.

- bpo-43172: The readline module now passes its tests when built directly
  against libedit. Existing irreconcilable API differences remain in
  :func:`readline.get_begidx` and :func:`readline.get_endidx` behavior based
  on libreadline vs libedit use.

- bpo-43163: Fix a bug in :mod:`codeop` that was causing it to not ask for
  more input when multi-line snippets have unclosed parentheses. Patch by
  Pablo Galindo

- bpo-43162: deprecate unsupported ability to access enum members as
  attributes of other enum members

- bpo-43146: Fix recent regression in None argument handling in
  :mod:`~traceback` module functions.

- bpo-43102: The namedtuple __new__ method had its __builtins__ set to None
  instead of an actual dictionary.  This created problems for introspection
  tools.

- bpo-43106: Added :data:`~os.O_EVTONLY`, :data:`~os.O_FSYNC`,
  :data:`~os.O_SYMLINK` and :data:`~os.O_NOFOLLOW_ANY` for macOS. Patch by
  Dong-hee Na.

- bpo-42960: Adds :data:`resource.RLIMIT_KQUEUES` constant from FreeBSD to
  the :mod:`resource` module.

- bpo-42151: Make the pure Python implementation of
  :mod:`xml.etree.ElementTree` behave the same as the C implementation
  (:mod:`_elementree`) regarding default attribute values (by not setting
  ``specified_attributes=1``).

- bpo-29753: In ctypes, now packed bitfields are calculated properly and the
  first item of packed bitfields is now shrank correctly.

Documentation
-------------

- bpo-27646: Clarify that 'yield from <expr>' works with any iterable, not
  just iterators.

- bpo-36346: Update some deprecated unicode APIs which are documented as
  "will be removed in 4.0" to "3.12". See :pep:`623` for detail.

Tests
-----

- bpo-43288: Fix test_importlib to correctly skip Unicode file tests if the
  filesystem does not support them.

Build
-----

- bpo-43174: Windows build now uses ``/utf-8`` compiler option.

- bpo-43103: Add a new configure ``--without-static-libpython`` option to
  not build the ``libpythonMAJOR.MINOR.a`` static library and not install
  the ``python.o`` object file.

- bpo-13501: The configure script can now use *libedit* instead of
  *readline* with the command line option ``--with-readline=editline``.

- bpo-42603: Make configure script use pkg-config to detect the location of
  Tcl/Tk headers and libraries, used to build tkinter.

  On macOS, a Tcl/Tk configuration provided by pkg-config will be preferred
  over Tcl/Tk frameworks installed in ``/{System/,}Library/Frameworks``. If
  both exist and the latter is preferred, the appropriate ``--with-tcltk-*``
  configuration options need to be explicitly set.

- bpo-39448: Add the "regen-frozen" makefile target that regenerates the
  code for the frozen ``__hello__`` module.

Windows
-------

- bpo-43155: :c:func:`PyCMethod_New` is now present in ``python3.lib``.

macOS
-----

- bpo-41837: Update macOS installer build to use OpenSSL 1.1.1j.

IDLE
----

- bpo-43283: Document why printing to IDLE's Shell is often slower than
  printing to a system terminal and that it can be made faster by
  pre-formatting a single string before printing.

C API
-----

- bpo-43278: Always put compiler and system information on the first line of
  the REPL welcome message.

- bpo-43270: Remove the private ``_PyErr_OCCURRED()`` macro: use the public
  :c:func:`PyErr_Occurred` function instead.

- bpo-35134: Move odictobject.h, parser_interface.h, picklebufobject.h,
  pydebug.h, and pyfpe.h into the cpython/ directory. They must not be
  included directly, as they are already included by Python.h: :ref:`Include
  Files <api-includes>`.

- bpo-35134: Move pyarena.h, pyctype.h, and pytime.h into the cpython/
  directory. They must not be included directly, as they are already
  included by Python.h: :ref:`Include Files <api-includes>`.

- bpo-40170: :c:func:`PyExceptionClass_Name` is now always declared as a
  function, in order to hide implementation details. The macro accessed
  :c:member:`PyTypeObject.tp_name` directly.  Patch by Erlend E. Aasland.

- bpo-43239: The :c:func:`PyCFunction_New` function is now exported in the
  ABI when compiled with ``-fvisibility=hidden``.

- bpo-40170: :c:func:`PyIter_Check` is now always declared as a function, in
  order to hide implementation details. The macro accessed
  :c:member:`PyTypeObject.tp_iternext` directly. Patch by Erlend E. Aasland.

- bpo-40170: Convert :c:func:`PyDescr_IsData` macro to a function to hide
  implementation details: The macro accessed
  :c:member:`PyTypeObject.tp_descr_set` directly. Patch by Erlend E.
  Aasland.

- bpo-43181: Convert :c:func:`PyObject_TypeCheck` macro to a static inline
  function. Patch by Erlend E. Aasland.


What's New in Python 3.10.0 alpha 5?
====================================

*Release date: 2021-02-02*

Security
--------

- bpo-42938: Avoid static buffers when computing the repr of
  :class:`ctypes.c_double` and :class:`ctypes.c_longdouble` values.

Core and Builtins
-----------------

- bpo-42990: Refactor the ``PyEval_`` family of functions.

  * An new function ``_PyEval_Vector`` is added to simplify calls to Python from C.
  * ``_PyEval_EvalCodeWithName`` is removed
  * ``PyEval_EvalCodeEx`` is retained as part of the API, but is not used internally

- bpo-38631: Replace :c:func:`Py_FatalError` calls in the compiler with
  regular :exc:`SystemError` exceptions. Patch by Victor Stinner.

- bpo-42997: Improve error message for missing ":" before blocks. Patch by
  Pablo Galindo.

- bpo-43017: Improve error message in the parser when using un-parenthesised
  tuples in comprehensions. Patch by Pablo Galindo.

- bpo-42986: Fix parser crash when reporting syntax errors in f-string with
  newlines. Patch by Pablo Galindo.

- bpo-40176: Syntax errors for unterminated string literals now point to the
  start of the string instead of reporting EOF/EOL.

- bpo-42927: The inline cache for ``LOAD_ATTR`` now also optimizes access to
  attributes defined by ``__slots__``. This makes reading such attribute up
  to 30% faster.

- bpo-42864: Improve error messages in the parser when parentheses are not
  closed. Patch by Pablo Galindo.

- bpo-42924: Fix ``bytearray`` repetition incorrectly copying data from the
  start of the buffer, even if the data is offset within the buffer (e.g.
  after reassigning a slice at the start of the ``bytearray`` to a shorter
  byte string).

- bpo-42882: Fix the :c:func:`_PyUnicode_FromId` function
  (_Py_IDENTIFIER(var) API) when :c:func:`Py_Initialize` /
  :c:func:`Py_Finalize` is called multiple times: preserve
  ``_PyRuntime.unicode_ids.next_index`` value.

- bpo-42827: Fix a crash when working out the error line of a
  :exc:`SyntaxError` in some multi-line expressions.

- bpo-42823: frame.f_lineno is correct even if frame.f_trace is set to True

- bpo-37324: Remove deprecated aliases to
  :ref:`collections-abstract-base-classes` from the :mod:`collections`
  module.

- bpo-41994: Fixed possible leak in ``import`` when ``sys.modules`` is not a
  ``dict``.

- bpo-27772: In string formatting, preceding the *width* field by ``'0'`` no
  longer affects the default alignment for strings.

Library
-------

- bpo-43108: Fixed a reference leak in the :mod:`curses` module. Patch by
  Pablo Galindo

- bpo-43077: Update the bundled pip to 21.0.1 and setuptools to 52.0.0.

- bpo-41282: Deprecate ``distutils`` in documentation and add warning on
  import.

- bpo-43014: Improve performance of :mod:`tokenize` by 20-30%.  Patch by
  Anthony Sottile.

- bpo-42323: Fix :func:`math.nextafter` for NaN on AIX.

- bpo-42955: Add :data:`sys.stdlib_module_names`, containing the list of the
  standard library module names. Patch by Victor Stinner.

- bpo-42944: Fix ``random.Random.sample`` when ``counts`` argument is not
  ``None``.

- bpo-42934: Use :class:`~traceback.TracebackException`'s new ``compact``
  param in :class:`~unittest.TestResult` to reduce time and memory consumed
  by traceback formatting.

- bpo-42931: Add :func:`randbytes` to ``random.__all__``.

- bpo-38250: [Enum] Flags consisting of a single bit are now considered
  canonical, and will be the only flags returned from listing and iterating
  over a Flag class or a Flag member.  Multi-bit flags are considered
  aliases; they will be returned from lookups and operations that result in
  their value. Iteration for both Flag and Flag members is in definition
  order.

- bpo-42877: Added the ``compact`` parameter to the constructor of
  :class:`traceback.TracebackException` to reduce time and memory for use
  cases that only need to call :func:`TracebackException.format` and
  :func:`TracebackException.format_exception_only`.

- bpo-42923: The :c:func:`Py_FatalError` function and the
  :mod:`faulthandler` module now dump the list of extension modules on a
  fatal error.

- bpo-42848: Removed recursion from :class:`~traceback.TracebackException`
  to allow it to handle long exception chains.

- bpo-42901: [Enum] move member creation from ``EnumMeta.__new__`` to
  ``_proto_member.__set_name__``, allowing members to be created and visible
  in ``__init_subclass__``.

- bpo-42780: Fix os.set_inheritable() for O_PATH file descriptors on Linux.

- bpo-42866: Fix a reference leak in the ``getcodec()`` function of CJK
  codecs. Patch by Victor Stinner.

- bpo-42846: Convert the 6 CJK codec extension modules (_codecs_cn,
  _codecs_hk, _codecs_iso2022, _codecs_jp, _codecs_kr and _codecs_tw) to the
  multiphase initialization API (:pep:`489`). Patch by Victor Stinner.

- bpo-42851: remove __init_subclass__ support for Enum members

- bpo-42834: Make internal caches of the ``_json`` module compatible with
  subinterpreters.

- bpo-41748: Fix HTMLParser parsing rules for element attributes containing
  commas with spaces. Patch by Karl Dubost.

- bpo-40810: Require SQLite 3.7.15 or newer. Patch by Erlend E. Aasland.

- bpo-1635741: Convert the _multibytecodec extension module (CJK codecs) to
  multi-phase initialization (:pep:`489`).  Patch by Erlend E. Aasland.

- bpo-42802: The distutils ``bdist_wininst`` command deprecated in Python
  3.8 has been removed. The distutils ``bdist_wheel`` command is now
  recommended to distribute binary packages on Windows.

- bpo-24464: The undocumented built-in function
  ``sqlite3.enable_shared_cache`` is now deprecated, scheduled for removal
  in Python 3.12.  Its use is strongly discouraged by the SQLite3
  documentation.  Patch by Erlend E. Aasland.

- bpo-42384: Make pdb populate sys.path[0] exactly the same as regular
  python execution.

- bpo-42383: Fix pdb: previously pdb would fail to restart the debugging
  target if it was specified using a relative path and the current directory
  changed.

- bpo-42005: Fix CLI of :mod:`cProfile` and :mod:`profile` to catch
  :exc:`BrokenPipeError`.

- bpo-41604: Don't decrement the reference count of the previous user_ptr
  when set_panel_userptr fails.

- bpo-41149: Allow executing callables that have a boolean value of
  ``False`` when passed to :class:`Threading.thread` as the target. Patch
  contributed by Barney Stratford.

- bpo-38307: Add an 'end_lineno' attribute to the Class and Function objects
  that appear in the tree returned by pyclbr functions.  This and the
  existing 'lineno' attribute define the extent of class and def statements.
  Patch by Aviral Srivastava.

- bpo-39273: The ``BUTTON5_*`` constants are now exposed in the
  :mod:`curses` module if available.

- bpo-33289: Correct call to :mod:`tkinter.colorchooser` to return RGB
  triplet of ints instead of floats.  Patch by Cheryl Sabella.

Documentation
-------------

- bpo-40304: Fix doc for type(name, bases, dict).  Patch by Boris
  Verkhovskiy and Éric Araujo.

- bpo-42811: Updated importlib.utils.resolve_name() doc to use
  __spec__.parent instead of __package__. (Thanks Yair Frid.)

Tests
-----

- bpo-40823: Use :meth:`unittest.TestLoader().loadTestsFromTestCase` instead
  of :meth:`unittest.makeSuite` in :mod:`sqlite3` tests. Patch by Erlend E.
  Aasland.

- bpo-40810: In :mod:`sqlite3`, fix ``CheckTraceCallbackContent`` for SQLite
  pre 3.7.15.

Build
-----

- bpo-43031: Pass ``--timeout=$(TESTTIMEOUT)`` option to the default profile
  task ``./python -m test --pgo`` command.

- bpo-36143: ``make regen-all`` now also runs ``regen-keyword``. Patch by
  Victor Stinner.

- bpo-42874: Removed the grep -q and -E flags in the tzpath validation
  section of the configure script to better accommodate users of some
  platforms (specifically Solaris 10).

- bpo-31904: Add library search path by wr-cc in add_cross_compiling_paths()
  for VxWorks.

- bpo-42856: Add ``--with-wheel-pkg-dir=PATH`` option to the ``./configure``
  script. If specified, the :mod:`ensurepip` module looks for ``setuptools``
  and ``pip`` wheel packages in this directory: if both are present, these
  wheel packages are used instead of ensurepip bundled wheel packages.

  Some Linux distribution packaging policies recommend against bundling
  dependencies. For example, Fedora installs wheel packages in the
  ``/usr/share/python-wheels/`` directory and don't install the
  ``ensurepip._bundled`` package.

Windows
-------

- bpo-41837: Updated Windows installer to include OpenSSL 1.1.1i

- bpo-42584: Upgrade Windows installer to use SQLite 3.34.0.

macOS
-----

- bpo-42504: Ensure that the value of
  sysconfig.get_config_var('MACOSX_DEPLOYMENT_TARGET') is always a string,
  even in when the value is parsable as an integer.

IDLE
----

- bpo-43008: Make IDLE invoke :func:`sys.excepthook` in normal, 2-process
  mode. Patch by Ken Hilton.

- bpo-33065: Fix problem debugging user classes with __repr__ method.

- bpo-23544: Disable Debug=>Stack Viewer when user code is running or
  Debugger is active, to prevent hang or crash.  Patch by Zackery Spytz.

- bpo-32631: Finish zzdummy example extension module: make menu entries
  work; add docstrings and tests with 100% coverage.

C API
-----

- bpo-42979: When Python is built in debug mode (with C assertions), calling
  a type slot like ``sq_length`` (``__len__()`` in Python) now fails with a
  fatal error if the slot succeeded with an exception set, or failed with no
  exception set. The error message contains the slot, the type name, and the
  current exception (if an exception is set). Patch by Victor Stinner.

- bpo-43030: Fixed a compiler warning in :c:func:`Py_UNICODE_ISSPACE()` on
  platforms with signed ``wchar_t``.


What's New in Python 3.10.0 alpha 4?
====================================

*Release date: 2021-01-04*

Core and Builtins
-----------------

- bpo-42814: Fix undefined behavior in ``Objects/genericaliasobject.c``.

- bpo-42806: Fix the column offsets for f-strings :mod:`ast` nodes
  surrounded by parentheses and for nodes that spawn multiple lines. Patch
  by Pablo Galindo.

- bpo-40631: Fix regression where a single parenthesized starred expression
  was a valid assignment target.

- bpo-27794: Improve the error message for failed writes/deletes to property
  objects. When possible, the attribute name is now shown. Patch provided by
  Yurii Karabas.

- bpo-42745: Make the type attribute lookup cache per-interpreter. Patch by
  Victor Stinner.

- bpo-42246: Jumps to jumps are not eliminated when it would break PEP 626.

- bpo-42246: Make sure that the ``f_lasti`` and ``f_lineno`` attributes of a
  frame are set correctly when an exception is raised or re-raised. Required
  for PEP 626.

- bpo-32381: The coding cookie (ex: ``# coding: latin1``) is now ignored in
  the command passed to the :option:`-c` command line option. Patch by
  Victor Stinner.

- bpo-30858: Improve error location in expressions that contain assignments.
  Patch by Pablo Galindo and Lysandros Nikolaou.

- bpo-42615: Remove jump commands made redundant by the deletion of
  unreachable bytecode blocks

- bpo-42639: Make the :mod:`atexit` module state per-interpreter. It is now
  safe have more than one :mod:`atexit` module instance. Patch by Dong-hee
  Na and Victor Stinner.

- bpo-32381: Fix encoding name when running a ``.pyc`` file on Windows:
  :c:func:`PyRun_SimpleFileExFlags()` now uses the correct encoding to
  decode the filename.

- bpo-42195: The ``__args__`` of the parameterized generics for
  :data:`typing.Callable` and :class:`collections.abc.Callable` are now
  consistent.  The ``__args__`` for :class:`collections.abc.Callable` are
  now flattened while :data:`typing.Callable`'s have not changed.  To allow
  this change, :class:`types.GenericAlias` can now be subclassed and
  ``collections.abc.Callable``'s ``__class_getitem__`` will now return a
  subclass of ``types.GenericAlias``.  Tests for typing were also updated to
  not subclass things like ``Callable[..., T]`` as that is not a valid base
  class.  Finally, both ``Callable``\ s no longer validate their
  ``argtypes``, in ``Callable[[argtypes], resulttype]`` to prepare for
  :pep:`612`.  Patch by Ken Jin.

- bpo-40137: Convert functools module to use
  :c:func:`PyType_FromModuleAndSpec`.

- bpo-40077: Convert :mod:`array` to use heap types, and establish module
  state for these.

- bpo-42008: Fix _random.Random() seeding.

- bpo-1635741: Port the :mod:`pyexpat` extension module to multi-phase
  initialization (:pep:`489`).

- bpo-40521: Make the Unicode dictionary of interned strings compatible with
  subinterpreters. Patch by Victor Stinner.

- bpo-39465: Make :c:func:`_PyUnicode_FromId` function compatible with
  subinterpreters. Each interpreter now has an array of identifier objects
  (interned strings decoded from UTF-8). Patch by Victor Stinner.

Library
-------

- bpo-42257: Handle empty string in variable executable in
  platform.libc_ver()

- bpo-42772: randrange() now raises a TypeError when step is specified
  without a stop argument.  Formerly, it silently ignored the step argument.

- bpo-42759: Fixed equality comparison of :class:`tkinter.Variable` and
  :class:`tkinter.font.Font`. Objects which belong to different Tcl
  interpreters are now always different, even if they have the same name.

- bpo-42756: Configure LMTP Unix-domain socket to use socket global default
  timeout when a timeout is not explicitly provided.

- bpo-23328: Allow / character in username, password fields on _PROXY
  envars.

- bpo-42740: :func:`typing.get_args` and :func:`typing.get_origin` now
  support :pep:`604` union types and :pep:`612` additions to ``Callable``.

- bpo-42655: :mod:`subprocess` *extra_groups* is now correctly passed into
  setgroups() system call.

- bpo-42727: ``EnumMeta.__prepare__`` now accepts ``**kwds`` to properly
  support ``__init_subclass__``

- bpo-38308: Add optional *weights* to *statistics.harmonic_mean()*.

- bpo-42721: When simple query dialogs (:mod:`tkinter.simpledialog`),
  message boxes (:mod:`tkinter.messagebox`) or color choose dialog
  (:mod:`tkinter.colorchooser`) are created without arguments *master* and
  *parent*, and the default root window is not yet created, and
  :func:`~tkinter.NoDefaultRoot` was not called, a new temporal hidden root
  window will be created automatically. It will not be set as the default
  root window and will be destroyed right after closing the dialog window.
  It will help to use these simple dialog windows in programs which do not
  need other GUI.

- bpo-25246: Optimized :meth:`collections.deque.remove`.

- bpo-35728: Added a root parameter to :func:`tkinter.font.nametofont`.

- bpo-15303: :mod:`tkinter` supports now widgets with boolean value False.

- bpo-42681: Fixed range checks for color and pair numbers in :mod:`curses`.

- bpo-42685: Improved placing of simple query windows in Tkinter (such as
  :func:`tkinter.simpledialog.askinteger`). They are now centered at the
  center of the parent window if it is specified and shown, otherwise at the
  center of the screen.

- bpo-9694: Argparse help no longer uses the confusing phrase, "optional
  arguments". It uses "options" instead.

- bpo-1635741: Port the :mod:`_thread` extension module to the multiphase
  initialization API (:pep:`489`) and convert its static types to heap
  types.

- bpo-37961: Fix crash in :func:`tracemalloc.Traceback.__repr__` (regressed
  in Python 3.9).

- bpo-42630: :mod:`tkinter` functions and constructors which need a default
  root window raise now :exc:`RuntimeError` with descriptive message instead
  of obscure :exc:`AttributeError` or :exc:`NameError` if it is not created
  yet or cannot be created automatically.

- bpo-42639: :func:`atexit._run_exitfuncs` now logs callback exceptions
  using :data:`sys.unraisablehook`, rather than logging them directly into
  :data:`sys.stderr` and raise the last exception.

- bpo-42644: ``logging.disable`` will now validate the types and value of
  its parameter. It also now accepts strings representing the levels (as
  does ``loging.setLevel``) instead of only the numerical values.

- bpo-42639: At Python exit, if a callback registered with
  :func:`atexit.register` fails, its exception is now logged. Previously,
  only some exceptions were logged, and the last exception was always
  silently ignored.

- bpo-36541: Fixed lib2to3.pgen2 to be able to parse PEP-570 positional only
  argument syntax.

- bpo-42382: In ``importlib.metadata``: -  ``EntryPoint`` objects now expose
  a ``.dist`` object referencing the ``Distribution`` when constructed from
  a ``Distribution``. - Add support for package discovery under package
  normalization rules. - The object returned by ``metadata()`` now has a
  formally defined protocol called ``PackageMetadata`` with declared support
  for the ``.get_all()`` method. - Synced with importlib_metadata 3.3.

- bpo-41877: A check is added against misspellings of autospect, auto_spec
  and set_spec being passed as arguments to patch, patch.object and
  create_autospec.

- bpo-39717: [tarfile] update nested exception raising to use ``from None``
  or ``from e``

- bpo-41877: AttributeError for suspected misspellings of assertions on
  mocks are now pointing out that the cause are misspelled assertions and
  also what to do if the misspelling is actually an intended attribute name.
  The unittest.mock document is also updated to reflect the current set of
  recognised misspellings.

- bpo-41559: Implemented :pep:`612`: added ``ParamSpec`` and ``Concatenate``
  to :mod:`typing`.  Patch by Ken Jin.

- bpo-42385: StrEnum: fix _generate_next_value_ to return a str

- bpo-31904: Define THREAD_STACK_SIZE for VxWorks.

- bpo-34750: [Enum] `_EnumDict.update()` is now supported

- bpo-42517: Enum: private names do not become members / do not generate
  errors -- they remain normal attributes

- bpo-42678: ``Enum``: call ``__init_subclass__`` after members have been
  added

- bpo-28964: :func:`ast.literal_eval` adds line number information (if
  available) in error message for malformed nodes.

- bpo-42470: :func:`random.sample` no longer warns on a sequence which is
  also a set.

- bpo-31904: :func:`posixpath.expanduser` returns the input *path* unchanged
  if user home directory is None on VxWorks.

- bpo-42388: Fix subprocess.check_output(..., input=None) behavior when
  text=True to be consistent with that of the documentation and
  universal_newlines=True.

- bpo-34463: Fixed discrepancy between :mod:`traceback` and the interpreter
  in formatting of SyntaxError with lineno not set (:mod:`traceback` was
  changed to match interpreter).

- bpo-42393: Raise :exc:`OverflowError` instead of silent truncation in
  :meth:`socket.ntohs` and :meth:`socket.htons`.  Silent truncation was
  deprecated in Python 3.7. Patch by Erlend E. Aasland

- bpo-42222: Harmonized :func:`random.randrange` argument handling to match
  :func:`range`.

  * The integer test and conversion in ``randrange()`` now uses
    :func:`operator.index`.
  * Non-integer arguments to ``randrange()`` are deprecated.
  * The ``ValueError`` is deprecated in favor of a ``TypeError``.
  * It now runs a little faster than before.

  (Contributed by Raymond Hettinger and Serhiy Storchaka.)

- bpo-42163: Restore compatibility for ``uname_result`` around deepcopy and
  _replace.

- bpo-42090: ``zipfile.Path.joinpath`` now accepts arbitrary arguments, same
  as ``pathlib.Path.joinpath``.

- bpo-1635741: Port the _csv module to the multi-phase initialization API
  (:pep:`489`).

- bpo-42059: :class:`typing.TypedDict` types created using the alternative
  call-style syntax now correctly respect the ``total`` keyword argument
  when setting their ``__required_keys__`` and ``__optional_keys__`` class
  attributes.

- bpo-41960: Add ``globalns`` and ``localns`` parameters to the
  :func:`inspect.signature` and :meth:`inspect.Signature.from_callable`.

- bpo-41907: fix ``format()`` behavior for ``IntFlag``

- bpo-41891: Ensure asyncio.wait_for waits for task completion

- bpo-24792: Fixed bug where :mod:`zipimporter` sometimes reports an
  incorrect cause of import errors.

- bpo-31904: Fix site and sysconfig modules for VxWorks RTOS which has no
  home directories.

- bpo-41462: Add :func:`os.set_blocking()` support for VxWorks RTOS.

- bpo-40219: Lowered :class:`tkinter.ttk.LabeledScale` dummy widget to
  prevent hiding part of the content label.

- bpo-37193: Fixed memory leak in ``socketserver.ThreadingMixIn`` introduced
  in Python 3.7.

- bpo-39068: Fix initialization race condition in :func:`a85encode` and
  :func:`b85encode` in :mod:`base64`. Patch by Brandon Stansbury.

Documentation
-------------

- bpo-17140: Add documentation for the
  :class:`multiprocessing.pool.ThreadPool` class.

- bpo-34398: Prominently feature listings from the glossary in documentation
  search results. Patch by Ammar Askar.

Tests
-----

- bpo-42794: Update test_nntplib to use official group name of news.aioe.org
  for testing. Patch by Dong-hee Na.

- bpo-31904: Skip some asyncio tests on VxWorks.

- bpo-42641: Enhance ``test_select.test_select()``: it now takes 500 ms
  rather than 10 seconds. Use Python rather than a shell to make the test
  more portable.

- bpo-31904: Skip some tests in _test_all_chown_common() on VxWorks.

- bpo-42199: Fix bytecode helper assertNotInBytecode.

- bpo-41443: Add more attribute checking in test_posix.py

- bpo-31904: Disable os.popen and impacted tests on VxWorks

- bpo-41439: Port test_ssl and test_uuid to VxWorks RTOS.

Build
-----

- bpo-42692: Fix __builtin_available check on older compilers. Patch by
  Joshua Root.

- bpo-27640: Added ``--disable-test-modules`` option to the ``configure``
  script: don't build nor install test modules. Patch by Xavier de Gaye,
  Thomas Petazzoni and Peixing Xin.

- bpo-42604: Now all platforms use a value for the "EXT_SUFFIX" build
  variable derived from SOABI (for instance in freeBSD, "EXT_SUFFIX" is now
  ".cpython-310d.so" instead of ".so"). Previously only Linux, Mac and
  VxWorks were using a value for "EXT_SUFFIX" that included "SOABI".

- bpo-42598: Fix implicit function declarations in configure which could
  have resulted in incorrect configuration checks.  Patch contributed by
  Joshua Root.

- bpo-31904: Enable libpython3.so for VxWorks.

- bpo-29076: Add fish shell support to macOS installer.

macOS
-----

- bpo-42361: Update macOS installer build to use Tcl/Tk 8.6.11 (rc2,
  expected to be final release).

- bpo-41837: Update macOS installer build to use OpenSSL 1.1.1i.

- bpo-42584: Update macOS installer to use SQLite 3.34.0.

Tools/Demos
-----------

- bpo-42726: Fixed Python 3 compatibility issue with gdb/libpython.py
  handling of attribute dictionaries.

- bpo-42613: Fix ``freeze.py`` tool to use the prope config and library
  directories. Patch by Victor Stinner.

C API
-----

- bpo-42591: Export the :c:func:`Py_FrozenMain` function: fix a Python 3.9.0
  regression. Python 3.9 uses ``-fvisibility=hidden`` and the function was
  not exported explicitly and so not exported.

- bpo-32381: Remove the private :c:func:`_Py_fopen` function which is no
  longer needed. Use :c:func:`_Py_wfopen` or :c:func:`_Py_fopen_obj`
  instead. Patch by Victor Stinner.

- bpo-1635741: Port :mod:`resource` extension module to module state

- bpo-42111: Update the ``xxlimited`` module to be a better example of how
  to use the limited C API.

- bpo-40052: Fix an alignment build warning/error in function
  ``PyVectorcall_Function()``. Patch by Andreas Schneider, Antoine Pitrou
  and Petr Viktorin.


What's New in Python 3.10.0 alpha 3?
====================================

*Release date: 2020-12-07*

Security
--------

- bpo-40791: Add ``volatile`` to the accumulator variable in
  ``hmac.compare_digest``, making constant-time-defeating optimizations less
  likely.

Core and Builtins
-----------------

- bpo-42576: ``types.GenericAlias`` will now raise a ``TypeError`` when
  attempting to initialize with a keyword argument.  Previously, this would
  cause the interpreter to crash if the interpreter was compiled with debug
  symbols. This does not affect interpreters compiled for release.  Patch by
  Ken Jin.

- bpo-42536: Several built-in and standard library types now ensure that
  their internal result tuples are always tracked by the :term:`garbage
  collector <garbage collection>`:

  - :meth:`collections.OrderedDict.items() <collections.OrderedDict>`

  - :meth:`dict.items`

  - :func:`enumerate`

  - :func:`functools.reduce`

  - :func:`itertools.combinations`

  - :func:`itertools.combinations_with_replacement`

  - :func:`itertools.permutations`

  - :func:`itertools.product`

  - :func:`itertools.zip_longest`

  - :func:`zip`

  Previously, they could have become untracked by a prior garbage
  collection. Patch by Brandt Bucher.

- bpo-42500: Improve handling of exceptions near recursion limit. Converts a
  number of Fatal Errors in RecursionErrors.

- bpo-42246: PEP 626: After a return, the f_lineno attribute of a frame is
  always the last line executed.

- bpo-42435: Speed up comparison of bytes objects with non-bytes objects
  when option :option:`-b` is specified. Speed up comparison of bytarray
  objects with non-buffer object.

- bpo-1635741: Port the ``_warnings`` extension module to the multi-phase
  initialization API (:pep:`489`). Patch by Victor Stinner.

- bpo-41686: On Windows, the ``SIGINT`` event, ``_PyOS_SigintEvent()``, is
  now created even if Python is configured to not install signal handlers
  (if :c:member:`PyConfig.install_signal_handlers` equals to 0, or
  ``Py_InitializeEx(0)``).

- bpo-42381: Allow assignment expressions in set literals and set
  comprehensions as per PEP 572. Patch by Pablo Galindo.

- bpo-42202: Change function parameters annotations internal representation
  to tuple of strings. Patch provided by Yurii Karabas.

- bpo-42374: Fix a regression introduced by the new parser, where an
  unparenthesized walrus operator was not allowed within generator
  expressions.

- bpo-42316: Allow an unparenthesized walrus in subscript indexes.

- bpo-42349: Make sure that the compiler front-end produces a well-formed
  control flow graph. Be be more aggressive in the compiler back-end, as it
  is now safe to do so.

- bpo-42296: On Windows, fix a regression in signal handling which prevented
  to interrupt a program using CTRL+C. The signal handler can be run in a
  thread different than the Python thread, in which case the test deciding
  if the thread can handle signals is wrong.

- bpo-42332: :class:`types.GenericAlias` objects can now be the targets of
  weakrefs.

- bpo-42282: Optimise constant subexpressions that appear as part of named
  expressions (previously the AST optimiser did not descend into named
  expressions). Patch by Nick Coghlan.

- bpo-42266: Fixed a bug with the LOAD_ATTR opcode cache that was not
  respecting monkey-patching a class-level attribute to make it a
  descriptor. Patch by Pablo Galindo.

- bpo-40077: Convert :mod:`queue` to use heap types.

- bpo-42246: Improved accuracy of line tracing events and f_lineno attribute
  of Frame objects. See PEP 626 for details.

- bpo-40077: Convert :mod:`mmap` to use heap types.

- bpo-42233: Allow ``GenericAlias`` objects to use :ref:`union type
  expressions <types-union>`. This allows expressions like ``list[int] |
  dict[float, str]`` where previously a ``TypeError`` would have been
  thrown.  This also fixes union type expressions not de-duplicating
  ``GenericAlias`` objects. (Contributed by Ken Jin in :issue:`42233`.)

- bpo-26131: The import system triggers a `ImportWarning` when it falls back
  to using `load_module()`.

Library
-------

- bpo-5054: CGIHTTPRequestHandler.run_cgi() HTTP_ACCEPT improperly parsed.
  Replace the special purpose getallmatchingheaders with generic get_all
  method and add relevant tests.

  Original Patch by Martin Panter. Modified by Senthil Kumaran.

- bpo-42562: Fix issue when dis failed to parse function that has no line
  numbers. Patch provided by Yurii Karabas.

- bpo-17735: :func:`inspect.findsource` now raises :exc:`OSError` instead of
  :exc:`IndexError` when :attr:`co_lineno` of a code object is greater than
  the file length. This can happen, for example, when a file is edited after
  it was imported.  PR by Irit Katriel.

- bpo-42116: Fix handling of trailing comments by :func:`inspect.getsource`.

- bpo-42532: Remove unexpected call of ``__bool__`` when passing a
  ``spec_arg`` argument to a Mock.

- bpo-38200: Added itertools.pairwise()

- bpo-41818: Fix test_master_read() so that it succeeds on all platforms
  that either raise OSError or return b"" upon reading from master.

- bpo-42487: ChainMap.__iter__ no longer calls __getitem__ on underlying
  maps

- bpo-42482: :class:`~traceback.TracebackException` no longer holds a
  reference to the exception's traceback object. Consequently, instances of
  TracebackException for equivalent but non-equal exceptions now compare as
  equal.

- bpo-41818: Make test_openpty() avoid unexpected success due to number of
  rows and/or number of columns being == 0.

- bpo-42392: Remove loop parameter from ``asyncio.subprocess`` and
  ``asyncio.tasks`` functions. Patch provided by Yurii Karabas.

- bpo-42392: Remove loop parameter from ``asyncio.open_connection`` and
  ``asyncio.start_server`` functions. Patch provided by Yurii Karabas.

- bpo-28468: Add :func:`platform.freedesktop_os_release` function to parse
  freedesktop.org ``os-release`` files.

- bpo-42299: Removed the ``formatter`` module, which was deprecated in
  Python 3.4. It is somewhat obsolete, little used, and not tested. It was
  originally scheduled to be removed in Python 3.6, but such removals were
  delayed until after Python 2.7 EOL. Existing users should copy whatever
  classes they use into their code. Patch by Dong-hee Na and and Terry J.
  Reedy.

- bpo-26131: Deprecate zipimport.zipimporter.load_module() in favour of
  exec_module().

- bpo-41818: Updated tests for the pty library. test_basic() has been
  changed to test_openpty(); this additionally checks if slave termios and
  slave winsize are being set properly by pty.openpty(). In order to add
  support for FreeBSD, NetBSD, OpenBSD, and Darwin, this also adds
  test_master_read(), which demonstrates that pty.spawn() should not depend
  on an OSError to exit from its copy loop.

- bpo-42392: Remove loop parameter from ``__init__`` in all
  ``asyncio.locks`` and ``asyncio.Queue`` classes. Patch provided by Yurii
  Karabas.

- bpo-15450: Make :class:`filecmp.dircmp` respect subclassing. Now the
  :attr:`filecmp.dircmp.subdirs` behaves as expected when subclassing
  dircmp.

- bpo-42413: The exception :exc:`socket.timeout` is now an alias of
  :exc:`TimeoutError`.

- bpo-31904: Support signal module on VxWorks.

- bpo-42406: We fixed an issue in `pickle.whichmodule` in which importing
  `multiprocessing` could change the how pickle identifies which module an
  object belongs to, potentially breaking the unpickling of those objects.

- bpo-42403: Simplify the :mod:`importlib` external bootstrap code:
  ``importlib._bootstrap_external`` now uses regular imports to import
  builtin modules. When it is imported, the builtin :func:`__import__()`
  function is already fully working and so can be used to import builtin
  modules like :mod:`sys`. Patch by Victor Stinner.

- bpo-1635741: Convert _sre module types to heap types (PEP 384). Patch by
  Erlend E. Aasland.

- bpo-42375: subprocess module update for DragonFlyBSD support.

- bpo-41713: Port the ``_signal`` extension module to the multi-phase
  initialization API (:pep:`489`). Patch by Victor Stinner and Mohamed
  Koubaa.

- bpo-37205: :func:`time.time()`, :func:`time.perf_counter()` and
  :func:`time.monotonic()` functions can no longer fail with a Python fatal
  error, instead raise a regular Python exception on failure.

- bpo-42328: Fixed :meth:`tkinter.ttk.Style.map`. The function accepts now
  the representation of the default state as empty sequence (as returned by
  ``Style.map()``). The structure of the result is now the same on all
  platform and does not depend on the value of ``wantobjects``.

- bpo-42345: Fix various issues with ``typing.Literal`` parameter handling
  (flatten, deduplicate, use type to cache key). Patch provided by Yurii
  Karabas.

- bpo-37205: :func:`time.perf_counter()` on Windows and
  :func:`time.monotonic()` on macOS are now system-wide. Previously, they
  used an offset computed at startup to reduce the precision loss caused by
  the float type. Use :func:`time.perf_counter_ns()` and
  :func:`time.monotonic_ns()` added in Python 3.7 to avoid this precision
  loss.

- bpo-42318: Fixed support of non-BMP characters in :mod:`tkinter` on macOS.

- bpo-42350: Fix the :class:`threading.Thread` class at fork: do nothing if
  the thread is already stopped (ex: fork called at Python exit).
  Previously, an error was logged in the child process.

- bpo-42333: Port _ssl extension module to heap types.

- bpo-42014: The ``onerror`` callback from ``shutil.rmtree`` now receives
  correct function when ``os.open`` fails.

- bpo-42237: Fix `os.sendfile()` on illumos.

- bpo-42308: Add :data:`threading.__excepthook__` to allow retrieving the
  original value of :func:`threading.excepthook` in case it is set to a
  broken or a different value. Patch by Mario Corchero.

- bpo-42131: Implement PEP 451/spec methods on zipimport.zipimporter:
  find_spec(), create_module(), and exec_module().

  This also allows for the documented deprecation of find_loader(),
  find_module(), and load_module().

- bpo-41877: Mock objects which are not unsafe will now raise an
  AttributeError if an attribute with the prefix asert, aseert, or assrt is
  accessed, in addition to this already happening for the prefixes assert or
  assret.

- bpo-42264: ``sqlite3.OptimizedUnicode`` has been undocumented and obsolete
  since Python 3.3, when it was made an alias to :class:`str`.  It is now
  deprecated, scheduled for removal in Python 3.12.

- bpo-42251: Added :func:`threading.gettrace` and
  :func:`threading.getprofile` to retrieve the functions set by
  :func:`threading.settrace` and :func:`threading.setprofile` respectively.
  Patch by Mario Corchero.

- bpo-42249: Fixed writing binary Plist files larger than 4 GiB.

- bpo-42236: On Unix, the :func:`os.device_encoding` function now returns
  ``'UTF-8'`` rather than the device encoding if the :ref:`Python UTF-8 Mode
  <utf8-mode>` is enabled.

- bpo-41754: webbrowser: Ignore *NotADirectoryError* when calling
  ``xdg-settings``.

- bpo-42183: Fix a stack overflow error for asyncio Task or Future repr().

  The overflow occurs under some circumstances when a Task or Future
  recursively returns itself.

- bpo-42140: Improve asyncio.wait function to create the futures set just
  one time.

- bpo-42133: Update various modules in the stdlib to fall back on
  `__spec__.loader` when `__loader__` isn't defined on a module.

- bpo-26131: The `load_module()` methods found in importlib now trigger a
  DeprecationWarning.

- bpo-39825: Windows: Change ``sysconfig.get_config_var('EXT_SUFFIX')`` to
  the expected full ``platform_tag.extension`` format. Previously it was
  hard-coded to ``.pyd``, now it is compatible with ``distutils.sysconfig``
  and will result in something like ``.cp38-win_amd64.pyd``. This brings
  windows into conformance with the other platforms.

- bpo-26389: The :func:`traceback.format_exception`,
  :func:`traceback.format_exception_only`, and
  :func:`traceback.print_exception` functions can now take an exception
  object as a positional-only argument.

- bpo-41889: Enum: fix regression involving inheriting a multiply inherited
  enum

- bpo-41861: Convert :mod:`sqlite3` to use heap types (PEP 384). Patch by
  Erlend E. Aasland.

- bpo-40624: Added support for the XPath ``!=`` operator in xml.etree

- bpo-28850: Fix :meth:`pprint.PrettyPrinter.format` overrides being ignored
  for contents of small containers. The :func:`pprint._safe_repr` function
  was removed.

- bpo-41625: Expose the :c:func:`splice` as :func:`os.splice` in the
  :mod:`os` module. Patch by Pablo Galindo

- bpo-34215: Clarify the error message for
  :exc:`asyncio.IncompleteReadError` when ``expected`` is ``None``.

- bpo-41543: Add async context manager support for contextlib.nullcontext.

- bpo-21041: :attr:`pathlib.PurePath.parents` now supports negative
  indexing. Patch contributed by Yaroslav Pankovych.

- bpo-41332: Added missing connect_accepted_socket() method to
  ``asyncio.AbstractEventLoop``.

- bpo-12800: Extracting a symlink from a tarball should succeed and
  overwrite the symlink if it already exists. The fix is to remove the
  existing file or symlink before extraction. Based on patch by Chris AtLee,
  Jeffrey Kintscher, and Senthil Kumaran.

- bpo-40968: :mod:`urllib.request` and :mod:`http.client` now send
  ``http/1.1`` ALPN extension during TLS handshake when no custom context is
  supplied.

- bpo-41001: Add func:`os.eventfd` to provide a low level interface for
  Linux's event notification file descriptor.

- bpo-40816: Add AsyncContextDecorator to contextlib to support async
  context manager as a decorator.

- bpo-40550: Fix time-of-check/time-of-action issue in
  subprocess.Popen.send_signal.

- bpo-39411: Add an ``is_async`` identifier to :mod:`pyclbr`'s ``Function``
  objects. Patch by Batuhan Taskaya

- bpo-35498: Add slice support to :attr:`pathlib.PurePath.parents`.

Documentation
-------------

- bpo-42238: Tentative to deprecate ``make suspicious`` by first removing it
  from the CI and documentation builds, but keeping it around for manual
  uses.

- bpo-42153: Fix the URL for the IMAP protocol documents.

- bpo-41028: Language and version switchers, previously maintained in every
  cpython branches, are now handled by docsbuild-script.

Tests
-----

- bpo-41473: Re-enable test_gdb on gdb 9.2 and newer:
  https://bugzilla.redhat.com/show_bug.cgi?id=1866884 bug is fixed in gdb
  10.1.

- bpo-42553: Fix ``test_asyncio.test_call_later()`` race condition: don't
  measure asyncio performance in the ``call_later()`` unit test. The test
  failed randomly on the CI.

- bpo-31904: Fix test_netrc on VxWorks: create temporary directories using
  temp_cwd().

- bpo-31904: skip test_getaddrinfo_ipv6_scopeid_symbolic and
  test_getnameinfo_ipv6_scopeid_symbolic on VxWorks

- bpo-31904: skip test_test of test_mailcap on VxWorks

- bpo-31904: add shell requirement for test_pipes

- bpo-31904: skip some tests related to fifo on VxWorks

- bpo-31904: Fix test_doctest.py failures for VxWorks.

- bpo-40754: Include ``_testinternalcapi`` module in Windows installer for
  test suite

- bpo-41561: test_ssl: skip test_min_max_version_mismatch when TLS 1.0 is
  not available

- bpo-31904: Fix os module failures for VxWorks RTOS.

- bpo-31904: Fix fifo test cases for VxWorks RTOS.

Build
-----

- bpo-31904: remove libnet dependency from detect_socket() for VxWorks

- bpo-42398: Fix a race condition in "make regen-all" when make -jN option
  is used to run jobs in parallel. The clinic.py script now only use atomic
  write to write files. Moveover, generated files are now left unchanged if
  the content does not change, to not change the file modification time.

- bpo-41617: Fix building ``pycore_bitutils.h`` internal header on old clang
  version without ``__builtin_bswap16()`` (ex: Xcode 4.6.3 on Mac OS X
  10.7). Patch by Joshua Root and Victor Stinner.

- bpo-38823: It is no longer possible to build the ``_ctypes`` extension
  module without :c:type:`wchar_t` type: remove ``CTYPES_UNICODE`` macro.
  Anyway, the :c:type:`wchar_t` type is required to build Python. Patch by
  Victor Stinner.

- bpo-42087: Support was removed for AIX 5.3 and below. See :issue:`40680`.

- bpo-40998: Addressed three compiler warnings found by undefined behavior
  sanitizer (ubsan).

Windows
-------

- bpo-42120: Remove macro definition of ``copysign`` (to ``_copysign``) in
  headers.

- bpo-38506: The Windows launcher now properly handles Python 3.10 when
  listing installed Python versions.

macOS
-----

- bpo-42504: Fix build on macOS Big Sur when MACOSX_DEPLOYMENT_TARGET=11

- bpo-41116: Ensure distutils.unixxcompiler.find_library_file can find
  system provided libraries on macOS 11.

- bpo-41100: Add support for macOS 11 and Apple Silicon systems.

  It is now possible to build "Universal 2" binaries using
  "--enable-universalsdk --with-universal-archs=universal2".

  Binaries build on later macOS versions can be deployed back to older
  versions (tested up to macOS 10.9), when using the correct deployment
  target. This is tested using Xcode 11 and later.

- bpo-42232: Added Darwin specific madvise options to mmap module.

- bpo-38443: The ``--enable-universalsdk`` and ``--with-universal-archs``
  options for the configure script now check that the specified
  architectures can be used.

IDLE
----

- bpo-42508: Keep IDLE running on macOS.  Remove obsolete workaround that
  prevented running files with shortcuts when using new universal2
  installers built on macOS 11.

- bpo-42426: Fix reporting offset of the RE error in searchengine.

- bpo-42415: Get docstrings for IDLE calltips more often by using
  inspect.getdoc.

Tools/Demos
-----------

- bpo-42212: The smelly.py script now also checks the Python dynamic library
  and extension modules, not only the Python static library. Make also the
  script more verbose: explain what it does.

- bpo-36310: Allow :file:`Tools/i18n/pygettext.py` to detect calls to
  ``gettext`` in f-strings.

C API
-----

- bpo-42423: The :c:func:`PyType_FromSpecWithBases` and
  :c:func:`PyType_FromModuleAndSpec` functions now accept a single class as
  the *bases* argument.

- bpo-1635741: Port :mod:`select` extension module to multiphase
  initialization (:pep:`489`).

- bpo-1635741: Port _posixsubprocess extension module to multiphase
  initialization (:pep:`489`).

- bpo-1635741: Port _posixshmem extension module to multiphase
  initialization (:pep:`489`)

- bpo-1635741: Port _struct extension module to multiphase initialization
  (:pep:`489`)

- bpo-1635741: Port :mod:`spwd` extension module to multiphase
  initialization (:pep:`489`)

- bpo-1635741: Port :mod:`gc` extension module to multiphase initialization
  (:pep:`489`)

- bpo-1635741: Port _queue extension module to multiphase initialization
  (:pep:`489`)

- bpo-39573: Convert :c:func:`Py_TYPE` and :c:func:`Py_SIZE` back to macros
  to allow using them as an l-value. Many third party C extension modules
  rely on the ability of using Py_TYPE() and Py_SIZE() to set an object type
  and size: ``Py_TYPE(obj) = type;`` and ``Py_SIZE(obj) = size;``.

- bpo-1635741: Port :mod:`symtable` extension module to multiphase
  initialization (:pep:`489`)

- bpo-1635741: Port :mod:`grp` and :mod:`pwd` extension modules to
  multiphase initialization (:pep:`489`)

- bpo-1635741: Port _random extension module to multiphase initialization
  (:pep:`489`)

- bpo-1635741: Port _hashlib extension module to multiphase initialization
  (:pep:`489`)

- bpo-41713: Removed the undocumented ``PyOS_InitInterrupts()`` function.
  Initializing Python already implicitly installs signal handlers: see
  :c:member:`PyConfig.install_signal_handlers`. Patch by Victor Stinner.

- bpo-40170: The ``Py_TRASHCAN_BEGIN`` macro no longer accesses PyTypeObject
  attributes, but now can get the condition by calling the new private
  :c:func:`_PyTrash_cond()` function which hides implementation details.

- bpo-42260: :c:func:`Py_GetPath`, :c:func:`Py_GetPrefix`,
  :c:func:`Py_GetExecPrefix`, :c:func:`Py_GetProgramFullPath`,
  :c:func:`Py_GetPythonHome` and :c:func:`Py_GetProgramName` functions now
  return ``NULL`` if called before :c:func:`Py_Initialize` (before Python is
  initialized). Use the new :ref:`Python Initialization Configuration API
  <init-config>` to get the :ref:`Python Path Configuration.
  <init-path-config>`. Patch by Victor Stinner.

- bpo-42260: The :c:func:`PyConfig_Read` function now only parses
  :c:member:`PyConfig.argv` arguments once: :c:member:`PyConfig.parse_argv`
  is set to ``2`` after arguments are parsed. Since Python arguments are
  strippped from :c:member:`PyConfig.argv`, parsing arguments twice would
  parse the application options as Python options.

- bpo-42262: Added :c:func:`Py_NewRef` and :c:func:`Py_XNewRef` functions to
  increment the reference count of an object and return the object. Patch by
  Victor Stinner.

- bpo-42260: When :c:func:`Py_Initialize` is called twice, the second call
  now updates more :mod:`sys` attributes for the configuration, rather than
  only :data:`sys.argv`. Patch by Victor Stinner.

- bpo-41832: The :c:func:`PyType_FromModuleAndSpec` function now accepts
  NULL ``tp_doc`` slot.

- bpo-1635741: Added :c:func:`PyModule_AddObjectRef` function: similar to
  :c:func:`PyModule_AddObject` but don't steal a reference to the value on
  success. Patch by Victor Stinner.

- bpo-42171: The :c:data:`METH_FASTCALL` calling convention is added to the
  limited API. The functions  :c:func:`PyModule_AddType`,
  :c:func:`PyType_FromModuleAndSpec`, :c:func:`PyType_GetModule` and
  :c:func:`PyType_GetModuleState` are added to the limited API on Windows.

- bpo-42085: Add dedicated entry to PyAsyncMethods for sending values

- bpo-41073: :c:func:`PyType_GetSlot()` can now accept static types.

- bpo-30459: :c:func:`PyList_SET_ITEM`, :c:func:`PyTuple_SET_ITEM` and
  :c:func:`PyCell_SET` macros can no longer be used as l-value or r-value.
  For example, ``x = PyList_SET_ITEM(a, b, c)`` and ``PyList_SET_ITEM(a, b,
  c) = x`` now fail with a compiler error. It prevents bugs like ``if
  (PyList_SET_ITEM (a, b, c) < 0) ...`` test. Patch by Zackery Spytz and
  Victor Stinner.


What's New in Python 3.10.0 alpha 2?
====================================

*Release date: 2020-11-03*

Security
--------

- bpo-42103: Prevented potential DoS attack via CPU and RAM exhaustion when
  processing malformed Apple Property List files in binary format.

- bpo-42051: The :mod:`plistlib` module no longer accepts entity
  declarations in XML plist files to avoid XML vulnerabilities. This should
  not affect users as entity declarations are not used in regular plist
  files.

Core and Builtins
-----------------

- bpo-42236: If the ``nl_langinfo(CODESET)`` function returns an empty
  string, Python now uses UTF-8 as the filesystem encoding. Patch by Victor
  Stinner.

- bpo-42218: Fixed a bug in the PEG parser that was causing crashes in debug
  mode. Now errors are checked in left-recursive rules to avoid cases where
  such errors do not get handled in time and appear as long-distance crashes
  in other places.

- bpo-42214: Fixed a possible crash in the PEG parser when checking for the
  '!=' token in the ``barry_as_flufl`` rule. Patch by Pablo Galindo.

- bpo-42206: Propagate and raise the errors caused by
  :c:func:`PyAST_Validate` in the parser.

- bpo-41796: The :mod:`ast` module internal state is now per interpreter.
  Patch by Victor Stinner.

- bpo-42143: Fix handling of errors during creation of ``PyFunctionObject``,
  which resulted in operations on uninitialized memory. Patch by Yonatan
  Goldschmidt.

- bpo-41659: Fix a bug in the parser, where a curly brace following a
  `primary` didn't fail immediately. This led to invalid expressions like `a
  {b}` to throw a :exc:`SyntaxError` with a wrong offset, or invalid
  expressions ending with a curly brace like `a {` to not fail immediately
  in the REPL.

- bpo-42150: Fix possible buffer overflow in the new parser when checking
  for continuation lines. Patch by Pablo Galindo.

- bpo-42123: Run the parser two times. On the first run, disable all the
  rules that only generate better error messages to gain performance. If
  there's a parse failure, run the parser a second time with those enabled.

- bpo-42093: The ``LOAD_ATTR`` instruction now uses new "per opcode cache"
  mechanism and it is about 36% faster now. Patch by Pablo Galindo and Yury
  Selivanov.

- bpo-42030: Support for the legacy AIX-specific shared library loading
  support has been removed. All versions of AIX since 4.3 have supported and
  defaulted to using the common Unix mechanism instead.

- bpo-41984: The garbage collector now tracks all user-defined classes.
  Patch by Brandt Bucher.

- bpo-41993: Fixed potential issues with removing not completely initialized
  module from ``sys.modules`` when import fails.

- bpo-41979: Star-unpacking is now allowed for with item's targets in the
  PEG parser.

- bpo-41974: Removed special methods ``__int__``, ``__float__``,
  ``__floordiv__``, ``__mod__``, ``__divmod__``, ``__rfloordiv__``,
  ``__rmod__`` and ``__rdivmod__`` of the :class:`complex` class.  They
  always raised a :exc:`TypeError`.

- bpo-41902: Micro optimization when compute
  :c:member:`~PySequenceMethods.sq_item` and
  :c:member:`~PyMappingMethods.mp_subscript` of :class:`range`. Patch by
  Dong-hee Na.

- bpo-41894: When loading a native module and a load failure occurs, prevent
  a possible UnicodeDecodeError when not running in a UTF-8 locale by
  decoding the load error message using the current locale's encoding.

- bpo-41902: Micro optimization for range.index if step is 1. Patch by
  Dong-hee Na.

- bpo-41435: Add `sys._current_exceptions()` function to retrieve a
  dictionary mapping each thread's identifier to the topmost exception
  currently active in that thread at the time the function is called.

- bpo-38605: Enable ``from __future__ import annotations`` (:pep:`563`) by
  default. The values found in :attr:`__annotations__` dicts are now
  strings, e.g. ``{"x": "int"}`` instead of ``{"x": int}``.

Library
-------

- bpo-35455: On Solaris, :func:`~time.thread_time` is now implemented with
  ``gethrvtime()`` because ``clock_gettime(CLOCK_THREAD_CPUTIME_ID)`` is not
  always available. Patch by Jakub Kulik.

- bpo-42233: The :func:`repr` of :mod:`typing` types containing
  :ref:`Generic Alias Types <types-genericalias>` previously did not show
  the parameterized types in the ``GenericAlias``.  They have now been
  changed to do so.

- bpo-29566: ``binhex.binhex()`` consistently writes macOS 9 line endings.

- bpo-26789: The :class:`logging.FileHandler` class now keeps a reference to
  the builtin :func:`open` function to be able to open or reopen the file
  during Python finalization. Fix errors like: ``NameError: name 'open' is
  not defined``. Patch by Victor Stinner.

- bpo-42157: Removed the ``unicodedata.ucnhash_CAPI`` attribute which was an
  internal PyCapsule object. The related private ``_PyUnicode_Name_CAPI``
  structure was moved to the internal C API. Patch by Victor Stinner.

- bpo-42157: Convert the :mod:`unicodedata` extension module to the
  multiphase initialization API (:pep:`489`) and convert the
  ``unicodedata.UCD`` static type to a heap type. Patch by Mohamed Koubaa
  and Victor Stinner.

- bpo-42146: Fix memory leak in :func:`subprocess.Popen` in case an uid
  (gid) specified in `user` (`group`, `extra_groups`) overflows `uid_t`
  (`gid_t`).

- bpo-42103: :exc:`~plistlib.InvalidFileException` and :exc:`RecursionError`
  are now the only errors caused by loading malformed binary Plist file
  (previously ValueError and TypeError could be raised in some specific
  cases).

- bpo-41490: In ``importlib.resources``, ``.path`` method is more aggressive
  about releasing handles to zipfile objects early, enabling use-cases like
  certifi to leave the context open but delete the underlying zip file.

- bpo-41052: Pickling heap types implemented in C with protocols 0 and 1
  raises now an error instead of producing incorrect data.

- bpo-42089: In ``importlib.metadata.PackageNotFoundError``, make reference
  to the package metadata being missing to improve the user experience.

- bpo-41491: plistlib: fix parsing XML plists with hexadecimal integer
  values

- bpo-42065: Fix an incorrectly formatted error from
  :meth:`_codecs.charmap_decode` when called with a mapped value outside the
  range of valid Unicode code points. PR by Max Bernstein.

- bpo-41966: Fix pickling pure Python :class:`datetime.time` subclasses.
  Patch by Dean Inwood.

- bpo-19270: :meth:`sched.scheduler.cancel()` will now cancel the correct
  event, if two events with same priority are scheduled for the same time.
  Patch by Bar Harel.

- bpo-28660: :func:`textwrap.wrap` now attempts to break long words after
  hyphens when ``break_long_words=True`` and ``break_on_hyphens=True``.

- bpo-35823: Use ``vfork()`` instead of ``fork()`` for
  :func:`subprocess.Popen` on Linux to improve performance in cases where it
  is deemed safe.

- bpo-42043: Add support for ``zipfile.Path`` inheritance.
  ``zipfile.Path.is_file()`` now returns False for non-existent names.
  ``zipfile.Path`` objects now expose a ``.filename`` attribute and rely on
  that to resolve ``.name`` and ``.parent`` when the ``Path`` object is at
  the root of the zipfile.

- bpo-42021: Fix possible ref leaks in :mod:`sqlite3` module init.

- bpo-39101: Fixed tests using IsolatedAsyncioTestCase from hanging on
  BaseExceptions.

- bpo-41976: Fixed a bug that was causing :func:`ctypes.util.find_library`
  to return ``None`` when triying to locate a library in an environment when
  gcc>=9 is available and ``ldconfig`` is not. Patch by Pablo Galindo

- bpo-41943: Fix bug where TestCase.assertLogs doesn't correctly filter
  messages by level.

- bpo-41923: Implement :pep:`613`, introducing :data:`typing.TypeAlias`
  annotation.

- bpo-41905: A new function in abc: *update_abstractmethods* to re-calculate
  an abstract class's abstract status. In addition, *dataclass* has been
  changed to call this function.

- bpo-23706: Added *newline* parameter to ``pathlib.Path.write_text()``.

- bpo-41876: Tkinter font class repr uses font name

- bpo-41831: ``str()`` for the ``type`` attribute of the ``tkinter.Event``
  object always returns now the numeric code returned by Tk instead of the
  name of the event type.

- bpo-39337: :func:`encodings.normalize_encoding` now ignores non-ASCII
  characters.

- bpo-41747: Ensure all methods that generated from
  :func:`dataclasses.dataclass` objects now have the proper ``__qualname__``
  attribute referring to the class they belong to. Patch by Batuhan Taskaya.

- bpo-30681: Handle exceptions caused by unparsable date headers when using
  email "default" policy.  Patch by Tim Bell, Georges Toth

- bpo-41586: Add F_SETPIPE_SZ and F_GETPIPE_SZ to fcntl module. Allow
  setting pipesize on subprocess.Popen.

- bpo-41229: Add ``contextlib.aclosing`` for deterministic cleanup of async
  generators which is analogous to ``contextlib.closing`` for non-async
  generators. Patch by Joongi Kim and John Belmonte.

- bpo-16396: Allow ``ctypes.wintypes`` to be imported on non-Windows
  systems.

- bpo-4356: Add a key function to the bisect module.

- bpo-40592: :func:`shutil.which` now ignores empty entries in
  :envvar:`PATHEXT` instead of treating them as a match.

- bpo-40492: Fix ``--outfile`` for :mod:`cProfile` / :mod:`profile` not
  writing the output file in the original directory when the program being
  profiled changes the working directory.  PR by Anthony Sottile.

- bpo-34204: The :mod:`shelve` module now uses
  :data:`pickle.DEFAULT_PROTOCOL` by default instead of :mod:`pickle`
  protocol ``3``.

- bpo-27321: Fixed KeyError exception when flattening an email to a string
  attempts to replace a non-existent Content-Transfer-Encoding header.

- bpo-38976: The :mod:`http.cookiejar` module now supports the parsing of
  cookies in CURL-style cookiejar files through MozillaCookieJar on all
  platforms. Previously, such cookie entries would be silently ignored when
  loading a cookiejar with such entries.

  Additionally, the HTTP Only attribute is persisted in the object, and will
  be correctly written to file if the MozillaCookieJar object is
  subsequently dumped.

Documentation
-------------

- bpo-42061: Document __format__ functionality for IP addresses.

- bpo-41910: Document the default implementation of `object.__eq__`.

- bpo-42010: Clarify that subscription expressions are also valid for
  certain :term:`classes <class>` and :term:`types <type>` in the standard
  library, and for user-defined classes and types if the classmethod
  :meth:`__class_getitem__` is provided.

- bpo-41805: Documented :ref:`generic alias type <types-genericalias>` and
  :data:`types.GenericAlias`. Also added an entry in glossary for
  :term:`generic types <generic type>`.

- bpo-39693: Fix tarfile's extractfile documentation

- bpo-39416: Document some restrictions on the default string
  representations of numeric classes.

Tests
-----

- bpo-41739: Fix test_logging.test_race_between_set_target_and_flush(): the
  test now waits until all threads complete to avoid leaking running
  threads.

- bpo-41970: Avoid a test failure in ``test_lib2to3`` if the module has
  already imported at the time the test executes. Patch by Pablo Galindo.

- bpo-41944: Tests for CJK codecs no longer call ``eval()`` on content
  received via HTTP.

- bpo-41306: Fixed a failure in ``test_tk.test_widgets.ScaleTest`` happening
  when executing the test with Tk 8.6.10.

Build
-----

- bpo-38980: Add ``-fno-semantic-interposition`` to both the compile and
  link line when building with ``--enable-optimizations``. Patch by Victor
  Stinner and Pablo Galindo.

Windows
-------

- bpo-38439: Updates the icons for IDLE in the Windows Store package.

- bpo-38252: Use 8-byte step to detect ASCII sequence in 64-bit Windows
  build.

- bpo-39107: Update Tcl and Tk to 8.6.10 in Windows installer.

- bpo-41557: Update Windows installer to use SQLite 3.33.0.

- bpo-38324: Avoid Unicode errors when accessing certain locale data on
  Windows.

macOS
-----

- bpo-41471: Ignore invalid prefix lengths in system proxy excludes.

IDLE
----

- bpo-33987: Mostly finish using ttk widgets, mainly for editor, settings,
  and searches. Some patches by Mark Roseman.

- bpo-40511: Typing opening and closing parentheses inside the parentheses
  of a function call will no longer cause unnecessary "flashing" off and on
  of an existing open call-tip, e.g. when typed in a string literal.

- bpo-38439: Add a 256×256 pixel IDLE icon to the Windows .ico file. Created
  by Andrew Clover. Remove the low-color gif variations from the .ico file.

C API
-----

- bpo-42157: The private ``_PyUnicode_Name_CAPI`` structure of the PyCapsule
  API ``unicodedata.ucnhash_CAPI`` has been moved to the internal C API.
  Patch by Victor Stinner.

- bpo-42015: Fix potential crash in deallocating method objects when
  dynamically allocated `PyMethodDef`'s lifetime is managed through the
  ``self`` argument of a `PyCFunction`.

- bpo-40423: The :mod:`subprocess` module and ``os.closerange`` will now use
  the ``close_range(low, high, flags)`` syscall when it is available for
  more efficient closing of ranges of descriptors.

- bpo-41845: :c:func:`PyObject_GenericGetDict` is available again in the
  limited API when targeting 3.10 or later.

- bpo-40422: Add `_Py_closerange` function to provide performant closing of
  a range of file descriptors.

- bpo-41986: :c:data:`Py_FileSystemDefaultEncodeErrors` and
  :c:data:`Py_UTF8Mode` are available again in limited API.

- bpo-41756: Add `PyIter_Send` function to allow sending value into
  generator/coroutine/iterator without raising StopIteration exception to
  signal return.

- bpo-41784: Added ``PyUnicode_AsUTF8AndSize`` to the limited C API.


What's New in Python 3.10.0 alpha 1?
====================================

*Release date: 2020-10-05*

Security
--------

- bpo-41304: Fixes `python3x._pth` being ignored on Windows, caused by the
  fix for :issue:`29778` (CVE-2020-15801).

- bpo-41162: Audit hooks are now cleared later during finalization to avoid
  missing events.

- bpo-29778: Ensure :file:`python3.dll` is loaded from correct locations
  when Python is embedded (CVE-2020-15523).

- bpo-41004: The __hash__() methods of  ipaddress.IPv4Interface and
  ipaddress.IPv6Interface incorrectly generated constant hash values of 32
  and 128 respectively. This resulted in always causing hash collisions. The
  fix uses hash() to generate hash values for the tuple of (address, mask
  length, network address).

- bpo-39603: Prevent http header injection by rejecting control characters
  in http.client.putrequest(...).

Core and Builtins
-----------------

- bpo-41909: Fixed stack overflow in :func:`issubclass` and
  :func:`isinstance` when getting the ``__bases__`` attribute leads to
  infinite recursion.

- bpo-41922: Speed up calls to ``reversed()`` by using the :pep:`590`
  ``vectorcall`` calling convention. Patch by Dong-hee Na.

- bpo-41873: Calls to ``float()`` are now faster due to the ``vectorcall``
  calling convention. Patch by Dennis Sweeney.

- bpo-41870: Speed up calls to ``bool()`` by using the :pep:`590`
  ``vectorcall`` calling convention. Patch by Dong-hee Na.

- bpo-1635741: Port the :mod:`_bisect` module to the multi-phase
  initialization API (:pep:`489`).

- bpo-39934: Correctly count control blocks in 'except' in compiler. Ensures
  that a syntax error, rather a fatal error, occurs for deeply nested, named
  exception handlers.

- bpo-41780: Fix :meth:`__dir__` of :class:`types.GenericAlias`. Patch by
  Batuhan Taskaya.

- bpo-1635741: Port the :mod:`_lsprof` extension module to multi-phase
  initialization (:pep:`489`).

- bpo-1635741: Port the :mod:`cmath` extension module to multi-phase
  initialization (:pep:`489`).

- bpo-1635741: Port the :mod:`_scproxy` extension module to multi-phase
  initialization (:pep:`489`).

- bpo-1635741: Port the :mod:`termios` extension module to multi-phase
  initialization (:pep:`489`).

- bpo-1635741: Convert the :mod:`_sha256` extension module types to heap
  types.

- bpo-41690: Fix a possible stack overflow in the parser when parsing
  functions and classes with a huge amount of arguments. Patch by Pablo
  Galindo.

- bpo-1635741: Port the :mod:`_overlapped` extension module to multi-phase
  initialization (:pep:`489`).

- bpo-1635741: Port the :mod:`_curses_panel` extension module to multi-phase
  initialization (:pep:`489`).

- bpo-1635741: Port the :mod:`_opcode` extension module to multi-phase
  initialization (:pep:`489`).

- bpo-41681: Fixes the wrong error description in the error raised by using
  2 `,` in format string in f-string and :meth:`str.format`.

- bpo-41675: The implementation of :func:`signal.siginterrupt` now uses
  :c:func:`sigaction` (if it is available in the system) instead of the
  deprecated :c:func:`siginterrupt`. Patch by Pablo Galindo.

- bpo-41670: Prevent line trace being skipped on platforms not compiled with
  ``USE_COMPUTED_GOTOS``. Fixes issue where some lines nested within a
  try-except block were not being traced on Windows.

- bpo-41654: Fix a crash that occurred when destroying subclasses of
  :class:`MemoryError`. Patch by Pablo Galindo.

- bpo-1635741: Port the :mod:`zlib` extension module to multi-phase
  initialization (:pep:`489`).

- bpo-41631: The ``_ast`` module uses again a global state. Using a module
  state per module instance is causing subtle practical problems. For
  example, the Mercurial project replaces the ``__import__()`` function to
  implement lazy import, whereas Python expected that ``import _ast`` always
  return a fully initialized ``_ast`` module.

- bpo-40077: Convert :mod:`_operator` to use :c:func:`PyType_FromSpec`.

- bpo-1653741: Port :mod:`_sha3` to multi-phase init.  Convert static types
  to heap types.

- bpo-1635741: Port the :mod:`_blake2` extension module to the multi-phase
  initialization API (:pep:`489`).

- bpo-41533: Free the stack allocated in ``va_build_stack`` if
  ``do_mkstack`` fails and the stack is not a ``small_stack``.

- bpo-41531: Fix a bug that was dropping keys when compiling dict literals
  with more than 0xFFFF elements. Patch by Pablo Galindo.

- bpo-41525: The output of ``python --help`` contains now only ASCII
  characters.

- bpo-1635741: Port the :mod:`_sha1`, :mod:`_sha512`, and :mod:`_md5`
  extension modules to multi-phase initialization API (:pep:`489`).

- bpo-41431: Optimize ``dict_merge()`` for copying dict (e.g. ``dict(d)``
  and ``{}.update(d)``).

- bpo-41428: Implement PEP 604. This supports (int | str) etc. in place of
  Union[str, int].

- bpo-41340: Removed fallback implementation for ``strdup``.

- bpo-38156: Handle interrupts that come after EOF correctly in
  ``PyOS_StdioReadline``.

- bpo-41342: :func:`round` with integer argument is now faster (9--60%).

- bpo-41334: Constructors :func:`str`, :func:`bytes` and :func:`bytearray`
  are now faster (around 30--40% for small objects).

- bpo-41295: Resolve a regression in CPython 3.8.4 where defining
  "__setattr__" in a multi-inheritance setup and calling up the hierarchy
  chain could fail if builtins/extension types were involved in the base
  types.

- bpo-41323: Bytecode optimizations are performed directly on the control
  flow graph. This will result in slightly more compact code objects in some
  circumstances.

- bpo-41247: Always cache the running loop holder when running
  ``asyncio.set_running_loop``.

- bpo-41252: Fix incorrect refcounting in _ssl.c's
  ``_servername_callback()``.

- bpo-1635741: Port :mod:`multiprocessing` to multi-phase initialization

- bpo-1635741: Port :mod:`winapi` to multiphase initialization

- bpo-41215: Use non-NULL default values in the PEG parser keyword list to
  overcome a bug that was preventing Python from being properly compiled
  when using the XLC compiler. Patch by Pablo Galindo.

- bpo-41218: Python 3.8.3 had a regression where compiling with
  ast.PyCF_ALLOW_TOP_LEVEL_AWAIT would aggressively mark list comprehension
  with CO_COROUTINE. Now only list comprehension making use of async/await
  will tagged as so.

- bpo-1635741: Port :mod:`faulthandler` to multiphase initialization.

- bpo-1635741: Port :mod:`sha256` to multiphase initialization

- bpo-41175: Guard against a NULL pointer dereference within bytearrayobject
  triggered by the ``bytearray() + bytearray()`` operation.

- bpo-41100: add arm64 to the allowable Mac OS arches in mpdecimal.h

- bpo-41094: Fix decoding errors with audit when open files with non-ASCII
  names on non-UTF-8 locale.

- bpo-39960: The "hackcheck" that prevents sneaking around a type's
  __setattr__() by calling the superclass method was rewritten to allow C
  implemented heap types.

- bpo-41084: Prefix the error message with 'f-string: ', when parsing an
  f-string expression which throws a :exc:`SyntaxError`.

- bpo-40521: Empty frozensets are no longer singletons.

- bpo-41076: Pre-feed the parser with the location of the f-string
  expression, not the f-string itself, which allows us to skip the shifting
  of the AST node locations after the parsing is completed.

- bpo-41056: Fixes a reference to deallocated stack space during startup
  when constructing sys.path involving a relative symlink when code was
  supplied via -c.  (discovered via Coverity)

- bpo-41061: Fix incorrect expressions and asserts in hashtable code and
  tests.

- bpo-41052: Opt out serialization/deserialization for _random.Random

- bpo-40939: Rename `PyPegen*` functions to `PyParser*`, so that we can
  remove the old set of `PyParser*` functions that were using the old
  parser, but keep everything backwards-compatible.

- bpo-35975: Stefan Behnel reported that cf_feature_version is used even
  when PyCF_ONLY_AST is not set. This is against the intention and against
  the documented behavior, so it's been fixed.

- bpo-40939: Remove the remaining files from the old parser and the
  :mod:`symbol` module.

- bpo-40077: Convert :mod:`_bz2` to use :c:func:`PyType_FromSpec`.

- bpo-41006: The ``encodings.latin_1`` module is no longer imported at
  startup. Now it is only imported when it is the filesystem encoding or the
  stdio encoding.

- bpo-40636: :func:`zip` now supports :pep:`618`'s ``strict`` parameter,
  which raises a :exc:`ValueError` if the arguments are exhausted at
  different lengths. Patch by Brandt Bucher.

- bpo-1635741: Port :mod:`_gdbm` to multiphase initialization.

- bpo-40985: Fix a bug that caused the :exc:`SyntaxError` text to be empty
  when a file ends with a line ending in a line continuation character (i.e.
  backslash). The error text should contain the text of the last line.

- bpo-40958: Fix a possible buffer overflow in the PEG parser when gathering
  information for emitting syntax errors. Patch by Pablo Galindo.

- bpo-1635741: Port :mod:`_dbm` to multiphase initialization.

- bpo-40957: Fix refleak in _Py_fopen_obj() when PySys_Audit() fails

- bpo-40950: Add a state to the :mod:`nis` module (:pep:`3121`) and apply
  the multiphase initialization. Patch by Dong-hee Na.

- bpo-40947: The Python :ref:`Path Configuration <init-path-config>` now
  takes :c:member:`PyConfig.platlibdir` in account.

- bpo-40939: Remove the old parser, the :mod:`parser` module and all
  associated support code, command-line options and environment variables.
  Patch by Pablo Galindo.

- bpo-40847: Fix a bug where a line with only a line continuation character
  is not considered a blank line at tokenizer level. In such cases, more
  than a single `NEWLINE` token was emitted. The old parser was working
  around the issue, but the new parser threw a :exc:`SyntaxError` for valid
  input due to this. For example, an empty line following a line
  continuation character was interpreted as a :exc:`SyntaxError`.

- bpo-40890: Each dictionary view now has a ``mapping`` attribute that
  provides a :class:`types.MappingProxyType` wrapping the original
  dictionary.  Patch contributed by Dennis Sweeney.

- bpo-40889: Improved the performance of symmetric difference operations on
  dictionary item views.  Patch by Dennis Sweeney.

- bpo-40904: Fix possible segfault in the new PEG parser when parsing
  f-string containing yield statements with no value (:code:`f"{yield}"`).
  Patch by Pablo Galindo

- bpo-40903: Fixed a possible segfault in the new PEG parser when producing
  error messages for invalid assignments of the form :code:`p=p=`. Patch by
  Pablo Galindo

- bpo-40880: Fix invalid memory read in the new parser when checking
  newlines in string literals. Patch by Pablo Galindo.

- bpo-40883: Fix memory leak in when parsing f-strings in the new parser.
  Patch by Pablo Galindo

- bpo-40870: Raise :exc:`ValueError` when validating custom AST's where the
  constants ``True``, ``False`` and ``None`` are used within a
  :class:`ast.Name` node.

- bpo-40854: Allow overriding :data:`sys.platlibdir` via a new
  :envvar:`PYTHONPLATLIBDIR` environment variable.

- bpo-40826: Fix GIL usage in :c:func:`PyOS_Readline`: lock the GIL to set
  an exception and pass the Python thread state when checking if there is a
  pending signal.

- bpo-1635741: Port :mod:`fcntl` to multiphase initialization.

- bpo-19468: Delete unnecessary instance check in importlib.reload(). Patch
  by Furkan Önder.

- bpo-40824: Unexpected errors in calling the ``__iter__`` method are no
  longer masked by ``TypeError`` in the :keyword:`in` operator and functions
  :func:`~operator.contains`, :func:`~operator.indexOf` and
  :func:`~operator.countOf` of the :mod:`operator` module.

- bpo-40792: Attributes ``start``, ``stop`` and ``step`` of the
  :class:`range` object now always has exact type :class:`int`.  Previously,
  they could have been an instance of a subclass of ``int``.

- bpo-40780: Fix a corner case where g-style string formatting of a float
  failed to remove trailing zeros.

- bpo-38964: When there's a :exc:`SyntaxError` in the expression part of an
  fstring, the filename attribute of the :exc:`SyntaxError` gets correctly
  set to the name of the file the fstring resides in.

- bpo-40750: Support the "-d" debug flag in the new PEG parser. Patch by
  Pablo Galindo

- bpo-40217: Instances of types created with
  :c:func:`PyType_FromSpecWithBases` will no longer automatically visit
  their class object when traversing references in the garbage collector.
  The user is expected to manually visit the object's class. Patch by Pablo
  Galindo.

- bpo-39573: :c:func:`Py_TYPE()` is changed to the inline static function.
  Patch by Dong-hee Na.

- bpo-40696: Fix a hang that can arise after :meth:`generator.throw` due to
  a cycle in the exception context chain.

- bpo-40521: Each interpreter now its has own free lists, singletons and
  caches:

  * Free lists: float, tuple, list, dict, frame, context,
    asynchronous generator, MemoryError.
  * Singletons: empty tuple, empty bytes string, empty Unicode string,
    single byte character, single Unicode (latin1) character.
  * Slice cache.

  They are no longer shared by all interpreters.

- bpo-40679: Certain :exc:`TypeError` messages about missing or extra
  arguments now include the function's :term:`qualified name`.  Patch by
  Dennis Sweeney.

- bpo-29590: Make the stack trace correct after calling
  :meth:`generator.throw` on a generator that has yielded from a ``yield
  from``.

- bpo-4022: Improve performance of generators by not raising internal
  StopIteration.

- bpo-1635741: Port :mod:`mmap` to multiphase initialization.

- bpo-1635741: Port :mod:`_lzma` to multiphase initialization.

- bpo-37999: Builtin and extension functions that take integer arguments no
  longer accept :class:`~decimal.Decimal`\ s, :class:`~fractions.Fraction`\
  s and other objects that can be converted to integers only with a loss
  (e.g. that have the :meth:`~object.__int__` method but do not have the
  :meth:`~object.__index__` method).

- bpo-29882: Add :meth:`int.bit_count()`, counting the number of ones in the
  binary representation of an integer. Patch by Niklas Fiekas.

- bpo-36982: Use ncurses extended color functions when available to support
  terminals with 256 colors, and add the new function
  :func:`curses.has_extended_color_support` to indicate whether extended
  color support is provided by the underlying ncurses library.

- bpo-19569: Add the private macros ``_Py_COMP_DIAG_PUSH``,
  ``_Py_COMP_DIAG_IGNORE_DEPR_DECLS``, and ``_Py_COMP_DIAG_POP``.

- bpo-26680: The int type now supports the x.is_integer() method for
  compatibility with float.

Library
-------

- bpo-41900: C14N 2.0 serialisation in xml.etree.ElementTree failed for
  unprefixed attributes when a default namespace was defined.

- bpo-41887: Strip leading spaces and tabs on :func:`ast.literal_eval`. Also
  document stripping of spaces and tabs for :func:`eval`.

- bpo-41773: Note in documentation that :func:`random.choices` doesn't
  support non-finite weights, raise :exc:`ValueError` when given non-finite
  weights.

- bpo-41840: Fix a bug in the :mod:`symtable` module that was causing
  module-scope global variables to not be reported as both local and global.
  Patch by Pablo Galindo.

- bpo-41842: Add :func:`codecs.unregister` function to unregister a codec
  search function.

- bpo-40564: In ``zipfile.Path``, mutate the passed ZipFile object type
  instead of making a copy. Prevents issues when both the local copy and the
  caller’s copy attempt to close the same file handle.

- bpo-40670: More reliable validation of statements in
  :class:`timeit.Timer`. It now accepts "empty" statements (only whitespaces
  and comments) and rejects misindentent statements.

- bpo-41833: The :class:`threading.Thread` constructor now uses the target
  name if the *target* argument is specified but the *name* argument is
  omitted.

- bpo-41817: fix `tkinter.EventType` Enum so all members are strings, and
  none are tuples

- bpo-41810: :data:`types.EllipsisType`, :data:`types.NotImplementedType`
  and :data:`types.NoneType` have been reintroduced, providing a new set of
  types readily interpretable by static type checkers.

- bpo-41815: Fix SQLite3 segfault when backing up closed database. Patch
  contributed by Peter David McCormick.

- bpo-41816: StrEnum added: it ensures that all members are already strings
  or string candidates

- bpo-41517: fix bug allowing Enums to be extended via multiple inheritance

- bpo-39587: use the correct mix-in data type when constructing Enums

- bpo-41792: Add is_typeddict function to typing.py to check if a type is a
  TypedDict class

  Previously there was no way to check that without using private API. See
  the `relevant issue in python/typing
  <https://github.com/python/typing/issues/751>`

- bpo-41789: Honor `object` overrides in `Enum` class creation
  (specifically, `__str__`, `__repr__`, `__format__`, and `__reduce_ex__`).

- bpo-32218: `enum.Flag` and `enum.IntFlag` members are now iterable

- bpo-39651: Fix a race condition in the ``call_soon_threadsafe()`` method
  of ``asyncio.ProactorEventLoop``: do nothing if the self-pipe socket has
  been closed.

- bpo-1635741: Port the ``mashal`` extension module to the multi-phase
  initialization API (:pep:`489`).

- bpo-1635741: Port the ``_string`` extension module to the multi-phase
  initialization API (:pep:`489`).

- bpo-41732: Added an :term:`iterator` to :class:`memoryview`.

- bpo-41720: Fixed :meth:`turtle.Vec2D.__rmul__` for arguments which are not
  int or float.

- bpo-41696: Fix handling of debug mode in :func:`asyncio.run`. This allows
  setting ``PYTHONASYNCIODEBUG`` or ``-X dev`` to enable asyncio debug mode
  when using :func:`asyncio.run`.

- bpo-41687: Fix implementation of sendfile to be compatible with Solaris.

- bpo-41662: No longer override exceptions raised in ``__len__()`` of a
  sequence of parameters in :mod:`sqlite3` with
  :exc:`~sqlite3.ProgrammingError`.

- bpo-39010: Restarting a ``ProactorEventLoop`` on Windows no longer logs
  spurious ``ConnectionResetErrors``.

- bpo-41638: :exc:`~sqlite3.ProgrammingError` message for absent parameter
  in :mod:`sqlite3` contains now the name of the parameter instead of its
  index when parameters are supplied as a dict.

- bpo-41662: Fixed crash when mutate list of parameters during iteration in
  :mod:`sqlite3`.

- bpo-41513: Improved the accuracy of math.hypot().  Internally, each step
  is computed with extra precision so that the result is now almost always
  correctly rounded.

- bpo-41609: The pdb whatis command correctly reports instance methods as
  'Method' rather than 'Function'.

- bpo-39994: Fixed pprint's handling of dict subclasses that override
  __repr__.

- bpo-32751: When cancelling the task due to a timeout,
  :meth:`asyncio.wait_for` will now wait until the cancellation is complete
  also in the case when *timeout* is <= 0, like it does with positive
  timeouts.

- bpo-37658: :meth:`asyncio.wait_for` now properly handles races between
  cancellation of itself and the completion of the wrapped awaitable.

- bpo-40782: Change the method asyncio.AbstractEventLoop.run_in_executor to
  not be a coroutine.

- bpo-41520: Fix :mod:`codeop` regression that prevented turning compile
  warnings into errors.

- bpo-41528: turtle uses math module functions to convert degrees to radians
  and vice versa and to calculate vector norm

- bpo-41513: Minor algorithmic improvement to math.hypot() and math.dist()
  giving small gains in speed and accuracy.

- bpo-41503: Fixed a race between setTarget and flush in
  logging.handlers.MemoryHandler.

- bpo-41497: Fix potential UnicodeDecodeError in dis module.

- bpo-41467: On Windows, fix asyncio ``recv_into()`` return value when the
  socket/pipe is closed (:exc:`BrokenPipeError`): return ``0`` rather than
  an empty byte string (``b''``).

- bpo-41425: Make tkinter doc example runnable.

- bpo-41421: Make an algebraic simplification to random.paretovariate().  It
  now is slightly less subject to round-off error and is slightly faster.
  Inputs that used to cause ZeroDivisionError now cause an OverflowError
  instead.

- bpo-41440: Add :func:`os.cpu_count()` support for VxWorks RTOS.

- bpo-41316: Fix the :mod:`tarfile` module to write only basename of TAR
  file to GZIP compression header.

- bpo-41384: Raise TclError instead of TypeError when an unknown option is
  passed to tkinter.OptionMenu.

- bpo-41317: Use add_done_callback() in asyncio.loop.sock_accept() to
  unsubscribe reader early on cancellation.

- bpo-41364: Reduce import overhead of :mod:`uuid`.

- bpo-35328: Set the environment variable ``VIRTUAL_ENV_PROMPT`` at
  :mod:`venv` activation.

- bpo-41341: Recursive evaluation of `typing.ForwardRef` in
  `get_type_hints`.

- bpo-41344: Prevent creating :class:`shared_memory.SharedMemory` objects
  with :code:`size=0`.

- bpo-41333: :meth:`collections.OrderedDict.pop` is now 2 times faster.

- bpo-41288: Unpickling invalid NEWOBJ_EX opcode with the C implementation
  raises now UnpicklingError instead of crashing.

- bpo-39017: Avoid infinite loop when reading specially crafted TAR files
  using the tarfile module (CVE-2019-20907).

- bpo-41273: Speed up any transport using ``_ProactorReadPipeTransport`` by
  calling ``recv_into`` instead of ``recv``, thus not creating a new buffer
  for each ``recv`` call in the transport's read loop.

- bpo-41235: Fix the error handling in
  :meth:`ssl.SSLContext.load_dh_params`.

- bpo-41207: In distutils.spawn, restore expectation that DistutilsExecError
  is raised when the command is not found.

- bpo-29727: Register :class:`array.array` as a
  :class:`~collections.abc.MutableSequence`. Patch by Pablo Galindo.

- bpo-39168: Remove the ``__new__`` method of :class:`typing.Generic`.

- bpo-41194: Fix a crash in the ``_ast`` module: it can no longer be loaded
  more than once. It now uses a global state rather than a module state.

- bpo-41195: Add read-only ssl.SSLContext.security_level attribute to
  retrieve the context's security level.

- bpo-41193: The ``write_history()`` atexit function of the readline
  completer now ignores any :exc:`OSError` to ignore error if the filesystem
  is read-only, instead of only ignoring :exc:`FileNotFoundError` and
  :exc:`PermissionError`.

- bpo-41182: selector: use DefaultSelector based upon implementation

- bpo-41161: The decimal module now requires libmpdec-2.5.0. Users of
  --with-system-libmpdec should update their system library.

- bpo-40874: The decimal module now requires libmpdec-2.5.0.

- bpo-41138: Fixed the :mod:`trace` module CLI for Python source files with
  non-UTF-8 encoding.

- bpo-31082: Use the term "iterable" in the docstring for
  :func:`functools.reduce`.

- bpo-40521: Remove freelist from collections.deque().

- bpo-31938: Fix default-value signatures of several functions in the
  :mod:`select` module - by Anthony Sottile.

- bpo-41068: Fixed reading files with non-ASCII names from ZIP archive
  directly after writing them.

- bpo-41058: :func:`pdb.find_function` now correctly determines the source
  file encoding.

- bpo-41056: Invalid file descriptor values are now prevented from being
  passed to os.fpathconf. (discovered by Coverity)

- bpo-41056: Fix a NULL pointer dereference within the ssl module during a
  MemoryError in the keylog callback. (discovered by Coverity)

- bpo-41056: Fixed an instance where a MemoryError within the zoneinfo
  module might not be reported or not reported at its source. (found by
  Coverity)

- bpo-41048: :func:`mimetypes.read_mime_types` function reads the rule file
  using UTF-8 encoding, not the locale encoding. Patch by Srinivas Reddy
  Thatiparthy.

- bpo-41043: Fixed the use of :func:`~glob.glob` in the stdlib: literal part
  of the path is now always correctly escaped.

- bpo-41025: Fixed an issue preventing the C implementation of
  :class:`zoneinfo.ZoneInfo` from being subclassed.

- bpo-35018: Add the :class:`xml.sax.handler.LexicalHandler` class that is
  present in other SAX XML implementations.

- bpo-41002: Improve performance of HTTPResponse.read with a given amount.
  Patch by Bruce Merry.

- bpo-40448: :mod:`ensurepip` now disables the use of `pip` cache when
  installing the bundled versions of `pip` and `setuptools`.  Patch by
  Krzysztof Konopko.

- bpo-40967: Removed :meth:`asyncio.Task.current_task` and
  :meth:`asyncio.Task.all_tasks`. Patch contributed by Rémi Lapeyre.

- bpo-40924: Ensure ``importlib.resources.path`` returns an extant path for
  the SourceFileLoader's resource reader. Avoids the regression identified
  in master while a long-term solution is devised.

- bpo-40955: Fix a minor memory leak in :mod:`subprocess` module when
  extra_groups was specified.

- bpo-40855: The standard deviation and variance functions in the statistics
  module were ignoring their mu and xbar arguments.

- bpo-40939: Use the new PEG parser when generating the stdlib
  :mod:`keyword` module.

- bpo-23427: Add :data:`sys.orig_argv` attribute: the list of the original
  command line arguments passed to the Python executable.

- bpo-33689: Ignore empty or whitespace-only lines in .pth files. This
  matches the documentated behavior. Before, empty lines caused the
  site-packages dir to appear multiple times in sys.path. By Ido Michael,
  contributors Malcolm Smith and Tal Einat.

- bpo-40884: Added a `defaults` parameter to :class:`logging.Formatter`, to
  allow specifying default values for custom fields. Patch by Asaf Alon and
  Bar Harel.

- bpo-40876: Clarify error message in the :mod:`csv` module.

- bpo-39791: Refresh importlib.metadata from importlib_metadata 1.6.1.

- bpo-40807: Stop codeop._maybe_compile, used by code.InteractiveInterpreter
  (and IDLE). from emitting each warning three times.

- bpo-32604: Fix reference leak in the :mod:`select` module when the module
  is imported in a subinterpreter.

- bpo-39791: Built-in loaders (SourceFileLoader and ZipImporter) now supply
  ``TraversableResources`` implementations for ``ResourceReader``, and the
  fallback function has been removed.

- bpo-39314: :class:`rlcompleter.Completer` and the standard Python shell
  now close the parenthesis for functions that take no arguments. Patch
  contributed by Rémi Lapeyre.

- bpo-17005: The topological sort functionality that was introduced
  initially in the :mod:`functools` module has been moved to a new
  :mod:`graphlib` module to better accommodate the new tools and keep the
  original scope of the :mod:`functools` module. Patch by Pablo Galindo

- bpo-40834: Fix truncate when sending str object
  with_xxsubinterpreters.channel_send.

- bpo-40755: Add rich comparisons to collections.Counter().

- bpo-26407: Unexpected errors in calling the ``__iter__`` method are no
  longer masked by ``TypeError`` in :func:`csv.reader`,
  :func:`csv.writer.writerow` and :meth:`csv.writer.writerows`.

- bpo-39384: Fixed email.contentmanager to allow set_content() to set a null
  string.

- bpo-40744: The :mod:`sqlite3` module uses SQLite API functions that
  require SQLite v3.7.3 or higher.  This patch removes support for older
  SQLite versions, and explicitly requires SQLite 3.7.3 both at build,
  compile and runtime.  Patch by Sergey Fedoseev and Erlend E. Aasland.

- bpo-40777: Initialize PyDateTime_IsoCalendarDateType.tp_base at run-time
  to avoid errors on some compilers.

- bpo-38488: Update ensurepip to install pip 20.1.1 and setuptools 47.1.0.

- bpo-40792: The result of :func:`operator.index` now always has exact type
  :class:`int`. Previously, the result could have been an instance of a
  subclass of ``int``.

- bpo-40767: :mod:`webbrowser` now properly finds the default browser in
  pure Wayland systems by checking the WAYLAND_DISPLAY environment variable.
  Patch contributed by Jérémy Attali.

- bpo-40791: :func:`hashlib.compare_digest` uses OpenSSL's
  ``CRYPTO_memcmp()`` function when OpenSSL is available.

- bpo-40795: :mod:`ctypes` module: If ctypes fails to convert the result of
  a callback or if a ctypes callback function raises an exception,
  sys.unraisablehook is now called with an exception set. Previously, the
  error was logged into stderr by :c:func:`PyErr_Print`.

- bpo-16995: Add :func:`base64.b32hexencode` and :func:`base64.b32hexdecode`
  to support the Base32 Encoding with Extended Hex Alphabet.

- bpo-30008: Fix :mod:`ssl` code to be compatible with OpenSSL 1.1.x builds
  that use ``no-deprecated`` and ``--api=1.1.0``.

- bpo-30064: Fix asyncio ``loop.sock_*`` race condition issue

- bpo-40759: Deprecate the :mod:`symbol` module.

- bpo-40756: The second argument (extra) of ``LoggerAdapter.__init__`` now
  defaults to None.

- bpo-37129: Add a new :data:`os.RWF_APPEND` flag for :func:`os.pwritev`.

- bpo-40737: Fix possible reference leak for :mod:`sqlite3` initialization.

- bpo-40726: Handle cases where the ``end_lineno`` is ``None`` on
  :func:`ast.increment_lineno`.

- bpo-40698: :mod:`distutils` upload creates SHA2-256 and Blake2b-256
  digests. MD5 digests is skipped if platform blocks MD5.

- bpo-40695: :mod:`hashlib` no longer falls back to builtin hash
  implementations when OpenSSL provides a hash digest and the algorithm is
  blocked by security policy.

- bpo-9216: func:`hashlib.new` passed ``usedforsecurity`` to OpenSSL EVP
  constructor ``_hashlib.new()``. test_hashlib and test_smtplib handle
  strict security policy better.

- bpo-40614: :func:`ast.parse` will not parse self documenting expressions
  in f-strings when passed ``feature_version`` is less than ``(3, 8)``.

- bpo-40626: Add h5 file extension as MIME Type application/x-hdf5, as per
  HDF Group recommendation for HDF5 formatted data files. Patch contributed
  by Mark Schwab.

- bpo-25920: On macOS, when building Python for macOS 10.4 and older, which
  wasn't the case for python.org macOS installer, :func:`socket.getaddrinfo`
  no longer uses an internal lock to prevent race conditions when calling
  ``getaddrinfo()`` which is thread-safe since macOS 10.5. Python 3.9
  requires macOS 10.6 or newer. The internal lock caused random hang on fork
  when another thread was calling :func:`socket.getaddrinfo`. The lock was
  also used on FreeBSD older than 5.3, OpenBSD older than 201311 and NetBSD
  older than 4.

- bpo-40671: Prepare ``_hashlib`` for :pep:`489` and use
  :c:func:`PyModule_AddType`.

- bpo-32309: Added a new :term:`coroutine` :func:`asyncio.to_thread`. It is
  mainly used for running IO-bound functions in a separate thread to avoid
  blocking the event loop, and essentially works as a high-level version of
  :meth:`~asyncio.loop.run_in_executor` that can directly take keyword
  arguments.

- bpo-36543: Restored the deprecated :mod:`xml.etree.cElementTree` module.

- bpo-40611: :data:`~mmap.MAP_POPULATE` constant has now been added to the
  list of exported :mod:`mmap` module flags.

- bpo-39881: PEP 554 for use in the test suite. (Patch By Joannah Nanjekye)

- bpo-13097: ``ctypes`` now raises an ``ArgumentError`` when a callback is
  invoked with more than 1024 arguments.

- bpo-39385: A new test assertion context-manager,
  :func:`unittest.assertNoLogs` will ensure a given block of code emits no
  log messages using the logging module. Contributed by Kit Yan Choi.

- bpo-23082: Updated the error message and docs of PurePath.relative_to() to
  better reflect the function behaviour.

- bpo-40318: Use SQLite3 trace v2 API, if it is available.

- bpo-40105: ZipFile truncates files to avoid corruption when a shorter
  comment is provided in append ("a") mode. Patch by Jan Mazur.

- bpo-40084: Fix ``Enum.__dir__``: dir(Enum.member) now includes attributes
  as well as methods.

- bpo-31122: ssl.wrap_socket() now raises ssl.SSLEOFError rather than
  OSError when peer closes connection during TLS negotiation

- bpo-39728: fix default `_missing_` so a duplicate `ValueError` is not set
  as the `__context__` of the original `ValueError`

- bpo-39244: Fixed :class:`multiprocessing.context.get_all_start_methods` to
  properly return the default method first on macOS.

- bpo-39040: Fix parsing of invalid mime headers parameters by collapsing
  whitespace between encoded words in a bare-quote-string.

- bpo-38731: Add ``--quiet`` option to command-line interface of
  :mod:`py_compile`. Patch by Gregory Schevchenko.

- bpo-35714: :exc:`struct.error` is now raised if there is a null character
  in a :mod:`struct` format string.

- bpo-38144: Added the *root_dir* and *dir_fd* parameters in
  :func:`glob.glob`.

- bpo-26543: Fix :meth:`IMAP4.noop()` when debug mode is enabled (ex:
  ``imaplib.Debug = 3``).

- bpo-12178: :func:`csv.writer` now correctly escapes *escapechar* when
  input contains *escapechar*.  Patch by Catalin Iacob, Berker Peksag, and
  Itay Elbirt.

- bpo-36290: AST nodes are now raising :exc:`TypeError` on conflicting
  keyword arguments. Patch contributed by Rémi Lapeyre.

- bpo-33944: Added site.py site-packages tracing in verbose mode.

- bpo-35078: Refactor formatweekday, formatmonthname methods in
  LocaleHTMLCalendar and LocaleTextCalendar classes in calendar module to
  call the base class methods.This enables customizable CSS classes for
  LocaleHTMLCalendar. Patch by Srinivas Reddy Thatiparthy

- bpo-29620: :func:`~unittest.TestCase.assertWarns` no longer raises a
  ``RuntimeException`` when accessing a module's ``__warningregistry__``
  causes importation of a new module, or when a new module is imported in
  another thread. Patch by Kernc.

- bpo-31844: Remove ``ParserBase.error()`` method from the private and
  undocumented ``_markupbase`` module.  :class:`html.parser.HTMLParser` is
  the only subclass of ``ParserBase`` and its ``error()`` implementation was
  deprecated in Python 3.4 and removed in Python 3.5.

- bpo-34226: Fix `cgi.parse_multipart` without content_length. Patch by
  Roger Duran

- bpo-33660: Fix pathlib.PosixPath to resolve a relative path located on the
  root directory properly.

- bpo-28557: Improve the error message for a 