+++++++++++
Python News
+++++++++++

What's New in Python 3.9.1 final?
=================================

*Release date: 2020-12-07*

Core and Builtins
-----------------

- bpo-42576: ``types.GenericAlias`` will now raise a ``TypeError`` when
  attempting to initialize with a keyword argument.  Previously, this would
  cause the interpreter to crash if the interpreter was compiled with debug
  symbols. This does not affect interpreters compiled for release.  Patch by
  Ken Jin.

Library
-------

- bpo-5054: CGIHTTPRequestHandler.run_cgi() HTTP_ACCEPT improperly parsed.
  Replace the special purpose getallmatchingheaders with generic get_all
  method and add relevant tests.

  Original Patch by Martin Panter. Modified by Senthil Kumaran.

- bpo-17735: :func:`inspect.findsource` now raises :exc:`OSError` instead of
  :exc:`IndexError` when :attr:`co_lineno` of a code object is greater than
  the file length. This can happen, for example, when a file is edited after
  it was imported.  PR by Irit Katriel.

- bpo-42116: Fix handling of trailing comments by :func:`inspect.getsource`.

- bpo-42487: ChainMap.__iter__ no longer calls __getitem__ on underlying
  maps

- bpo-42482: :class:`~traceback.TracebackException` no longer holds a
  reference to the exception's traceback object. Consequently, instances of
  TracebackException for equivalent but non-equal exceptions now compare as
  equal.

- bpo-42406: We fixed an issue in `pickle.whichmodule` in which importing
  `multiprocessing` could change the how pickle identifies which module an
  object belongs to, potentially breaking the unpickling of those objects.

- bpo-34215: Clarify the error message for
  :exc:`asyncio.IncompleteReadError` when ``expected`` is ``None``.

- bpo-12800: Extracting a symlink from a tarball should succeed and
  overwrite the symlink if it already exists. The fix is to remove the
  existing file or symlink before extraction. Based on patch by Chris AtLee,
  Jeffrey Kintscher, and Senthil Kumaran.

Tests
-----

- bpo-41473: Reenable test_gdb on gdb 9.2 and newer:
  https://bugzilla.redhat.com/show_bug.cgi?id=1866884 bug is fixed in gdb
  10.1.

- bpo-42553: Fix ``test_asyncio.test_call_later()`` race condition: don't
  measure asyncio performance in the ``call_later()`` unit test. The test
  failed randomly on the CI.

macOS
-----

- bpo-41116: If no explicit macOS SDK was specified, setup.py should check
  for Tcl and TK frameworks in /Library/Frameworks; the previous commit
  inadvertently broke that test.

- bpo-42504: Fix build on macOS Big Sur when MACOSX_DEPLOYMENT_TARGET=11

IDLE
----

- bpo-42508: Keep IDLE running on macOS.  Remove obsolete workaround that
  prevented running files with shortcuts when using new universal2
  installers built on macOS 11.


What's New in Python 3.9.1 release candidate 1?
===============================================

*Release date: 2020-11-24*

Security
--------

- bpo-42103: Prevented potential DoS attack via CPU and RAM exhaustion when
  processing malformed Apple Property List files in binary format.

- bpo-42051: The :mod:`plistlib` module no longer accepts entity
  declarations in XML plist files to avoid XML vulnerabilities. This should
  not affect users as entity declarations are not used in regular plist
  files.

- bpo-40791: Add ``volatile`` to the accumulator variable in
  ``hmac.compare_digest``, making constant-time-defeating optimizations less
  likely.

Core and Builtins
-----------------

- bpo-41686: On Windows, the ``SIGINT`` event, ``_PyOS_SigintEvent()``, is
  now created even if Python is configured to not install signal handlers
  (if :c:member:`PyConfig.install_signal_handlers` equals to 0, or
  ``Py_InitializeEx(0)``).

- bpo-42381: Allow assignment expressions in set literals and set
  comprehensions as per PEP 572. Patch by Pablo Galindo.

- bpo-42374: Fix a regression introduced by the new parser, where an
  unparenthesized walrus operator was not allowed within generator
  expressions.

- bpo-42296: On Windows, fix a regression in signal handling which prevented
  to interrupt a program using CTRL+C. The signal handler can be run in a
  thread different than the Python thread, in which case the test deciding
  if the thread can handle signals is wrong.

- bpo-42332: :class:`types.GenericAlias` objects can now be the targets of
  weakrefs.

- bpo-42218: Fixed a bug in the PEG parser that was causing crashes in debug
  mode. Now errors are checked in left-recursive rules to avoid cases where
  such errors do not get handled in time and appear as long-distance crashes
  in other places.

- bpo-42214: Fixed a possible crash in the PEG parser when checking for the
  '!=' token in the ``barry_as_flufl`` rule. Patch by Pablo Galindo.

- bpo-42143: Fix handling of errors during creation of ``PyFunctionObject``,
  which resulted in operations on uninitialized memory. Patch by Yonatan
  Goldschmidt.

- bpo-41659: Fix a bug in the parser, where a curly brace following a
  `primary` didn't fail immediately. This led to invalid expressions like `a
  {b}` to throw a :exc:`SyntaxError` with a wrong offset, or invalid
  expressions ending with a curly brace like `a {` to not fail immediately
  in the REPL.

- bpo-42150: Fix possible buffer overflow in the new parser when checking
  for continuation lines. Patch by Pablo Galindo.

- bpo-42123: Run the parser two times. On the first run, disable all the
  rules that only generate better error messages to gain performance. If
  there's a parse failure, run the parser a second time with those enabled.

- bpo-41910: Document the default implementation of `object.__eq__`.

- bpo-42057: Fix peephole optimizer misoptimize conditional jump +
  JUMP_IF_NOT_EXC_MATCH pair.

- bpo-41984: The garbage collector now tracks all user-defined classes.
  Patch by Brandt Bucher.

- bpo-41993: Fixed potential issues with removing not completely initialized
  module from ``sys.modules`` when import fails.

- bpo-41979: Star-unpacking is now allowed for with item's targets in the
  PEG parser.

- bpo-41909: Fixed stack overflow in :func:`issubclass` and
  :func:`isinstance` when getting the ``__bases__`` attribute leads to
  infinite recursion.

- bpo-41894: When loading a native module and a load failure occurs, prevent
  a possible UnicodeDecodeError when not running in a UTF-8 locale by
  decoding the load error message using the current locale's encoding.

- bpo-39934: Correctly count control blocks in 'except' in compiler. Ensures
  that a syntax error, rather a fatal error, occurs for deeply nested, named
  exception handlers.

Library
-------

- bpo-42328: Fixed :meth:`tkinter.ttk.Style.map`. The function accepts now
  the representation of the default state as empty sequence (as returned by
  ``Style.map()``). The structure of the result is now the same on all
  platform and does not depend on the value of ``wantobjects``.

- bpo-42345: Fix various issues with ``typing.Literal`` parameter handling
  (flatten, deduplicate, use type to cache key). Patch provided by Yurii
  Karabas.

- bpo-42350: Fix the :class:`threading.Thread` class at fork: do nothing if
  the thread is already stopped (ex: fork called at Python exit).
  Previously, an error was logged in the child process.

- bpo-42014: The ``onerror`` callback from ``shutil.rmtree`` now receives
  correct function when ``os.open`` fails.

- bpo-42237: Fix `os.sendfile()` on illumos.

- bpo-42249: Fixed writing binary Plist files larger than 4 GiB.

- bpo-35455: On Solaris, :func:`~time.thread_time` is now implemented with
  ``gethrvtime()`` because ``clock_gettime(CLOCK_THREAD_CPUTIME_ID)`` is not
  always available. Patch by Jakub Kulik.

- bpo-42233: The :func:`repr` of :mod:`typing` types containing
  :ref:`Generic Alias Types <types-genericalias>` previously did not show
  the parameterized types in the ``GenericAlias``.  They have now been
  changed to do so.

- bpo-41754: webbrowser: Ignore *NotADirectoryError* when calling
  ``xdg-settings``.

- bpo-29566: ``binhex.binhex()`` consisently writes macOS 9 line endings.

- bpo-42183: Fix a stack overflow error for asyncio Task or Future repr().

  The overflow occurs under some circumstances when a Task or Future
  recursively returns itself.

- bpo-42146: Fix memory leak in :func:`subprocess.Popen` in case an uid
  (gid) specified in `user` (`group`, `extra_groups`) overflows `uid_t`
  (`gid_t`).

- bpo-42140: Improve asyncio.wait function to create the futures set just
  one time.

- bpo-42103: :exc:`~plistlib.InvalidFileException` and :exc:`RecursionError`
  are now the only errors caused by loading malformed binary Plist file
  (previously ValueError and TypeError could be raised in some specific
  cases).

- bpo-41052: Pickling heap types implemented in C with protocols 0 and 1
  raises now an error instead of producing incorrect data.

- bpo-41491: plistlib: fix parsing XML plists with hexadecimal integer
  values

- bpo-42065: Fix an incorrectly formatted error from
  :meth:`_codecs.charmap_decode` when called with a mapped value outside the
  range of valid Unicode code points. PR by Max Bernstein.

- bpo-41966: Fix pickling pure Python :class:`datetime.time` subclasses.
  Patch by Dean Inwood.

- bpo-41976: Fixed a bug that was causing :func:`ctypes.util.find_library`
  to return ``None`` when triying to locate a library in an environment when
  gcc>=9 is available and ``ldconfig`` is not. Patch by Pablo Galindo

- bpo-41900: C14N 2.0 serialisation in xml.etree.ElementTree failed for
  unprefixed attributes when a default namespace was defined.

- bpo-41840: Fix a bug in the :mod:`symtable` module that was causing
  module-scope global variables to not be reported as both local and global.
  Patch by Pablo Galindo.

- bpo-41831: ``str()`` for the ``type`` attribute of the ``tkinter.Event``
  object always returns now the numeric code returned by Tk instead of the
  name of the event type.

- bpo-41817: fix `tkinter.EventType` Enum so all members are strings, and
  none are tuples

- bpo-41815: Fix SQLite3 segfault when backing up closed database. Patch
  contributed by Peter David McCormick.

- bpo-41316: Fix the :mod:`tarfile` module to write only basename of TAR
  file to GZIP compression header.

- bpo-16936: Allow ``ctypes.wintypes`` to be imported on non-Windows
  systems.

- bpo-40592: :func:`shutil.which` now ignores empty entries in
  :envvar:`PATHEXT` instead of treating them as a match.

- bpo-40550: Fix time-of-check/time-of-action issue in
  subprocess.Popen.send_signal.

- bpo-40492: Fix ``--outfile`` for :mod:`cProfile` / :mod:`profile` not
  writing the output file in the original directory when the program being
  profiled changes the working directory.  PR by Anthony Sottile.

- bpo-40105: ZipFile truncates files to avoid corruption when a shorter
  comment is provided in append ("a") mode. Patch by Jan Mazur.

- bpo-27321: Fixed KeyError exception when flattening an email to a string
  attempts to replace a non-existent Content-Transfer-Encoding header.

Documentation
-------------

- bpo-42153: Fix the URL for the IMAP protocol documents.

- bpo-42061: Document __format__ functionality for IP addresses.

- bpo-42010: Clarify that subscription expressions are also valid for
  certain :term:`classes <class>` and :term:`types <type>` in the standard
  library, and for user-defined classes and types if the classmethod
  :meth:`__class_getitem__` is provided.

- bpo-41805: Documented :ref:`generic alias type <types-genericalias>` and
  :data:`types.GenericAlias`. Also added an entry in glossary for
  :term:`generic types <generic type>`.

- bpo-41774: In Programming FAQ "Sequences (Tuples/Lists)" section, add "How
  do you remove multiple items from a list".

- bpo-35293: Fix RemovedInSphinx40Warning when building the documentation.
  Patch by Dong-hee Na.

- bpo-41726: Update the refcounts info of ``PyType_FromModuleAndSpec``.

- bpo-39693: Fix tarfile's extractfile documentation

- bpo-39416: Document some restrictions on the default string
  representations of numeric classes.

Tests
-----

- bpo-40754: Include ``_testinternalcapi`` module in Windows installer for
  test suite

- bpo-41739: Fix test_logging.test_race_between_set_target_and_flush(): the
  test now waits until all threads complete to avoid leaking running
  threads.

- bpo-41970: Avoid a test failure in ``test_lib2to3`` if the module has
  already imported at the time the test executes. Patch by Pablo Galindo.

- bpo-41944: Tests for CJK codecs no longer call ``eval()`` on content
  received via HTTP.

- bpo-41939: Fix test_site.test_license_exists_at_url(): call
  ``urllib.request.urlcleanup()`` to reset the global
  ``urllib.request._opener``. Patch by Victor Stinner.

- bpo-41561: test_ssl: skip test_min_max_version_mismatch when TLS 1.0 is
  not available

- bpo-41602: Add tests for SIGINT handling in the runpy module.

- bpo-41306: Fixed a failure in ``test_tk.test_widgets.ScaleTest`` happening
  when executing the test with Tk 8.6.10.

Build
-----

- bpo-42398: Fix a race condition in "make regen-all" when make -jN option
  is used to run jobs in parallel. The clinic.py script now only use atomic
  write to write files. Moveover, generated files are now left unchanged if
  the content does not change, to not change the file modification time.

- bpo-41617: Fix building ``pycore_bitutils.h`` internal header on old clang
  version without ``__builtin_bswap16()`` (ex: Xcode 4.6.3 on Mac OS X
  10.7). Patch by Joshua Root and Victor Stinner.

- bpo-38249: Update :c:macro:`Py_UNREACHABLE` to use __builtin_unreachable()
  if only the compiler is able to use it. Patch by Dong-hee Na.

- bpo-40998: Addressed three compiler warnings found by undefined behavior
  sanitizer (ubsan).

Windows
-------

- bpo-42120: Remove macro definition of ``copysign`` (to ``_copysign``) in
  headers.

- bpo-38439: Updates the icons for IDLE in the Windows Store package.

- bpo-41744: Fixes automatic import of props file when using the Nuget
  package.

- bpo-41557: Update Windows installer to use SQLite 3.33.0.

- bpo-38324: Avoid Unicode errors when accessing certain locale data on
  Windows.

macOS
-----

- bpo-41116: Ensure distutils.unixxcompiler.find_library_file can find
  system provided libraries on macOS 11.

- bpo-41100: Add support for macOS 11 and Apple Silicon systems.

  It is now possible to build "Universal 2" binaries using
  "--enable-universalsdk --with-universal-archs=universal2".

  Binaries build on later macOS versions can be deployed back to older
  versions (tested up to macOS 10.9), when using the correct deployment
  target. This is tested using Xcode 11 and later.

- bpo-38443: The ``--enable-universalsdk`` and ``--with-universal-archs``
  options for the configure script now check that the specified
  architectures can be used.

- bpo-41471: Ignore invalid prefix lengths in system proxy excludes.

- bpo-41557: Update macOS installer to use SQLite 3.33.0.

IDLE
----

- bpo-42426: Fix reporting offset of the RE error in searchengine.

- bpo-42415: Get docstrings for IDLE calltips more often by using
  inspect.getdoc.

- bpo-33987: Mostly finish using ttk widgets, mainly for editor, settings,
  and searches. Some patches by Mark Roseman.

- bpo-41775: Use 'IDLE Shell' as shell title

- bpo-35764: Rewrite the Calltips doc section.

- bpo-40181: In calltips, stop reminding that '/' marks the end of
  positional-only arguments.

- bpo-40511: Typing opening and closing parentheses inside the parentheses
  of a function call will no longer cause unnecessary "flashing" off and on
  of an existing open call-tip, e.g. when typed in a string literal.

- bpo-38439: Add a 256×256 pixel IDLE icon to the Windows .ico file. Created
  by Andrew Clover. Remove the low-color gif variations from the .ico file.

C API
-----

- bpo-42015: Fix potential crash in deallocating method objects when
  dynamically allocated `PyMethodDef`'s lifetime is managed through the
  ``self`` argument of a `PyCFunction`.

- bpo-41986: :c:data:`Py_FileSystemDefaultEncodeErrors` and
  :c:data:`Py_UTF8Mode` are available again in limited API.


What's New in Python 3.9.0 final?
=================================

*Release date: 2020-10-04*

Library
-------

- bpo-41815: Fix SQLite3 segfault when backing up closed database. Patch
  contributed by Peter David McCormick.

- bpo-41662: No longer override exceptions raised in ``__len__()`` of a
  sequence of parameters in :mod:`sqlite3` with
  :exc:`~sqlite3.ProgrammingError`.

- bpo-41662: Fixed crash when mutate list of parameters during iteration in
  :mod:`sqlite3`.

- bpo-39728: fix default `_missing_` so a duplicate `ValueError` is not set
  as the `__context__` of the original `ValueError`

Tests
-----

- bpo-41602: Add tests for SIGINT handling in the runpy module.

Build
-----

- bpo-38249: Update :c:macro:`Py_UNREACHABLE` to use __builtin_unreachable()
  if only the compiler is able to use it. Patch by Dong-hee Na.


What's New in Python 3.9.0 release candidate 2?
===============================================

*Release date: 2020-09-16*

Core and Builtins
-----------------

- bpo-41780: Fix :meth:`__dir__` of :class:`types.GenericAlias`. Patch by
  Batuhan Taskaya.

- bpo-41690: Fix a possible stack overflow in the parser when parsing
  functions and classes with a huge ammount of arguments. Patch by Pablo
  Galindo.

- bpo-41681: Fixes the wrong error description in the error raised by using
  2 `,` in format string in f-string and :meth:`str.format`.

- bpo-41654: Fix a crash that occurred when destroying subclasses of
  :class:`MemoryError`. Patch by Pablo Galindo.

- bpo-41631: The ``_ast`` module uses again a global state. Using a module
  state per module instance is causing subtle practical problems. For
  example, the Mercurial project replaces the ``__import__()`` function to
  implement lazy import, whereas Python expected that ``import _ast`` always
  return a fully initialized ``_ast`` module.

- bpo-41533: Free the stack allocated in ``va_build_stack`` if
  ``do_mkstack`` fails and the stack is not a ``small_stack``.

- bpo-41531: Fix a bug that was dropping keys when compiling dict literals
  with more than 0xFFFF elements. Patch by Pablo Galindo.

- bpo-41525: The output of ``python --help`` contains now only ASCII
  characters.

- bpo-29590: Make the stack trace correct after calling
  :meth:`generator.throw` on a generator that has yielded from a ``yield
  from``.

Library
-------

- bpo-41517: fix bug allowing Enums to be extended via multiple inheritance

- bpo-39587: use the correct mix-in data type when constructing Enums

- bpo-41789: Honor `object` overrides in `Enum` class creation
  (specifically, `__str__`, `__repr__`, `__format__`, and `__reduce_ex__`).

- bpo-39651: Fix a race condition in the ``call_soon_threadsafe()`` method
  of ``asyncio.ProactorEventLoop``: do nothing if the self-pipe socket has
  been closed.

- bpo-41720: Fixed :meth:`turtle.Vec2D.__rmul__` for arguments which are not
  int or float.

- bpo-41696: Fix handling of debug mode in :func:`asyncio.run`. This allows
  setting ``PYTHONASYNCIODEBUG`` or ``-X dev`` to enable asyncio debug mode
  when using :func:`asyncio.run`.

- bpo-41687: Fix implementation of sendfile to be compatible with Solaris.

- bpo-39010: Restarting a ``ProactorEventLoop`` on Windows no longer logs
  spurious ``ConnectionResetErrors``.

- bpo-41609: The pdb whatis command correctly reports instance methods as
  'Method' rather than 'Function'.

- bpo-32751: When cancelling the task due to a timeout,
  :meth:`asyncio.wait_for` will now wait until the cancellation is complete
  also in the case when *timeout* is <= 0, like it does with positive
  timeouts.

- bpo-37658: :meth:`asyncio.wait_for` now properly handles races between
  cancellation of itself and the completion of the wrapped awaitable.

- bpo-40782: Change the method asyncio.AbstractEventLoop.run_in_executor to
  not be a coroutine.

- bpo-41520: Fix :mod:`codeop` regression that prevented turning compile
  warnings into errors.

- bpo-41503: Fixed a race between setTarget and flush in
  logging.handlers.MemoryHandler.

- bpo-41344: Prevent creating :class:`shared_memory.SharedMemory` objects
  with :code:`size=0`.

- bpo-41025: Fixed an issue preventing the C implementation of
  :class:`zoneinfo.ZoneInfo` from being subclassed.

- bpo-31122: ssl.wrap_socket() now raises ssl.SSLEOFError rather than
  OSError when peer closes connection during TLS negotiation

- bpo-33660: Fix pathlib.PosixPath to resolve a relative path located on the
  root directory properly.

Documentation
-------------

- bpo-37149: Change Shipman tkinter doc link from archive.org to TkDocs.
  (The doc has been removed from the NMT server.)  The new link responds
  much faster and includes a short explanatory note.

- bpo-41624: Fix the signature of :class:`typing.Coroutine`.

- bpo-40204: Enable Sphinx 3.2 ``c_allow_pre_v3`` option and disable
  ``c_warn_on_allowed_pre_v3`` option to make the documentation compatible
  with Sphinx 2 and Sphinx 3.

- bpo-40979: Refactored typing.rst, arranging more than 70 classes,
  functions, and decorators into new sub-sections.

- bpo-39883: Make code, examples, and recipes in the Python documentation be
  licensed under the more permissive BSD0 license in addition to the
  existing Python 2.0 license.

Tests
-----

- bpo-41731: Make test_cmd_line_script pass with option '-vv'.

Build
-----

- bpo-41617: Fix ``pycore_byteswap.h`` header file to support old clang
  versions: ``__builtin_bswap16()`` is not available in LLVM clang 3.0.

Windows
-------

- bpo-41526: Fixed layout of final page of the installer by removing the
  special thanks to Mark Hammond (with his permission).

C API
-----

- bpo-41524: Fix bug in PyOS_mystrnicmp and PyOS_mystricmp that incremented
  pointers beyond the end of a string.


What's New in Python 3.9.0 release candidate 1?
===============================================

*Release date: 2020-08-11*

Core and Builtins
-----------------

- bpo-38156: Handle interrupts that come after EOF correctly in
  ``PyOS_StdioReadline``.

Library
-------

- bpo-41497: Fix potential UnicodeDecodeError in dis module.

- bpo-41490: Update :mod:`ensurepip` to install pip 20.2.1 and setuptools
  49.2.1.

- bpo-41467: On Windows, fix asyncio ``recv_into()`` return value when the
  socket/pipe is closed (:exc:`BrokenPipeError`): return ``0`` rather than
  an empty byte string (``b''``).

- bpo-41425: Make tkinter doc example runnable.

- bpo-41384: Raise TclError instead of TypeError when an unknown option is
  passed to tkinter.OptionMenu.

- bpo-38731: Fix :exc:`NameError` in command-line interface of
  :mod:`py_compile`.

- bpo-41317: Use add_done_callback() in asyncio.loop.sock_accept() to
  unsubscribe reader early on cancellation.

- bpo-41364: Reduce import overhead of :mod:`uuid`.

- bpo-41341: Recursive evaluation of `typing.ForwardRef` in
  `get_type_hints`.

- bpo-41182: selector: use DefaultSelector based upon implementation

- bpo-40726: Handle cases where the ``end_lineno`` is ``None`` on
  :func:`ast.increment_lineno`.

Documentation
-------------

- bpo-41045: Add documentation for debug feature of f-strings.

- bpo-41314: Changed the release when ``from __future__ import annotations``
  becomes the default from ``4.0`` to ``3.10`` (following a change in PEP
  563).

Windows
-------

- bpo-41492: Fixes the description that appears in UAC prompts.

- bpo-40948: Improve post-install message to direct people to the "py"
  command.

- bpo-41412: The installer will now fail to install on Windows 7 and Windows
  8. Further, the UCRT dependency is now always downloaded on demand.

- bpo-40741: Update Windows release to include SQLite 3.32.3.

IDLE
----

- bpo-41468: Improve IDLE run crash error message (which users should never
  see).

- bpo-41373: Save files loaded with no line ending, as when blank, or
  different line endings, by setting its line ending to the system default.
  Fix regression in 3.8.4 and 3.9.0b4.


What's New in Python 3.9.0 beta 5?
==================================

*Release date: 2020-07-20*

Security
--------

- bpo-41304: Fixes `python3x._pth` being ignored on Windows, caused by the
  fix for :issue:`29778` (CVE-2020-15801).

- bpo-41162: Audit hooks are now cleared later during finalization to avoid
  missing events.

- bpo-29778: Ensure :file:`python3.dll` is loaded from correct locations
  when Python is embedded (CVE-2020-15523).

- bpo-39603: Prevent http header injection by rejecting control characters
  in http.client.putrequest(...).

Core and Builtins
-----------------

- bpo-41295: Resolve a regression in CPython 3.8.4 where defining
  "__setattr__" in a multi-inheritance setup and calling up the hierarchy
  chain could fail if builtins/extension types were involved in the base
  types.

- bpo-41247: Always cache the running loop holder when running
  ``asyncio.set_running_loop``.

- bpo-41252: Fix incorrect refcounting in _ssl.c's
  ``_servername_callback()``.

- bpo-41215: Use non-NULL default values in the PEG parser keyword list to
  overcome a bug that was preventing Python from being properly compiled
  when using the XLC compiler. Patch by Pablo Galindo.

- bpo-41218: Python 3.8.3 had a regression where compiling with
  ast.PyCF_ALLOW_TOP_LEVEL_AWAIT would aggressively mark list comprehension
  with CO_COROUTINE. Now only list comprehension making use of async/await
  will tagged as so.

- bpo-41175: Guard against a NULL pointer dereference within bytearrayobject
  triggered by the ``bytearray() + bytearray()`` operation.

- bpo-39960: The "hackcheck" that prevents sneaking around a type's
  __setattr__() by calling the superclass method was rewritten to allow C
  implemented heap types.

Library
-------

- bpo-41288: Unpickling invalid NEWOBJ_EX opcode with the C implementation
  raises now UnpicklingError instead of crashing.

- bpo-39017: Avoid infinite loop when reading specially crafted TAR files
  using the tarfile module (CVE-2019-20907).

- bpo-41235: Fix the error handling in
  :meth:`ssl.SSLContext.load_dh_params`.

- bpo-41207: In distutils.spawn, restore expectation that DistutilsExecError
  is raised when the command is not found.

- bpo-39168: Remove the ``__new__`` method of :class:`typing.Generic`.

- bpo-41194: Fix a crash in the ``_ast`` module: it can no longer be loaded
  more than once. It now uses a global state rather than a module state.

- bpo-39384: Fixed email.contentmanager to allow set_content() to set a null
  string.

Documentation
-------------

- bpo-37703: Updated Documentation to comprehensively elaborate on the
  behaviour of gather.cancel()

macOS
-----

- bpo-40741: Update macOS installer to use SQLite 3.32.3.

IDLE
----

- bpo-41300: Save files with non-ascii chars. Fix regression released in
  3.9.0b4 and 3.8.4.

- bpo-37765: Add keywords to module name completion list.  Rewrite
  Completions section of IDLE doc.

C API
-----

- bpo-40170: Revert :c:func:`PyType_HasFeature` change: it reads again
  directly the :c:member:`PyTypeObject.tp_flags` member when the limited C
  API is not used, rather than always calling :c:func:`PyType_GetFlags`
  which hides implementation details.


What's New in Python 3.9.0 beta 4?
==================================

*Release date: 2020-07-02*

Security
--------

- bpo-41004: The __hash__() methods of  ipaddress.IPv4Interface and
  ipaddress.IPv6Interface incorrectly generated constant hash values of 32
  and 128 respectively. This resulted in always causing hash collisions. The
  fix uses hash() to generate hash values for the tuple of (address, mask
  length, network address).

Core and Builtins
-----------------

- bpo-41094: Fix decoding errors with audit when open files with non-ASCII
  names on non-UTF-8 locale.

- bpo-41084: Prefix the error message with 'f-string: ', when parsing an
  f-string expression which throws a :exc:`SyntaxError`.

- bpo-41076: Pre-feed the parser with the location of the f-string
  expression, not the f-string itself, which allows us to skip the shifting
  of the AST node locations after the parsing is completed.

- bpo-40939: Deprecate :c:func:`PyNode_Compile`.

- bpo-41056: Fixes a reference to deallocated stack space during startup
  when constructing sys.path involving a relative symlink when code was
  supplied via -c.  (discovered via Coverity)

- bpo-41061: Fix incorrect expressions and asserts in hashtable code and
  tests.

- bpo-41052: Opt out serialization/deserialization for _random.Random

- bpo-40939: Deprecate :c:func:`PyParser_SimpleParseStringFlags`,
  :c:func:`PyParser_SimpleParseStringFlagsFilename` and
  :c:func:`PyParser_SimpleParseFileFlags`.

- bpo-35975: Stefan Behnel reported that cf_feature_version is used even
  when PyCF_ONLY_AST is not set. This is against the intention and against
  the documented behavior, so it's been fixed.

- bpo-40985: Fix a bug that caused the :exc:`SyntaxError` text to be empty
  when a file ends with a line ending in a line continuation character (i.e.
  backslash). The error text should contain the text of the last line.

- bpo-40958: Fix a possible buffer overflow in the PEG parser when gathering
  information for emitting syntax errors. Patch by Pablo Galindo.

- bpo-40957: Fix refleak in _Py_fopen_obj() when PySys_Audit() fails

- bpo-40947: The Python :ref:`Path Configuration <init-path-config>` now
  takes :c:member:`PyConfig.platlibdir` in account.

- bpo-40847: Fix a bug where a line with only a line continuation character
  is not considered a blank line at tokenizer level. In such cases, more
  than a single `NEWLINE` token was emitted. The old parser was working
  around the issue, but the new parser threw a :exc:`SyntaxError` for valid
  input due to this. For example, an empty line following a line
  continuation character was interpreted as a :exc:`SyntaxError`.

- bpo-40824: Unexpected errors in calling the ``__iter__`` method are no
  longer masked by ``TypeError`` in the :keyword:`in` operator and functions
  :func:`~operator.contains`, :func:`~operator.indexOf` and
  :func:`~operator.countOf` of the :mod:`operator` module.

- bpo-19569: Add the private macros ``_Py_COMP_DIAG_PUSH``,
  ``_Py_COMP_DIAG_IGNORE_DEPR_DECLS``, and ``_Py_COMP_DIAG_POP``.

Library
-------

- bpo-41193: The ``write_history()`` atexit function of the readline
  completer now ignores any :exc:`OSError` to ignore error if the filesystem
  is read-only, instead of only ignoring :exc:`FileNotFoundError` and
  :exc:`PermissionError`.

- bpo-41161: The decimal module now requires libmpdec-2.5.0. Users of
  --with-system-libmpdec should update their system library.

- bpo-40874: The decimal module now requires libmpdec-2.5.0.

- bpo-41138: Fixed the :mod:`trace` module CLI for Python source files with
  non-UTF-8 encoding.

- bpo-31938: Fix default-value signatures of several functions in the
  :mod:`select` module - by Anthony Sottile.

- bpo-41068: Fixed reading files with non-ASCII names from ZIP archive
  directly after writing them.

- bpo-41058: :func:`pdb.find_function` now correctly determines the source
  file encoding.

- bpo-41056: Fix a NULL pointer dereference within the ssl module during a
  MemoryError in the keylog callback. (discovered by Coverity)

- bpo-41056: Fixed an instance where a MemoryError within the zoneinfo
  module might not be reported or not reported at its source. (found by
  Coverity)

- bpo-41048: :func:`mimetypes.read_mime_types` function reads the rule file
  using UTF-8 encoding, not the locale encoding. Patch by Srinivas Reddy
  Thatiparthy.

- bpo-41043: Fixed the use of :func:`~glob.glob` in the stdlib: literal part
  of the path is now always correctly escaped.

- bpo-40448: :mod:`ensurepip` now disables the use of `pip` cache when
  installing the bundled versions of `pip` and `setuptools`.  Patch by
  Krzysztof Konopko.

- bpo-40967: Removed :meth:`asyncio.Task.current_task` and
  :meth:`asyncio.Task.all_tasks`. Patch contributed by Rémi Lapeyre.

- bpo-40955: Fix a minor memory leak in :mod:`subprocess` module when
  extra_groups was specified.

- bpo-40855: The standard deviation and variance functions in the statistics
  module were ignoring their mu and xbar arguments.

- bpo-40924: Removed support for loaders implementing .files and supplying
  TraversableResources.

- bpo-40939: Use the new PEG parser when generating the stdlib
  :mod:`keyword` module.

- bpo-40834: Fix truncate when sending str object
  with_xxsubinterpreters.channel_send.

- bpo-26407: Unexpected errors in calling the ``__iter__`` method are no
  longer masked by ``TypeError`` in :func:`csv.reader`,
  :func:`csv.writer.writerow` and :meth:`csv.writer.writerows`.

- bpo-38488: Update ensurepip to install pip 20.1.1 and setuptools 47.1.0.

- bpo-36543: Restored the deprecated :mod:`xml.etree.cElementTree` module.

- bpo-34226: Fix `cgi.parse_multipart` without content_length. Patch by
  Roger Duran

Tests
-----

- bpo-41085: Fix integer overflow in the :meth:`array.array.index` method on
  64-bit Windows for index larger than ``2**31``.

- bpo-41069: :data:`test.support.TESTFN` and the current directory for tests
  when run via ``test.regrtest`` contain now non-ascii characters if
  possible.

- bpo-38377: On Linux, skip tests using multiprocessing if the current user
  cannot create a file in ``/dev/shm/`` directory. Add the
  :func:`~test.support.skip_if_broken_multiprocessing_synchronize` function
  to the :mod:`test.support` module.

- bpo-41009: Fix use of ``support.require_{linux|mac|freebsd}_version()``
  decorators as class decorator.

- bpo-41003: Fix ``test_copyreg`` when ``numpy`` is installed:
  ``test.pickletester`` now saves/restores warnings filters when importing
  ``numpy``, to ignore filters installed by ``numpy``.

- bpo-40964: Disable remote :mod:`imaplib` tests, host cyrus.andrew.cmu.edu
  is blocking incoming connections.

- bpo-40927: Fix test_binhex when run twice: it now uses
  import_fresh_module() to ensure that it raises DeprecationWarning each
  time.

- bpo-34401: Make test_gdb properly run on HP-UX. Patch by Michael Osipov.

Build
-----

- bpo-40204: Pin Sphinx version to 2.3.1 in ``Doc/Makefile``.

Windows
-------

- bpo-41074: Fixed support of non-ASCII names in functions
  :func:`msilib.OpenDatabase` and :func:`msilib.init_database` and non-ASCII
  SQL in method :meth:`msilib.Database.OpenView`.

- bpo-40164: Updates Windows OpenSSL to 1.1.1g

- bpo-37556: Extend py.exe help to mention overrides via venv, shebang,
  environmental variables & ini files.

macOS
-----

- bpo-39580: Avoid opening Finder window if running installer from the
  command line. Patch contributed by Rick Heil.

- bpo-41100: Fix configure error when building on macOS 11. Note that the
  current Python release was released shortly after the first developer
  preview of macOS 11 (Big Sur); there are other known issues with building
  and running on the developer preview. Big Sur is expected to be fully
  supported in a future bugfix release of Python 3.8.x and with 3.9.0.

- bpo-41005: fixed an XDG settings issue not allowing macos to open browser
  in webbrowser.py

IDLE
----

- bpo-41152: The encoding of ``stdin``, ``stdout`` and ``stderr`` in IDLE is
  now always UTF-8.

- bpo-41144: Make Open Module open a special module such as os.path.

C API
-----

- bpo-36346: Mark ``Py_UNICODE_COPY``, ``Py_UNICODE_FILL``,
  ``PyUnicode_WSTR_LENGTH``, ``PyUnicode_FromUnicode``,
  ``PyUnicode_AsUnicode``, ``_PyUnicode_AsUnicode``, and
  ``PyUnicode_AsUnicodeAndSize`` as deprecated in C. Remove
  ``Py_UNICODE_MATCH`` which was deprecated and broken since Python 3.3.

- bpo-36020: On Windows, ``#include "pyerrors.h"`` no longer defines
  ``snprintf`` and ``vsnprintf`` macros.

- bpo-40703: The PyType_FromSpec*() functions no longer overwrite the type's
  "__module__" attribute if it is set via "Py_tp_members" or "Py_tp_getset".


What's New in Python 3.9.0 beta 3?
==================================

*Release date: 2020-06-09*

Library
-------

- bpo-40924: `importlib.resources`: Reverted ``TraversableResources``
  implementations from the built-in loaders (SourceFileLoader and
  ZipImporter) as it was an incompatible change introduced in 3.9.0 beta 2
  causing through a chain of events for root TLS certificates to be missing.

Build
-----

- bpo-40684: ``make install`` now uses the ``PLATLIBDIR`` variable for the
  destination ``lib-dynload/`` directory when ``./configure
  --with-platlibdir`` is used.


What's New in Python 3.9.0 beta 2?
==================================

*Release date: 2020-06-08*

Core and Builtins
-----------------

- bpo-40904: Fix possible segfault in the new PEG parser when parsing
  f-string containing yield statements with no value (:code:`f"{yield}"`).
  Patch by Pablo Galindo

- bpo-40903: Fixed a possible segfault in the new PEG parser when producing
  error messages for invalid assignments of the form :code:`p=p=`. Patch by
  Pablo Galindo

- bpo-40880: Fix invalid memory read in the new parser when checking
  newlines in string literals. Patch by Pablo Galindo.

- bpo-40883: Fix memory leak in when parsing f-strings in the new parser.
  Patch by Pablo Galindo

- bpo-40870: Raise :exc:`ValueError` when validating custom AST's where the
  constants ``True``, ``False`` and ``None`` are used within a
  :class:`ast.Name` node.

- bpo-40854: Allow overriding :data:`sys.platlibdir` via a new
  :envvar:`PYTHONPLATLIBDIR` environment variable.

- bpo-40826: Fix GIL usage in :c:func:`PyOS_Readline`: lock the GIL to set
  an exception and pass the Python thread state when checking if there is a
  pending signal.

- bpo-40780: Fix a corner case where g-style string formatting of a float
  failed to remove trailing zeros.

- bpo-38964: When there's a :exc:`SyntaxError` in the expression part of an
  fstring, the filename attribute of the :exc:`SyntaxError` gets correctly
  set to the name of the file the fstring resides in.

- bpo-40750: Support the "-d" debug flag in the new PEG parser. Patch by
  Pablo Galindo

- bpo-40217: Instances of types created with
  :c:func:`PyType_FromSpecWithBases` will no longer automatically visit
  their class object when traversing references in the garbage collector.
  The user is expected to manually visit the object's class. Patch by Pablo
  Galindo.

- bpo-40696: Fix a hang that can arise after :meth:`generator.throw` due to
  a cycle in the exception context chain.

Library
-------

- bpo-39791: Refresh importlib.metadata from importlib_metadata 1.6.1.

- bpo-40807: Stop codeop._maybe_compile, used by code.InteractiveInterpreter
  (and IDLE). from from emitting each warning three times.

- bpo-39791: Built-in loaders (SourceFileLoader and ZipImporter) now supply
  ``TraversableResources`` implementations for ``ResourceReader``, and the
  fallback function has been removed.

- bpo-17005: The topological sort functionality that was introduced
  initially in the :mod:`functools` module has been moved to a new
  :mod:`graphlib` module to better accommodate the new tools and keep the
  original scope of the :mod:`functools` module. Patch by Pablo Galindo

- bpo-40777: Initialize PyDateTime_IsoCalendarDateType.tp_base at run-time
  to avoid errors on some compilers.

- bpo-40767: :mod:`webbrowser` now properly finds the default browser in
  pure Wayland systems by checking the WAYLAND_DISPLAY environment variable.
  Patch contributed by Jérémy Attali.

- bpo-40791: :func:`hashlib.compare_digest` uses OpenSSL's
  ``CRYPTO_memcmp()`` function when OpenSSL is available.

- bpo-40795: :mod:`ctypes` module: If ctypes fails to convert the result of
  a callback or if a ctypes callback function raises an exception,
  sys.unraisablehook is now called with an exception set. Previously, the
  error was logged into stderr by :c:func:`PyErr_Print`.

- bpo-30008: Fix :mod:`ssl` code to be compatible with OpenSSL 1.1.x builds
  that use ``no-deprecated`` and ``--api=1.1.0``.

- bpo-30064: Fix asyncio ``loop.sock_*`` race condition issue

- bpo-40759: Deprecate the :mod:`symbol` module.

- bpo-40737: Fix possible reference leak for :mod:`sqlite3` initialization.

- bpo-40698: :mod:`distutils` upload creates SHA2-256 and Blake2b-256
  digests. MD5 digests is skipped if platform blocks MD5.

- bpo-40695: :mod:`hashlib` no longer falls back to builtin hash
  implementations when OpenSSL provides a hash digest and the algorithm is
  blocked by security policy.

- bpo-9216: func:`hashlib.new` passed ``usedforsecurity`` to OpenSSL EVP
  constructor ``_hashlib.new()``. test_hashlib and test_smtplib handle
  strict security policy better.

- bpo-40614: :func:`ast.parse` will not parse self documenting expressions
  in f-strings when passed ``feature_version`` is less than ``(3, 8)``.

- bpo-40671: Prepare ``_hashlib`` for :pep:`489` and use
  :c:func:`PyModule_AddType`.

- bpo-32309: Added a new :term:`coroutine` :func:`asyncio.to_thread`. It is
  mainly used for running IO-bound functions in a separate thread to avoid
  blocking the event loop, and essentially works as a high-level version of
  :meth:`~asyncio.loop.run_in_executor` that can directly take keyword
  arguments.

- bpo-40630: Added :func:`tracemalloc.reset_peak` to set the peak size of
  traced memory blocks to the current size, to measure the peak of specific
  pieces of code.

- bpo-13097: ``ctypes`` now raises an ``ArgumentError`` when a callback is
  invoked with more than 1024 arguments.

- bpo-23082: Updated the error message and docs of PurePath.relative_to() to
  better reflect the function behaviour.

- bpo-39244: Fixed :class:`multiprocessing.context.get_all_start_methods` to
  properly return the default method first on macOS.

- bpo-39040: Fix parsing of invalid mime headers parameters by collapsing
  whitespace between encoded words in a bare-quote-string.

- bpo-35714: :exc:`struct.error` is now raised if there is a null character
  in a :mod:`struct` format string.

- bpo-36290: AST nodes are now raising :exc:`TypeError` on conflicting
  keyword arguments. Patch contributed by Rémi Lapeyre.

Tests
-----

- bpo-17258: Skip some :mod:`multiprocessing` tests when MD5 hash digest is
  blocked.

Build
-----

- bpo-40514: Remove ``--with-experimental-isolated-subinterpreters``
  configure option in Python 3.9: the experiment continues in the master
  branch, but it's no longer needed in 3.9.

- bpo-40683: Fixed an issue where the :mod:`zoneinfo` module and its tests
  were not included when Python is installed with ``make``.

Windows
-------

- bpo-39631: Changes the registered MIME type for ``.py`` files on Windows
  to ``text/x-python`` instead of ``text/plain``.

- bpo-40677: Manually define IO_REPARSE_TAG_APPEXECLINK in case some old
  Windows SDK doesn't have it.

macOS
-----

- bpo-40741: Update macOS installer to use SQLite 3.32.2.

IDLE
----

- bpo-39885: Make context menu Cut and Copy work again when right-clicking
  within a selection.

- bpo-40723: Make test_idle pass when run after import.

C API
-----

- bpo-40910: Export explicitly the :c:func:`Py_GetArgcArgv` function to the
  C API and document the function. Previously, it was exported implicitly
  which no longer works since Python is built with ``-fvisibility=hidden``.

- bpo-40724: Allow defining buffer slots in type specs.

- bpo-40826: :c:func:`PyOS_InterruptOccurred` now fails with a fatal error
  if it is called with the GIL released.


What's New in Python 3.9.0 beta 1?
==================================

*Release date: 2020-05-19*

Security
--------

- bpo-40501: :mod:`uuid` no longer uses :mod:`ctypes` to load
  :file:`libuuid` or :file:`rpcrt4.dll` at runtime.

Core and Builtins
-----------------

- bpo-40663: Correctly generate annotations where parentheses are omitted
  but required (e.g: ``Type[(str, int, *other))]``.

- bpo-40596: Fixed :meth:`str.isidentifier` for non-canonicalized strings
  containing non-BMP characters on Windows.

- bpo-40593: Improved syntax errors for invalid characters in source code.

- bpo-40585: Fixed a bug when using :func:`codeop.compile_command` that was
  causing exceptions to be swallowed with the new parser. Patch by Pablo
  Galindo

- bpo-40566: Apply :pep:`573` to :mod:`abc`.

- bpo-40502: Initialize ``n->n_col_offset``. (Patch by Joannah Nanjekye)

- bpo-40527: Fix command line argument parsing: no longer write errors
  multiple times into stderr.

- bpo-1635741: Port :mod:`errno` to multiphase initialization (:pep:`489`).

- bpo-40523: Add pass-throughs for :func:`hash` and :func:`reversed` to
  :class:`weakref.proxy` objects. Patch by Pablo Galindo.

- bpo-1635741: Port :mod:`syslog` to multiphase initialization (:pep:`489`).

- bpo-40246: Reporting a specialised error message for invalid string
  prefixes, which was introduced in :issue:`40246`, is being reverted due to
  backwards compatibility concerns for strings that immediately follow a
  reserved keyword without whitespace between them. Constructs like
  `bg="#d00" if clear else"#fca"` were failing to parse, which is not an
  acceptable breakage on such short notice.

- bpo-40417: Fix imp module deprecation warning when PyImport_ReloadModule
  is called. Patch by Robert Rouhani.

- bpo-40408: Fixed support of nested type variables in GenericAlias (e.g.
  ``list[list[T]]``).

- bpo-1635741: Port _stat module to multiphase initialization (:pep:`489`).

- bpo-29587: Enable implicit exception chaining when calling
  :meth:`generator.throw`.

- bpo-40328: Add tools for generating mappings headers for CJKCodecs.

- bpo-40228: Setting frame.f_lineno is now robust w.r.t. changes in the
  source-to-bytecode compiler

- bpo-38880: Added the ability to list interpreters associated with channel
  ends in the internal subinterpreters module.

- bpo-37986: Improve performance of :c:func:`PyLong_FromDouble` for values
  that fit into :c:type:`long`.

Library
-------

- bpo-40662: Fixed :func:`ast.get_source_segment` for ast nodes that have
  incomplete location information. Patch by Irit Katriel.

- bpo-40665: Convert :mod:`bisect` to use Argument Clinic.

- bpo-40536: Added the :func:`~zoneinfo.available_timezones` function to the
  :mod:`zoneinfo` module. Patch by Paul Ganssle.

- bpo-40645: The :class:`hmac.HMAC` exposes internal implementation details.
  The attributes ``digest_cons``, ``inner``, and ``outer`` are deprecated
  and will be removed in the future.

- bpo-40645: The internal module ``_hashlib`` wraps and exposes OpenSSL's
  HMAC API. The new code will be used in Python 3.10 after the internal
  implementation details of the pure Python HMAC module are no longer part
  of the public API.

- bpo-40637: Builtin hash modules can now be disabled or selectively enabled
  with ``configure --with-builtin-hashlib-hashes=sha3,blake1`` or
  ``--without-builtin-hashlib-hashes``.

- bpo-37630: The :mod:`hashlib` module can now use SHA3 hashes and SHAKE XOF
  from OpenSSL when available.

- bpo-40479: The :mod:`hashlib` now compiles with OpenSSL 3.0.0-alpha2.

- bpo-40257: Revert changes to :func:`inspect.getdoc`.

- bpo-40607: When cancelling a task due to timeout, :meth:`asyncio.wait_for`
  will now propagate the exception if an error happens during cancellation.
  Patch by Roman Skurikhin.

- bpo-40612: Fix edge cases in SyntaxError formatting. If the offset is <=
  0, no caret is printed. If the offset is > line length, the caret is
  printed pointing just after the last character.

- bpo-40597: If text content lines are longer than policy.max_line_length,
  always use a content-encoding to make sure they are wrapped.

- bpo-40571: Added functools.cache() as a simpler, more discoverable way to
  access the unbounded cache variant of lru_cache(maxsize=None).

- bpo-40503: :pep:`615`, the :mod:`zoneinfo` module. Adds support for the
  IANA time zone database.

- bpo-40397: Removed attributes ``__args__`` and ``__parameters__`` from
  special generic aliases like ``typing.List`` (not subscripted).

- bpo-40549: Convert posixmodule.c ("posix" or "nt" module) to the
  multiphase initialization (PEP 489).

- bpo-31033: Add a ``msg`` argument to :meth:`Future.cancel` and
  :meth:`Task.cancel`.

- bpo-40541: Added an optional *counts* parameter to random.sample().

- bpo-40515: The :mod:`ssl` and :mod:`hashlib` modules now actively check
  that OpenSSL is build with thread support. Python 3.7.0 made thread
  support mandatory and no longer works safely with a no-thread builds.

- bpo-31033: When a :class:`asyncio.Task` is cancelled, the exception
  traceback now chains all the way back to where the task was first
  interrupted.

- bpo-40504: :func:`functools.lru_cache` objects can now be the targets of
  weakrefs.

- bpo-40559: Fix possible memory leak in the C implementation of
  :class:`asyncio.Task`.

- bpo-40480: ``fnmatch.fnmatch()`` could take exponential time in the
  presence of multiple ``*`` pattern characters.  This was repaired by
  generating more elaborate regular expressions to avoid futile
  backtracking.

- bpo-40495: :mod:`compileall` is now able to use hardlinks to prevent
  duplicates in a case when ``.pyc`` files for different optimization levels
  have the same content.

- bpo-40457: The ssl module now support OpenSSL builds without TLS 1.0 and
  1.1 methods.

- bpo-40355: Improve error reporting in :func:`ast.literal_eval` in the
  presence of malformed :class:`ast.Dict` nodes instead of silently ignoring
  any non-conforming elements. Patch by Curtis Bucher.

- bpo-40465: Deprecated the optional *random* argument to
  *random.shuffle()*.

- bpo-40459: :func:`platform.win32_ver` now produces correct *ptype* strings
  instead of empty strings.

- bpo-39435: The first argument of :func:`pickle.loads` is now
  positional-only.

- bpo-39305: Update :mod:`nntplib` to merge :class:`nntplib.NNTP` and
  :class:`nntplib._NNTPBase`. Patch by Dong-hee Na.

- bpo-32494: Update :mod:`dbm.gnu` to use gdbm_count if possible when
  calling :func:`len`. Patch by Dong-hee Na.

- bpo-40453: Add ``isolated=True`` keyword-only parameter to
  ``_xxsubinterpreters.create()``. An isolated subinterpreter cannot spawn
  threads, spawn a child process or call ``os.fork()``.

- bpo-40286: Remove ``_random.Random.randbytes()``: the C implementation of
  ``randbytes()``. Implement the method in Python to ease subclassing:
  ``randbytes()`` now directly reuses ``getrandbits()``.

- bpo-40394: Added default arguments to
  :meth:`difflib.SequenceMatcher.find_longest_match()`.

- bpo-39995: Fix a race condition in concurrent.futures._ThreadWakeup:
  access to _ThreadWakeup is now protected with the shutdown lock.

- bpo-30966: ``Process.shutdown(wait=True)`` of :mod:`concurrent.futures`
  now closes explicitly the result queue.

- bpo-30966: Add a new :meth:`~multiprocessing.SimpleQueue.close` method to
  the :class:`~multiprocessing.SimpleQueue` class to explicitly close the
  queue.

- bpo-39966: Revert bpo-25597. :class:`unittest.mock.MagicMock` with wraps'
  set uses default return values for magic methods.

- bpo-39791: Added ``files()`` function to importlib.resources with support
  for subdirectories in package data, matching backport in
  importlib_resources 1.5.

- bpo-40375: :meth:`imaplib.IMAP4.unselect` is added. Patch by Dong-hee Na.

- bpo-40389: ``repr()`` now returns ``typing.Optional[T]`` when called for
  ``typing.Union`` of two types, one of which is ``NoneType``.

- bpo-40291: Add support for CAN_J1939 sockets (available on Linux 5.4+)

- bpo-40273: :class:`types.MappingProxyType` is now reversible.

- bpo-39075: The repr for :class:`types.SimpleNamespace` is now insertion
  ordered rather than alphabetical.

- bpo-40192: On AIX, :func:`~time.thread_time` is now implemented with
  ``thread_cputime()`` which has nanosecond resolution, rather than
  ``clock_gettime(CLOCK_THREAD_CPUTIME_ID)`` which has a resolution of 10
  ms. Patch by Batuhan Taskaya.

- bpo-40025: Raise TypeError when _generate_next_value_ is defined after
  members. Patch by Ethan Onstott.

- bpo-39058: In the argparse module, the repr for Namespace() and other
  argument holders now displayed in the order attributes were added.
  Formerly, it displayed in alphabetical order even though argument order is
  preserved the user visible parts of the module.

- bpo-24416: The ``isocalendar()`` methods of :class:`datetime.date` and
  :class:`datetime.datetime` now return a :term:`named tuple` instead of a
  :class:`tuple`.

Documentation
-------------

- bpo-34790: Add version of removal for explicit passing of coros to
  `asyncio.wait()`'s documentation

- bpo-40561: Provide docstrings for webbrowser open functions.

- bpo-40499: Mention that :func:`asyncio.wait` requires a non-empty set of
  awaitables.

- bpo-39705: Tutorial example for sorted() in the Loop Techniques section is
  given a better explanation. Also a new example is included to explain
  sorted()'s basic behavior.

- bpo-39435: Fix an incorrect signature for :func:`pickle.loads` in the docs

Tests
-----

- bpo-40055: distutils.tests now saves/restores warnings filters to leave
  them unchanged. Importing tests imports docutils which imports
  pkg_resources which adds a warnings filter.

- bpo-40436: test_gdb and test.pythoninfo now check gdb command exit code.

Build
-----

- bpo-40653: Move _dirnameW out of HAVE_SYMLINK to fix a potential compiling
  issue.

- bpo-40514: Add ``--with-experimental-isolated-subinterpreters`` build
  option to ``configure``: better isolate subinterpreters, experimental
  build mode.

Windows
-------

- bpo-40650: Include winsock2.h in pytime.c for timeval.

- bpo-40458: Increase reserved stack space to prevent overflow crash on
  Windows.

- bpo-39148: Add IPv6 support to :mod:`asyncio` datagram endpoints in
  ProactorEventLoop. Change the raised exception for unknown address
  families to ValueError as it's not coming from Windows API.

macOS
-----

- bpo-34956: When building Python on macOS from source, ``_tkinter`` now
  links with non-system Tcl and Tk frameworks if they are installed in
  ``/Library/Frameworks``, as had been the case on older releases of macOS.
  If a macOS SDK is explicitly configured, by using
  ``--enable-universalsdk=`` or ``-isysroot``, only the SDK itself is
  searched. The default behavior can still be overridden with
  ``--with-tcltk-includes`` and ``--with-tcltk-libs``.

- bpo-35569: Expose RFC 3542 IPv6 socket options.

Tools/Demos
-----------

- bpo-40479: Update multissltest helper to test with latest OpenSSL 1.0.2,
  1.1.0, 1.1.1, and 3.0.0-alpha.

- bpo-40431: Fix a syntax typo in ``turtledemo`` that now raises a
  ``SyntaxError``.

- bpo-40163: Fix multissltest tool. OpenSSL has changed download URL for old
  releases. The multissltest tool now tries to download from current and old
  download URLs.

C API
-----

- bpo-39465: Remove the ``_PyUnicode_ClearStaticStrings()`` function from
  the C API.

- bpo-38787: Add PyCFunction_CheckExact() macro for exact type checks now
  that we allow subtypes of PyCFunction, as well as PyCMethod_CheckExact()
  and PyCMethod_Check() for the new PyCMethod subtype.

- bpo-40545: Declare ``_PyErr_GetTopmostException()`` with ``PyAPI_FUNC()``
  to properly export the function in the C API. The function remains private
  (``_Py``) prefix.

- bpo-40412: Nullify inittab_copy during finalization, preventing future
  interpreter initializations in an embedded situation from crashing. Patch
  by Gregory Szorc.

- bpo-40429: The :c:func:`PyThreadState_GetFrame` function now returns a
  strong reference to the frame.

- bpo-40428: Remove the following functions from the C API. Call
  :c:func:`PyGC_Collect` explicitly to free all free lists.

  * ``PyAsyncGen_ClearFreeLists()``
  * ``PyContext_ClearFreeList()``
  * ``PyDict_ClearFreeList()``
  * ``PyFloat_ClearFreeList()``
  * ``PyFrame_ClearFreeList()``
  * ``PyList_ClearFreeList()``
  * ``PySet_ClearFreeList()``
  * ``PyTuple_ClearFreeList()``

- bpo-40421: New :c:func:`PyFrame_GetBack` function: get the frame next
  outer frame.

- bpo-40421: New :c:func:`PyFrame_GetCode` function: return a borrowed
  reference to the frame code.

- bpo-40217: Ensure that instances of types created with
  :c:func:`PyType_FromSpecWithBases` will visit its class object when
  traversing references in the garbage collector (implemented as an
  extension of the provided :c:member:`~PyTypeObject.tp_traverse`). Patch by
  Pablo Galindo.

- bpo-38787: Module C state is now accessible from C-defined heap type
  methods (:pep:`573`). Patch by Marcel Plch and Petr Viktorin.


What's New in Python 3.9.0 alpha 6?
===================================

*Release date: 2020-04-27*

Security
--------

- bpo-40121: Fixes audit events raised on creating a new socket.

- bpo-39073: Disallow CR or LF in email.headerregistry.Address arguments to
  guard against header injection attacks.

- bpo-39503: CVE-2020-8492: The
  :class:`~urllib.request.AbstractBasicAuthHandler` class of the
  :mod:`urllib.request` module uses an inefficient regular expression which
  can be exploited by an attacker to cause a denial of service. Fix the
  regex to prevent the catastrophic backtracking. Vulnerability reported by
  Ben Caller and Matt Schwager.

Core and Builtins
-----------------

- bpo-40313: Improve the performance of bytes.hex().

- bpo-40334: Switch to a new parser, based on PEG.  For more details see PEP
  617. To temporarily switch back to the old parser, use ``-X oldparser`` or
  ``PYTHONOLDPARSER=1``.  In Python 3.10 we will remove the old parser
  completely, including the ``parser`` module (already deprecated) and
  anything that depends on it.

- bpo-40267: Fix the tokenizer to display the correct error message, when
  there is a SyntaxError on the last input character and no newline follows.
  It used to be `unexpected EOF while parsing`, while it should be `invalid
  syntax`.

- bpo-39522: Correctly unparse explicit ``u`` prefix for strings when
  postponed evaluation for annotations activated. Patch by Batuhan Taskaya.

- bpo-40246: Report a specialized error message, `invalid string prefix`,
  when the tokenizer encounters a string with an invalid prefix.

- bpo-40082: Fix the signal handler: it now always uses the main
  interpreter, rather than trying to get the current Python thread state.

- bpo-37388: str.encode() and str.decode() no longer check the encoding and
  errors in development mode or in debug mode during Python finalization.
  The codecs machinery can no longer work on very late calls to str.encode()
  and str.decode().

- bpo-40077: Fix possible refleaks in :mod:`_json`, memo of PyScannerObject
  should be traversed.

- bpo-37207: Speed up calls to ``dict()`` by using the :pep:`590`
  ``vectorcall`` calling convention.

- bpo-40141: Add column and line information to ``ast.keyword`` nodes. Patch
  by Pablo Galindo.

- bpo-1635741: Port :mod:`resource` to multiphase initialization
  (:pep:`489`).

- bpo-1635741: Port :mod:`math` to multiphase initialization (:pep:`489`).

- bpo-1635741: Port _uuid module to multiphase initialization (:pep:`489`).

- bpo-40077: Convert json module to use :c:func:`PyType_FromSpec`.

- bpo-40067: Improve the error message for multiple star expressions in an
  assignment. Patch by Furkan Onder

- bpo-1635741: Port _functools module to multiphase initialization (PEP
  489). Patch by Paulo Henrique Silva.

- bpo-1635741: Port operator module to multiphase initialization (PEP 489).
  Patch by Paulo Henrique Silva.

- bpo-20526: Fix :c:func:`PyThreadState_Clear()`. ``PyThreadState.frame`` is
  a borrowed reference, not a strong reference: ``PyThreadState_Clear()``
  must not call ``Py_CLEAR(tstate->frame)``.

- bpo-1635741: Port time module to multiphase initialization (:pep:`489`).
  Patch by Paulo Henrique Silva.

- bpo-1635741: Port _weakref extension module to multiphase initialization
  (:pep:`489`).

- bpo-40020: Fix a leak and subsequent crash in parsetok.c caused by realloc
  misuse on a rare codepath.

- bpo-39939: Added str.removeprefix and str.removesuffix methods and
  corresponding bytes, bytearray, and collections.UserString methods to
  remove affixes from a string if present. See :pep:`616` for a full
  description. Patch by Dennis Sweeney.

- bpo-39481: Implement PEP 585. This supports list[int], tuple[str, ...]
  etc.

- bpo-32894: Support unparsing of infinity numbers in postponed annotations.
  Patch by Batuhan Taşkaya.

- bpo-37207: Speed up calls to ``list()`` by using the :pep:`590`
  ``vectorcall`` calling convention. Patch by Mark Shannon.

Library
-------

- bpo-40398: :func:`typing.get_args` now always returns an empty tuple for
  special generic aliases.

- bpo-40396: Functions :func:`typing.get_origin`, :func:`typing.get_args`
  and :func:`typing.get_type_hints` support now generic aliases like
  ``list[int]``.

- bpo-38061: Optimize the :mod:`subprocess` module on FreeBSD using
  ``closefrom()``. A single ``close(fd)`` syscall is cheap, but when
  ``sysconf(_SC_OPEN_MAX)`` is high, the loop calling ``close(fd)`` on each
  file descriptor can take several milliseconds.

  The workaround on FreeBSD to improve performance was to load and mount the
  fdescfs kernel module, but this is not enabled by default.

  Initial patch by Ed Maste (emaste), Conrad Meyer (cem), Kyle Evans
  (kevans) and Kubilay Kocak (koobs):
  https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=242274

- bpo-38061: On FreeBSD, ``os.closerange(fd_low, fd_high)`` now calls
  ``closefrom(fd_low)`` if *fd_high* is greater than or equal to
  ``sysconf(_SC_OPEN_MAX)``.

  Initial patch by Ed Maste (emaste), Conrad Meyer (cem), Kyle Evans
  (kevans) and Kubilay Kocak (koobs):
  https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=242274

- bpo-40360: The :mod:`lib2to3` module is pending deprecation due to
  :pep:`617`.

- bpo-40138: Fix the Windows implementation of :func:`os.waitpid` for exit
  code larger than ``INT_MAX >> 8``. The exit status is now interpreted as
  an unsigned number.

- bpo-39942: Set "__main__" as the default module name when "__name__" is
  missing in :class:`typing.TypeVar`. Patch by Weipeng Hong.

- bpo-40275: The :mod:`logging` package is now imported lazily in
  :mod:`unittest` only when the :meth:`~unittest.TestCase.assertLogs`
  assertion is used.

- bpo-40275: The :mod:`asyncio` package is now imported lazily in
  :mod:`unittest` only when the :class:`~unittest.IsolatedAsyncioTestCase`
  class is used.

- bpo-40330: In :meth:`ShareableList.__setitem__`, check the size of a new
  string item after encoding it to utf-8, not before.

- bpo-40148: Added :meth:`pathlib.Path.with_stem()` to create a new Path
  with the stem replaced.

- bpo-40325: Deprecated support for set objects in random.sample().

- bpo-40257: Improved help for the :mod:`typing` module. Docstrings are now
  shown for all special forms and special generic aliases (like ``Union``
  and ``List``). Using ``help()`` with generic alias like ``List[int]`` will
  show the help for the correspondent concrete type (``list`` in this case).

- bpo-40257: func:`inspect.getdoc` no longer returns docstring inherited
  from the type of the object or from parent class if it is a class if it is
  not defined in the object itself. In :mod:`pydoc` the documentation string
  is now shown not only for class, function, method etc, but for any object
  that has its own ``__doc__`` attribute.

- bpo-40287: Fixed ``SpooledTemporaryFile.seek()`` to return the position.

- bpo-40290: Added zscore() to statistics.NormalDist().

- bpo-40282: Allow ``random.getrandbits(0)`` to succeed and to return 0.

- bpo-40286: Add :func:`random.randbytes` function and
  :meth:`random.Random.randbytes` method to generate random bytes.

- bpo-40277: :func:`collections.namedtuple` now provides a human-readable
  repr for its field accessors.

- bpo-40270: The included copy of sqlite3 on Windows is now compiled with
  the json extension. This allows the use of functions such as
  ``json_object``.

- bpo-29255: Wait in `KqueueSelector.select` when no fds are registered

- bpo-40260: Ensure :mod:`modulefinder` uses :func:`io.open_code` and
  respects coding comments.

- bpo-40234: Allow again to spawn daemon threads in subinterpreters (revert
  change which denied them).

- bpo-39207: Workers in :class:`~concurrent.futures.ProcessPoolExecutor` are
  now spawned on demand, only when there are no available idle workers to
  reuse. This optimizes startup overhead and reduces the amount of lost CPU
  time to idle workers. Patch by Kyle Stanley.

- bpo-40091: Fix a hang at fork in the logging module: the new private
  _at_fork_reinit() method is now used to reinitialize locks at fork in the
  child process.

- bpo-40149: Implement traverse and clear slots in _abc._abc_data type.

- bpo-40208: Remove deprecated :meth:`symtable.SymbolTable.has_exec`.

- bpo-40196: Fix a bug in the :mod:`symtable` module that was causing
  incorrectly report global variables as local. Patch by Pablo Galindo.

- bpo-40190: Add support for ``_SC_AIX_REALMEM`` to :func:`posix.sysconf`.

- bpo-40182: Removed the ``_field_types`` attribute of the
  :class:`typing.NamedTuple` class.

- bpo-36517: Multiple inheritance with :class:`typing.NamedTuple` now raises
  an error instead of silently ignoring other types.

- bpo-40126: Fixed reverting multiple patches in unittest.mock. Patcher's
  ``__exit__()`` is now never called if its ``__enter__()`` is failed.
  Returning true from ``__exit__()`` silences now the exception.

- bpo-40094: CGIHTTPRequestHandler of http.server now logs the CGI script
  exit code, rather than the CGI script exit status of os.waitpid(). For
  example, if the script is killed by signal 11, it now logs: "CGI script
  exit code -11."

- bpo-40108: Improve the error message when triying to import a module using
  :mod:`runpy` and incorrently use the ".py" extension at the end of the
  module name. Patch by Pablo Galindo.

- bpo-40094: Add :func:`os.waitstatus_to_exitcode` function: convert a wait
  status to an exit code.

- bpo-40089: Fix threading._after_fork(): if fork was not called by a thread
  spawned by threading.Thread, threading._after_fork() now creates a
  _MainThread instance for _main_thread, instead of a _DummyThread instance.

- bpo-40089: Add a private ``_at_fork_reinit()`` method to
  :class:`_thread.Lock`, :class:`_thread.RLock`, :class:`threading.RLock`
  and :class:`threading.Condition` classes: reinitialize the lock at fork in
  the child process, reset the lock to the unlocked state. Rename also the
  private ``_reset_internal_locks()`` method of :class:`threading.Event` to
  ``_at_fork_reinit()``.

- bpo-25780: Expose :data:`~socket.CAN_RAW_JOIN_FILTERS` in the
  :mod:`socket` module.

- bpo-39503: :class:`~urllib.request.AbstractBasicAuthHandler` of
  :mod:`urllib.request` now parses all WWW-Authenticate HTTP headers and
  accepts multiple challenges per header: use the realm of the first Basic
  challenge.

- bpo-39812: Removed daemon threads from :mod:`concurrent.futures` by adding
  an internal `threading._register_atexit()`, which calls registered
  functions prior to joining all non-daemon threads. This allows for
  compatibility with subinterpreters, which don't support daemon threads.

- bpo-40050: Fix ``importlib._bootstrap_external``: avoid creating a new
  ``winreg`` builtin module if it's already available in
  :data:`sys.modules`, and remove redundant imports.

- bpo-40014: Fix ``os.getgrouplist()``: if ``getgrouplist()`` function fails
  because the group list is too small, retry with a larger group list. On
  failure, the glibc implementation of ``getgrouplist()`` sets ``ngroups``
  to the total number of groups. For other implementations, double the group
  list size.

- bpo-40017: Add :data:`time.CLOCK_TAI` constant if the operating system
  support it.

- bpo-40016: In re docstring, clarify the relationship between inline and
  argument compile flags.

- bpo-39953: Update internal table of OpenSSL error codes in the ``ssl``
  module.

- bpo-36144: Added :pep:`584` operators to
  :class:`weakref.WeakValueDictionary`.

- bpo-36144: Added :pep:`584` operators to
  :class:`weakref.WeakKeyDictionary`.

- bpo-38891: Fix linear runtime behaviour of the `__getitem__` and
  `__setitem__` methods in
  :class:`multiprocessing.shared_memory.ShareableList`. This avoids
  quadratic performance when iterating a `ShareableList`. Patch by Thomas
  Krennwallner.

- bpo-39682: Remove undocumented support for *closing* a `pathlib.Path`
  object via its context manager. The context manager magic methods remain,
  but they are now a no-op, making `Path` objects immutable.

- bpo-36144: Added :pep:`584` operators (``|`` and ``|=``) to
  :class:`collections.ChainMap`.

- bpo-39011: Normalization of line endings in ElementTree attributes was
  removed, as line endings which were replaced by entity numbers should be
  preserved in original form.

- bpo-38410: Properly handle :func:`sys.audit` failures in
  :func:`sys.set_asyncgen_hooks`.

- bpo-36541: lib2to3 now recognizes named assignment expressions (the walrus
  operator, ``:=``)

- bpo-35967: In platform, delay the invocation of 'uname -p' until the
  processor attribute is requested.

- bpo-35113: :meth:`inspect.getsource` now returns correct source code for
  inner class with same name as module level class. Decorators are also
  returned as part of source of the class. Patch by Karthikeyan
  Singaravelan.

- bpo-33262: Deprecate passing None as an argument for
  :func:`shlex.split()`'s ``s`` parameter.  Patch by Zackery Spytz.

- bpo-31758: Prevent crashes when using an uninitialized
  ``_elementtree.XMLParser`` object. Patch by Oren Milman.

Documentation
-------------

- bpo-27635: The pickle documentation incorrectly claimed that ``__new__``
  isn't called by default when unpickling.

- bpo-39879: Updated :ref:`datamodel` docs to include :func:`dict` insertion
  order preservation. Patch by Furkan Onder and Samy Lahfa.

- bpo-38387: Document :c:macro:`PyDoc_STRVAR` macro in the C-API reference.

- bpo-13743: Some methods within xml.dom.minidom.Element class are now
  better documented.

Tests
-----

- bpo-31904: Set expected default encoding in test_c_locale_coercion.py for
  VxWorks RTOS.

- bpo-40162: Update Travis CI configuration to OpenSSL 1.1.1f.

- bpo-40146: Update OpenSSL to 1.1.1f in Azure Pipelines.

- bpo-40094: Add :func:`test.support.wait_process` function.

- bpo-40003: ``test.bisect_cmd`` now copies Python command line options like
  ``-O`` or ``-W``. Moreover, emit a warning if ``test.bisect_cmd`` is used
  with ``-w``/``--verbose2`` option.

- bpo-39380: Add the encoding in :class:`ftplib.FTP` and
  :class:`ftplib.FTP_TLS` to the constructor as keyword-only and change the
  default from ``latin-1`` to ``utf-8`` to follow :rfc:`2640`.

- bpo-39793: Use the same domain when testing ``make_msgid``. Patch by
  Batuhan Taskaya.

- bpo-1812: Fix newline handling in doctest.testfile when loading from a
  package whose loader has a get_data method. Patch by Peter Donis.

Build
-----

- bpo-38360: Support single-argument form of macOS -isysroot flag.

- bpo-40158: Fix CPython MSBuild Properties in NuGet Package
  (build/native/python.props)

- bpo-38527: Fix configure check on Solaris for "float word ordering":
  sometimes, the correct "grep" command was not being used. Patch by Arnon
  Yaari.

Windows
-------

- bpo-40164: Updates Windows to OpenSSL 1.1.1f

- bpo-8901: Ignore the Windows registry when the ``-E`` option is used.

macOS
-----

- bpo-38329: python.org macOS installers now update the Current version
  symlink of /Library/Frameworks/Python.framework/Versions for 3.9 installs.
  Previously, Current was only updated for Python 2.x installs. This should
  make it easier to embed Python 3 into other macOS applications.

- bpo-40164: Update macOS installer builds to use OpenSSL 1.1.1g.

IDLE
----

- bpo-38439: Add a 256×256 pixel IDLE icon to support more modern
  environments. Created by Andrew Clover. Delete the unused macOS idle.icns
  icon file.

- bpo-38689: IDLE will no longer freeze when inspect.signature fails when
  fetching a calltip.

Tools/Demos
-----------

- bpo-40385: Removed the checkpyc.py tool. Please see compileall without
  force mode as a potential alternative.

- bpo-40179: Fixed translation of ``#elif`` in Argument Clinic.

- bpo-40094: Fix ``which.py`` script exit code: it now uses
  :func:`os.waitstatus_to_exitcode` to convert :func:`os.system` exit status
  into an exit code.

C API
-----

- bpo-40241: Move the :c:type:`PyGC_Head` structure to the internal C API.

- bpo-40170: Convert :c:func:`PyObject_IS_GC` macro to a function to hide
  implementation details.

- bpo-40241: Add the functions :c:func:`PyObject_GC_IsTracked` and
  :c:func:`PyObject_GC_IsFinalized` to the public API to allow to query if
  Python objects are being currently tracked or have been already finalized
  by the garbage collector respectively. Patch by Pablo Galindo.

- bpo-40170: The :c:func:`PyObject_NEW` macro becomes an alias to the
  :c:func:`PyObject_New` macro, and the :c:func:`PyObject_NEW_VAR` macro
  becomes an alias to the :c:func:`PyObject_NewVar` macro, to hide
  implementation details. They no longer access directly the
  :c:member:`PyTypeObject.tp_basicsize` member.

- bpo-40170: :c:func:`PyType_HasFeature` now always calls
  :c:func:`PyType_GetFlags` to hide implementation details. Previously, it
  accessed directly the :c:member:`PyTypeObject.tp_flags` member when the
  limited C API was not used.

- bpo-40170: Convert the :c:func:`PyObject_GET_WEAKREFS_LISTPTR` macro to a
  function to hide implementation details: the macro accessed directly to
  the :c:member:`PyTypeObject.tp_weaklistoffset` member.

- bpo-40170: Convert :c:func:`PyObject_CheckBuffer` macro to a function to
  hide implementation details: the macro accessed directly the
  :c:member:`PyTypeObject.tp_as_buffer` member.

- bpo-40170: Always declare :c:func:`PyIndex_Check` as an opaque function to
  hide implementation details: remove ``PyIndex_Check()`` macro. The macro
  accessed directly the :c:member:`PyTypeObject.tp_as_number` member.

- bpo-39947: Add :c:func:`PyThreadState_GetID` function: get the unique
  identifier of a Python thread state.


What's New in Python 3.9.0 alpha 5?
===================================

*Release date: 2020-03-23*

Security
--------

- bpo-38576: Disallow control characters in hostnames in http.client,
  addressing CVE-2019-18348. Such potentially malicious header injection
  URLs now cause a InvalidURL to be raised.

Core and Builtins
-----------------

- bpo-40010: Optimize pending calls in multithreaded applications. If a
  thread different than the main thread schedules a pending call
  (:c:func:`Py_AddPendingCall`), the bytecode evaluation loop is no longer
  interrupted at each bytecode instruction to check for pending calls which
  cannot be executed. Only the main thread can execute pending calls.

  Previously, the bytecode evaluation loop was interrupted at each
  instruction until the main thread executes pending calls.

- bpo-1635741: Port _weakref extension module to multiphase initialization
  (:pep:`489`).

- bpo-1635741: Port _collections module to multiphase initialization
  (:pep:`489`).

- bpo-40010: Optimize signal handling in multithreaded applications. If a
  thread different than the main thread gets a signal, the bytecode
  evaluation loop is no longer interrupted at each bytecode instruction to
  check for pending signals which cannot be handled. Only the main thread of
  the main interpreter can handle signals.

  Previously, the bytecode evaluation loop was interrupted at each
  instruction until the main thread handles signals.

- bpo-39984: If :c:func:`Py_AddPendingCall` is called in a subinterpreter,
  the function is now scheduled to be called from the subinterpreter, rather
  than being called from the main interpreter. Each subinterpreter now has
  its own list of scheduled calls.

- bpo-1635741: Port _heapq module to multiphase initialization.

- bpo-1635741: Port itertools module to multiphase initialization
  (:pep:`489`).

- bpo-37207: Speed up calls to ``frozenset()`` by using the :pep:`590`
  ``vectorcall`` calling convention. Patch by Dong-hee Na.

- bpo-39984: subinterpreters: Move
  ``_PyRuntimeState.ceval.tracing_possible`` to
  ``PyInterpreterState.ceval.tracing_possible``: each interpreter now has
  its own variable.

- bpo-37207: Speed up calls to ``set()`` by using the :pep:`590`
  ``vectorcall`` calling convention. Patch by Dong-hee Na.

- bpo-1635741: Port _statistics module to multiphase initialization
  (:pep:`489`).

- bpo-39968: Use inline function to replace extension modules'
  get_module_state macros.

- bpo-39965: Correctly raise ``SyntaxError`` if *await* is used inside
  non-async functions and ``PyCF_ALLOW_TOP_LEVEL_AWAIT`` is set (like in the
  asyncio REPL). Patch by Pablo Galindo.

- bpo-39562: Allow executing asynchronous comprehensions on the top level
  when the ``PyCF_ALLOW_TOP_LEVEL_AWAIT`` flag is given. Patch by Batuhan
  Taskaya.

- bpo-37207: Speed up calls to ``tuple()`` by using the :pep:`590`
  ``vectorcall`` calling convention. Patch by Dong-hee Na.

- bpo-38373: Chaged list overallocation strategy. It no longer overallocates
  if the new size is closer to overalocated size than to the old size and
  adds padding.

- bpo-39926: Update Unicode database to Unicode version 13.0.0.

- bpo-19466: Clear the frames of daemon threads earlier during the Python
  shutdown to call objects destructors. So "unclosed file" resource warnings
  are now emitted for daemon threads in a more reliable way.

- bpo-38894: Fix a bug that was causing incomplete results when calling
  ``pathlib.Path.glob`` in the presence of symlinks that point to files
  where the user does not have read access. Patch by Pablo Galindo and Matt
  Wozniski.

- bpo-39877: Fix :c:func:`PyEval_RestoreThread` random crash at exit with
  daemon threads. It now accesses the ``_PyRuntime`` variable directly
  instead of using ``tstate->interp->runtime``, since ``tstate`` can be a
  dangling pointer after :c:func:`Py_Finalize` has been called. Moreover,
  the daemon thread now exits before trying to take the GIL.

- bpo-39871: Fix a possible :exc:`SystemError` in
  ``math.{atan2,copysign,remainder}()`` when the first argument cannot be
  converted to a :class:`float`. Patch by Zackery Spytz.

- bpo-39776: Fix race condition where threads created by PyGILState_Ensure()
  could get a duplicate id.

  This affects consumers of tstate->id like the contextvar caching
  machinery, which could return invalid cached objects under heavy thread
  load (observed in embedded scenarios).

- bpo-39778: Fixed a crash due to incorrect handling of weak references in
  ``collections.OrderedDict`` classes. Patch by Pablo Galindo.

- bpo-1635741: Port audioop extension module to multiphase initialization
  (:pep:`489`).

- bpo-39702: Relax :term:`decorator` grammar restrictions to allow any valid
  expression (:pep:`614`).

- bpo-38091: Tweak import deadlock detection code to not deadlock itself.

- bpo-1635741: Port _locale extension module to multiphase initialization
  (:pep:`489`).

- bpo-39087: Optimize :c:func:`PyUnicode_AsUTF8` and
  :c:func:`PyUnicode_AsUTF8AndSize` slightly when they need to create
  internal UTF-8 cache.

- bpo-39520: Fix unparsing of ext slices with no items (``foo[:,]``). Patch
  by Batuhan Taskaya.

- bpo-39220: Do not optimize annotations if 'from __future__ import
  annotations' is used. Patch by Pablo Galindo.

- bpo-35712: Using :data:`NotImplemented` in a boolean context has been
  deprecated. Patch contributed by Josh Rosenberg.

- bpo-22490: Don't leak environment variable ``__PYVENV_LAUNCHER__`` into
  the interpreter session on macOS.

Library
-------

- bpo-39830: Add :class:`zipfile.Path` to ``__all__`` in the :mod:`zipfile`
  module.

- bpo-40000: Improved error messages for validation of ``ast.Constant``
  nodes. Patch by Batuhan Taskaya.

- bpo-39999: ``__module__`` of the AST node classes is now set to "ast"
  instead of "_ast". Added docstrings for dummy AST node classes and
  deprecated attributes.

- bpo-39991: :func:`uuid.getnode` now skips IPv6 addresses with the same
  string length than a MAC address (17 characters): only use MAC addresses.

- bpo-39988: Deprecated ``ast.AugLoad`` and ``ast.AugStore`` node classes
  because they are no longer used.

- bpo-39656: Ensure ``bin/python3.#`` is always present in virtual
  environments on POSIX platforms - by Anthony Sottile.

- bpo-39969: Deprecated ``ast.Param`` node class because it's no longer
  used. Patch by Batuhan Taskaya.

- bpo-39360: Ensure all workers exit when finalizing a
  :class:`multiprocessing.Pool` implicitly via the module finalization
  handlers of multiprocessing. This fixes a deadlock situation that can be
  experienced when the Pool is not properly finalized via the context
  manager or a call to ``multiprocessing.Pool.terminate``. Patch by Batuhan
  Taskaya and Pablo Galindo.

- bpo-35370: sys.settrace(), sys.setprofile() and _lsprof.Profiler.enable()
  now properly report :c:func:`PySys_Audit` error if "sys.setprofile" or
  "sys.settrace" audit event is denied.

- bpo-39936: AIX: Fix _aix_support module when the subprocess is not
  available, when building Python from scratch. It now uses new private
  _bootsubprocess module, rather than having two implementations depending
  if subprocess is available or not. So _aix_support.aix_platform() result
  is now the same if subprocess is available or not.

- bpo-36144: :class:`collections.OrderedDict` now implements ``|`` and
  ``|=`` (:pep:`584`).

- bpo-39652: The column name found in ``sqlite3.Cursor.description`` is now
  truncated on the first '[' only if the PARSE_COLNAMES option is set.

- bpo-39915: Ensure :attr:`unittest.mock.AsyncMock.await_args_list` has call
  objects in the order of awaited arguments instead of using
  :attr:`unittest.mock.Mock.call_args` which has the last value of the call.
  Patch by Karthikeyan Singaravelan.

- bpo-36144: Updated :data:`os.environ` and :data:`os.environb` to support
  :pep:`584`'s merge (``|``) and update (``|=``) operators.

- bpo-38662: The ``ensurepip`` module now invokes ``pip`` via the ``runpy``
  module. Hence it is no longer tightly coupled with the internal API of the
  bundled ``pip`` version, allowing easier updates to a newer ``pip``
  version both internally and for distributors.

- bpo-38075: Fix the :meth:`random.Random.seed` method when a :class:`bool`
  is passed as the seed.

- bpo-39916: More reliable use of ``os.scandir()`` in ``Path.glob()``. It no
  longer emits a ResourceWarning when interrupted.

- bpo-39850: :mod:`multiprocessing` now supports abstract socket addresses
  (if abstract sockets are supported in the running platform). When creating
  arbitrary addresses (like when default-constructing
  :class:`multiprocessing.connection.Listener` objects) abstract sockets are
  preferred to avoid the case when the temporary-file-generated address is
  too large for an AF_UNIX socket address. Patch by Pablo Galindo.

- bpo-36287: :func:`ast.dump()` no longer outputs optional fields and
  attributes with default values. The default values for optional fields and
  attributes of AST nodes are now set as class attributes (e.g.
  ``Constant.kind`` is set to ``None``).

- bpo-39889: Fixed :func:`ast.unparse` for extended slices containing a
  single element (e.g. ``a[i:j,]``). Remove redundant tuples when index with
  a tuple (e.g. ``a[i, j]``).

- bpo-39828: Fix :mod:`json.tool` to catch :exc:`BrokenPipeError`. Patch by
  Dong-hee Na.

- bpo-13487: Avoid a possible *"RuntimeError: dictionary changed size during
  iteration"* from :func:`inspect.getmodule` when it tried to loop through
  :attr:`sys.modules`.

- bpo-39674: Revert "bpo-37330: open() no longer accept 'U' in file mode".
  The "U" mode of open() is kept in Python 3.9 to ease transition from
  Python 2.7, but will be removed in Python 3.10.

- bpo-28577: The hosts method on 32-bit prefix length IPv4Networks and
  128-bit prefix IPv6Networks now returns a list containing the single
  Address instead of an empty list.

- bpo-39826: Add getConnection method to logging HTTPHandler to enable
  custom connections.

- bpo-39763: Reimplement :func:`distutils.spawn.spawn` function with the
  :mod:`subprocess` module.

- bpo-39794: Add --without-decimal-contextvar build option.  This enables a
  thread-local rather than a coroutine local context.

- bpo-36144: :class:`collections.defaultdict` now implements ``|``
  (:pep:`584`).

- bpo-39517: Fix runpy.run_path() when using pathlike objects

- bpo-39775: Change ``inspect.Signature.parameters`` back to
  ``collections.OrderedDict``. This was changed to ``dict`` in Python
  3.9.0a4.

- bpo-39678: Refactor queue_manager in
  :class:`concurrent.futures.ProcessPoolExecutor` to make it easier to
  maintain.

- bpo-39764: Fix AttributeError when calling get_stack on a PyAsyncGenObject
  Task

- bpo-39769: The :func:`compileall.compile_dir` function's *ddir* parameter
  and the compileall command line flag `-d` no longer write the wrong
  pathname to the generated pyc file for submodules beneath the root of the
  directory tree being compiled.  This fixes a regression introduced with
  Python 3.5.

- bpo-36144: :class:`types.MappingProxyType` objects now support the merge
  (``|``) operator from :pep:`584`.

- bpo-38691: The :mod:`importlib` module now ignores the
  :envvar:`PYTHONCASEOK` environment variable when the :option:`-E` or
  :option:`-I` command line options are being used.

- bpo-39719: Remove :meth:`tempfile.SpooledTemporaryFile.softspace` as files
  no longer have the ``softspace`` attribute in Python 3. Patch by Shantanu.

- bpo-39667: Improve pathlib.Path compatibility on zipfile.Path and correct
  performance degradation as found in zipp 3.0.

- bpo-39638: Keep ASDL signatures in the docstrings for ``AST`` nodes. Patch
  by Batuhan Taskaya

- bpo-39639: Deprecated ``ast.Suite`` node class because it's no longer
  used. Patch by Batuhan Taskaya.

- bpo-39609: Add thread_name_prefix to default asyncio executor

- bpo-39548: Fix handling of header in
  :class:`urllib.request.AbstractDigestAuthHandler` when the optional
  ``qop`` parameter is not present.

- bpo-39509: HTTP status codes ``103 EARLY_HINTS`` and ``425 TOO_EARLY`` are
  added to :class:`http.HTTPStatus`. Patch by Dong-hee Na.

- bpo-39507: Adding HTTP status 418 "I'm a Teapot" to HTTPStatus in http
  library. Patch by Ross Rhodes.

- bpo-39495: Remove default value from *attrs* parameter of
  :meth:`xml.etree.ElementTree.TreeBuilder.start` for consistency between
  Python and C implementations.

- bpo-38971: Open issue in the BPO indicated a desire to make the
  implementation of codecs.open() at parity with io.open(), which implements
  a try/except to assure file stream gets closed before an exception is
  raised.

- bpo-38641: Added starred expressions support to ``return`` and ``yield``
  statements for ``lib2to3``. Patch by Vlad Emelianov.

- bpo-37534: When using minidom module to generate XML documents the ability
  to add Standalone Document Declaration is added. All the changes are made
  to generate a document in compliance with Extensible Markup Language (XML)
  1.0 (Fifth Edition) W3C Recommendation (available here:
  https://www.w3.org/TR/xml/#sec-prolog-dtd).

- bpo-34788: Add support for scoped IPv6 addresses to :mod:`ipaddress`.
  Patch by Oleksandr Pavliuk.

- bpo-34822: Simplified AST for subscription. Simple indices are now
  represented by their value, extended slices are represented as tuples.
  :mod:`ast` classes ``Index`` and ``ExtSlice`` are considered deprecated
  and will be removed in future Python versions. In the meantime,
  ``Index(value)`` now returns a ``value`` itself, ``ExtSlice(slices)``
  returns ``Tuple(slices, Load())``.

Documentation
-------------

- bpo-39868: Updated the Language Reference for :pep:`572`.

- bpo-13790: Change 'string' to 'specification' in format doc.

- bpo-17422: The language reference no longer restricts default class
  namespaces to dicts only.

- bpo-39530: Fix misleading documentation about mixed-type numeric
  comparisons.

- bpo-39718: Update :mod:`token` documentation to reflect additions in
  Python 3.8

- bpo-39677: Changed operand name of **MAKE_FUNCTION** from *argc* to
  *flags* for module :mod:`dis`

Tests
-----

- bpo-40019: test_gdb now skips tests if it detects that gdb failed to read
  debug information because the Python binary is optimized.

- bpo-27807: ``test_site.test_startup_imports()`` is now skipped if a path
  of :data:`sys.path` contains a ``.pth`` file.

- bpo-26067: Do not fail test_shutil test_chown test when uid or gid of user
  cannot be resolved to a name.

- bpo-39855: test_subprocess.test_user() now skips the test on an user name
  if the user name doesn't exist. For example, skip the test if the user
  "nobody" doesn't exist on Linux.

Build
-----

- bpo-39761: Fix build with DTrace but without additional DFLAGS.

- bpo-39763: setup.py now uses a basic implementation of the
  :mod:`subprocess` module if the :mod:`subprocess` module is not available:
  before required C extension modules are built.

- bpo-1294959: Add ``--with-platlibdir`` option to the configure script:
  name of the platform-specific library directory, stored in the new
  :attr:`sys.platlibdir` attribute. It is used to build the path of
  platform-specific extension modules and the path of the standard library.
  It is equal to ``"lib"`` on most platforms. On Fedora and SuSE, it is
  equal to ``"lib64"`` on 64-bit platforms. Patch by Jan Matějek, Matěj
  Cepl, Charalampos Stratakis and Victor Stinner.

Windows
-------

- bpo-39930: Ensures the required :file:`vcruntime140.dll` is included in
  install packages.

- bpo-39847: Avoid hang when computer is hibernated whilst waiting for a
  mutex (for lock-related objects from :mod:`threading`) around 49-day
  uptime.

- bpo-38597: :mod:`distutils` will no longer statically link
  :file:`vcruntime140.dll` when a redistributable version is unavailable.
  All future releases of CPython will include a copy of this DLL to ensure
  distributed extensions can continue to load.

- bpo-38380: Update Windows builds to use SQLite 3.31.1

- bpo-39789: Update Windows release build machines to Visual Studio 2019
  (MSVC 14.2).

- bpo-34803: Package for nuget.org now includes repository reference and
  bundled icon image.

macOS
-----

- bpo-38380: Update macOS builds to use SQLite 3.31.1

IDLE
----

- bpo-27115: For 'Go to Line', use a Query box subclass with IDLE standard
  behavior and improved error checking.

- bpo-39885: Since clicking to get an IDLE context menu moves the cursor,
  any text selection should be and now is cleared.

- bpo-39852: Edit "Go to line" now clears any selection, preventing
  accidental deletion. It also updates Ln and Col on the status bar.

- bpo-39781: Selecting code context lines no longer causes a jump.

Tools/Demos
-----------

- bpo-36184: Port python-gdb.py to FreeBSD. python-gdb.py now checks for
  "take_gil" function name to check if a frame tries to acquire the GIL,
  instead of checking for "pthread_cond_timedwait" which is specific to
  Linux and can be a different condition than the GIL.

- bpo-38080: Added support to fix ``getproxies`` in the
  :mod:`lib2to3.fixes.fix_urllib` module. Patch by José Roberto Meza
  Cabrera.

C API
-----

- bpo-40024: Add :c:func:`PyModule_AddType` helper function: add a type to a
  module. Patch by Dong-hee Na.

- bpo-39946: Remove ``_PyRuntime.getframe`` hook and remove
  ``_PyThreadState_GetFrame`` macro which was an alias to
  ``_PyRuntime.getframe``. They were only exposed by the internal C API.
  Remove also ``PyThreadFrameGetter`` type.

- bpo-39947: Add :c:func:`PyThreadState_GetFrame` function: get the current
  frame of a Python thread state.

- bpo-37207: Add _PyArg_NoKwnames helper function. Patch by Dong-hee Na.

- bpo-39947: Add :c:func:`PyThreadState_GetInterpreter`: get the interpreter
  of a Python thread state.

- bpo-39947: Add :c:func:`PyInterpreterState_Get` function to the limited C
  API.

- bpo-35370: If :c:func:`PySys_Audit` fails in :c:func:`PyEval_SetProfile`
  or :c:func:`PyEval_SetTrace`, log the error as an unraisable exception.

- bpo-39947: Move the static inline function flavor of
  Py_EnterRecursiveCall() and Py_LeaveRecursiveCall() to the internal C API:
  they access PyThreadState attributes. The limited C API provides regular
  functions which hide implementation details.

- bpo-39947: Py_TRASHCAN_BEGIN_CONDITION and Py_TRASHCAN_END macro no longer
  access PyThreadState attributes, but call new private _PyTrash_begin() and
  _PyTrash_end() functions which hide implementation details.

- bpo-39884: :c:func:`PyDescr_NewMethod` and :c:func:`PyCFunction_NewEx` now
  include the method name in the SystemError "bad call flags" error message
  to ease debug.

- bpo-39877: Deprecated :c:func:`PyEval_InitThreads` and
  :c:func:`PyEval_ThreadsInitialized`. Calling :c:func:`PyEval_InitThreads`
  now does nothing.

- bpo-38249: :c:macro:`Py_UNREACHABLE` is now implemented with
  ``__builtin_unreachable()`` and analogs in release mode.

- bpo-38643: :c:func:`PyNumber_ToBase` now raises a :exc:`SystemError`
  instead of crashing when called with invalid base.

- bpo-39882: The :c:func:`Py_FatalError` function is replaced with a macro
  which logs automatically the name of the current function, unless the
  ``Py_LIMITED_API`` macro is defined.

- bpo-39824: Extension modules: :c:member:`~PyModuleDef.m_traverse`,
  :c:member:`~PyModuleDef.m_clear` and :c:member:`~PyModuleDef.m_free`
  functions of :c:type:`PyModuleDef` are no longer called if the module
  state was requested but is not allocated yet. This is the case immediately
  after the module is created and before the module is executed
  (:c:data:`Py_mod_exec` function). More precisely, these functions are not
  called if :c:member:`~PyModuleDef.m_size` is greater than 0 and the module
  state (as returned by :c:func:`PyModule_GetState`) is ``NULL``.

  Extension modules without module state (``m_size <= 0``) are not affected.

- bpo-38913: Fixed segfault in ``Py_BuildValue()`` called with a format
  containing "#" and undefined PY_SSIZE_T_CLEAN whwn an exception is set.

- bpo-38500: Add a private API to get and set the frame evaluation function:
  add :c:func:`_PyInterpreterState_GetEvalFrameFunc` and
  :c:func:`_PyInterpreterState_SetEvalFrameFunc` C functions. The
  :c:type:`_PyFrameEvalFunction` function type now takes a *tstate*
  parameter.


What's New in Python 3.9.0 alpha 4?
===================================

*Release date: 2020-02-25*

Security
--------

- bpo-39184: Add audit events to functions in `fcntl`, `msvcrt`, `os`,
  `resource`, `shutil`, `signal` and `syslog`.

- bpo-39401: Avoid unsafe DLL load at startup on Windows 7 and earlier.

- bpo-39184: Add audit events to command execution functions in os and pty
  modules.

Core and Builtins
-----------------

- bpo-39382: Fix a use-after-free in the single inheritance path of
  ``issubclass()``, when the ``__bases__`` of an object has a single
  reference, and so does its first item. Patch by Yonatan Goldschmidt.

- bpo-39573: Update clinic tool to use :c:func:`Py_IS_TYPE`. Patch by
  Dong-hee Na.

- bpo-39619: Enable use of :func:`os.chroot` on HP-UX systems.

- bpo-39573: Add :c:func:`Py_IS_TYPE` static inline function to check
  whether the object *o* type is *type*.

- bpo-39606: Fix regression caused by fix for bpo-39386, that prevented
  calling ``aclose`` on an async generator that had already been closed or
  exhausted.

- bpo-39579: Change the ending column offset of `Attribute` nodes
  constructed in `ast_for_dotted_name` to point at the end of the current
  node and not at the end of the last `NAME` node.

- bpo-1635741: Port _crypt extension module to multiphase initialization
  (:pep:`489`).

- bpo-1635741: Port _contextvars extension module to multiphase
  initialization (:pep:`489`).

- bpo-39510: Fix segfault in ``readinto()`` method on closed BufferedReader.

- bpo-39502: Fix :func:`time.localtime` on 64-bit AIX  to support years
  before 1902 and after 2038. Patch by M Felt.

- bpo-39492: Fix a reference cycle in the C Pickler that was preventing the
  garbage collection of deleted, pickled objects.

- bpo-39453: Fixed a possible crash in :meth:`list.__contains__` when a list
  is changed during comparing items. Patch by Dong-hee Na.

- bpo-39434: :term:`floor division` of float operation now has a better
  performance. Also the message of :exc:`ZeroDivisionError` for this
  operation is updated. Patch by Dong-hee Na.

- bpo-1635741: Port _codecs extension module to multiphase initialization
  (:pep:`489`).

- bpo-1635741: Port _bz2 extension module to multiphase initialization
  (:pep:`489`).

- bpo-1635741: Port _abc extension module to multiphase initialization
  (:pep:`489`).

- bpo-39320: Replace two complex bytecodes for building dicts with two
  simpler ones. The new bytecodes ``DICT_MERGE`` and ``DICT_UPDATE`` have
  been added The old bytecodes ``BUILD_MAP_UNPACK`` and
  ``BUILD_MAP_UNPACK_WITH_CALL`` have been removed.

- bpo-39219: Syntax errors raised in the tokenizer now always set correct
  "text" and "offset" attributes.

- bpo-36051: Drop the GIL during large ``bytes.join`` operations. Patch by
  Bruce Merry.

- bpo-38960: Fix DTrace build issues on FreeBSD. Patch by David Carlier.

- bpo-37207: Speed up calls to ``range()`` by about 30%, by using the PEP
  590 ``vectorcall`` calling convention. Patch by Mark Shannon.

- bpo-36144: :class:`dict` (and :class:`collections.UserDict`) objects now
  support PEP 584's merge (``|``) and update (``|=``) operators. Patch by
  Brandt Bucher.

- bpo-32856: Optimized the idiom for assignment a temporary variable in
  comprehensions. Now ``for y in [expr]`` in comprehensions is as fast as a
  simple assignment ``y = expr``.

Library
-------

- bpo-30566: Fix :exc:`IndexError` when trying to decode an invalid string
  with punycode codec.

- bpo-39649: Remove obsolete check for `__args__` in
  bdb.Bdb.format_stack_entry.

- bpo-39648: Expanded :func:`math.gcd` and :func:`math.lcm` to handle
  multiple arguments.

- bpo-39681: Fix a regression where the C pickle module wouldn't allow
  unpickling from a file-like object that doesn't expose a readinto()
  method.

- bpo-35950: Raise :exc:`io.UnsupportedOperation` in
  :meth:`io.BufferedReader.truncate` when it is called on a read-only
  :class:`io.BufferedReader` instance.

- bpo-39479: Add :func:`math.lcm` function: least common multiple.

- bpo-39674: Revert "Do not expose abstract collection classes in the
  collections module" change (bpo-25988). Aliases to ABC like
  collections.Mapping are kept in Python 3.9 to ease transition from Python
  2.7, but will be removed in Python 3.10.

- bpo-39104: Fix hanging ProcessPoolExcutor on ``shutdown(wait=False)`` when
  a task has failed pickling.

- bpo-39627: Fixed TypedDict totality check for inherited keys.

- bpo-39474: Fixed starting position of AST for expressions like ``(a)(b)``,
  ``(a)[b]`` and ``(a).b``.

- bpo-21016: The :mod:`pydoc` and :mod:`trace` modules now use the
  :mod:`sysconfig` module to get the path to the Python standard library, to
  support uncommon installation path like ``/usr/lib64/python3.9/`` on
  Fedora. Patch by Jan Matějek.

- bpo-39590: Collections.deque now holds strong references during
  deque.__contains__ and deque.count, fixing crashes.

- bpo-39586: The distutils ``bdist_msi`` command is deprecated in Python
  3.9, use ``bdist_wheel`` (wheel packages) instead.

- bpo-39595: Improved performance of zipfile.Path for files with a large
  number of entries. Also improved performance and fixed minor issue as
  published with `importlib_metadata 1.5
  <https://importlib-metadata.readthedocs.io/en/latest/changelog%20(links).html#v1-5-0>`_.

- bpo-39350: Fix regression in :class:`fractions.Fraction` if the numerator
  and/or the denominator is an :class:`int` subclass. The :func:`math.gcd`
  function is now used to normalize the *numerator* and *denominator*.
  :func:`math.gcd` always return a :class:`int` type. Previously, the GCD
  type depended on *numerator* and *denominator*.

- bpo-39567: Added audit for :func:`os.walk`, :func:`os.fwalk`,
  :meth:`pathlib.Path.glob` and :meth:`pathlib.Path.rglob`.

- bpo-39559: Remove unused, undocumented argument ``getters`` from
  :func:`uuid.getnode`

- bpo-38149: :func:`sys.audit` is now called only once per call of
  :func:`glob.glob` and :func:`glob.iglob`.

- bpo-39546: Fix a regression in :class:`~argparse.ArgumentParser` where
  ``allow_abbrev=False`` was ignored for long options that used a prefix
  character other than "-".

- bpo-39450: Striped whitespace from docstring before returning it from
  :func:`unittest.case.shortDescription`.

- bpo-12915: A new function ``resolve_name`` has been added to the
  ``pkgutil`` module. This resolves a string of the form ``'a.b.c.d'`` or
  ``'a.b:c.d'`` to an object. In the example, ``a.b`` is a package/module
  and ``c.d`` is an object within that package/module reached via recursive
  attribute access.

- bpo-39353: The :func:`binascii.crc_hqx` function is no longer deprecated.

- bpo-39493: Mark ``typing.IO.closed`` as a property

- bpo-39491: Add :data:`typing.Annotated` and ``include_extras`` parameter
  to :func:`typing.get_type_hints` as part of :pep:`593`. Patch by Till
  Varoquaux, documentation by Till Varoquaux and Konstantin Kashin.

- bpo-39485: Fix a bug in :func:`unittest.mock.create_autospec` that would
  complain about the wrong number of arguments for custom descriptors
  defined in an extension module returning functions.

- bpo-38932: Mock fully resets child objects on reset_mock(). Patch by
  Vegard Stikbakke

- bpo-39082: Allow AsyncMock to correctly patch static/class methods

- bpo-39432: Implement PEP-489 algorithm for non-ascii "PyInit\_..." symbol
  names in distutils to make it export the correct init symbol also on
  Windows.

- bpo-18819: Omit ``devmajor`` and ``devminor`` fields for non-device files
  in :mod:`tarfile` archives, enabling bit-for-bit compatibility with GNU
  ``tar(1)``.

- bpo-39349: Added a new *cancel_futures* parameter to
  :meth:`concurrent.futures.Executor.shutdown` that cancels all pending
  futures which have not started running, instead of waiting for them to
  complete before shutting down the executor.

- bpo-39274: ``bool(fraction.Fraction)`` now returns a boolean even if
  (numerator != 0) does not return a boolean (ex: numpy number).

- bpo-34793: Remove support for ``with (await asyncio.lock):`` and ``with
  (yield from asyncio.lock):``.  The same is correct for
  ``asyncio.Condition`` and ``asyncio.Semaphore``.

- bpo-25597: Ensure, if ``wraps`` is supplied to
  :class:`unittest.mock.MagicMock`, it is used to calculate return values
  for the magic methods instead of using the default return values. Patch by
  Karthikeyan Singaravelan.

- bpo-36350: `inspect.Signature.parameters` and
  `inspect.BoundArguments.arguments` are now dicts instead of OrderedDicts.
  Patch contributed by Rémi Lapeyre.

- bpo-35727: Fix sys.exit() and sys.exit(None) exit code propagation when
  used in multiprocessing.Process.

- bpo-32173: * Add `lazycache` function to `__all__`. * Use `dict.clear` to
  clear the cache. * Refactoring `getline` function and `checkcache`
  function.

Documentation
-------------

- bpo-17422: The language reference now specifies restrictions on class
  namespaces. Adapted from a patch by Ethan Furman.

- bpo-39572: Updated documentation of ``total`` flag of TypeDict.

- bpo-39654: In pyclbr doc, update 'class' to 'module' where appropriate and
  add readmodule comment. Patch by Hakan Çelik.

- bpo-39153: Clarify refcounting semantics for the following functions: -
  PyObject_SetItem - PyMapping_SetItemString - PyDict_SetItem -
  PyDict_SetItemString

- bpo-39392: Explain that when filling with turtle, overlap regions may be
  left unfilled.

- bpo-39369: Update mmap readline method description. The fact that the
  readline method does update the file position should not be ignored since
  this might give the impression for the programmer that it doesn't update
  it.

- bpo-9056: Include subsection in TOC for PDF version of docs.

Tests
-----

- bpo-38325: Skip tests on non-BMP characters of test_winconsoleio.

- bpo-39502: Skip test_zipfile.test_add_file_after_2107() if
  :func:`time.localtime` fails with :exc:`OverflowError`. It is the case on
  AIX 6.1 for example.

Build
-----

- bpo-39489: Remove ``COUNT_ALLOCS`` special build.

Windows
-------

- bpo-39553: Delete unused code related to SxS manifests.

- bpo-39439: Honor the Python path when a virtualenv is active on Windows.

- bpo-39393: Improve the error message when attempting to load a DLL with
  unresolved dependencies.

- bpo-38883: :meth:`~pathlib.Path.home()` and
  :meth:`~pathlib.Path.expanduser()` on Windows now prefer
  :envvar:`USERPROFILE` and no longer use :envvar:`HOME`, which is not
  normally set for regular user accounts. This makes them again behave like
  :func:`os.path.expanduser`, which was changed to ignore :envvar:`HOME` in
  3.8, see :issue:`36264`.

- bpo-39185: The build.bat script has additional options for very-quiet
  output (-q) and very-verbose output (-vv)

IDLE
----

- bpo-39663: Add tests for pyparse find_good_parse_start().

- bpo-39600: In the font configuration window, remove duplicated font names.

- bpo-30780: Add remaining configdialog tests for buttons and highlights and
  keys tabs.

- bpo-39388: IDLE Settings Cancel button now cancels pending changes

- bpo-38792: Close an IDLE shell calltip if a :exc:`KeyboardInterrupt` or
  shell restart occurs.  Patch by Zackery Spytz.

C API
-----

- bpo-35081: Move the ``bytes_methods.h`` header file to the internal C API
  as ``pycore_bytes_methods.h``: it only contains private symbols (prefixed
  by ``_Py``), except of the ``PyDoc_STRVAR_shared()`` macro.

- bpo-35081: Move the ``dtoa.h`` header file to the internal C API as
  ``pycore_dtoa.h``: it only contains private functions (prefixed by
  ``_Py``). The :mod:`math` and :mod:`cmath` modules must now be compiled
  with the ``Py_BUILD_CORE`` macro defined.

- bpo-39573: Add :c:func:`Py_SET_SIZE` function to set the size of an
  object.

- bpo-39500: :c:func:`PyUnicode_IsIdentifier` does not call
  :c:func:`Py_FatalError` anymore if the string is not ready.

- bpo-39573: Add :c:func:`Py_SET_TYPE` function to set the type of an
  object.

- bpo-39573: Add a :c:func:`Py_SET_REFCNT` function to set the reference
  counter of an object.

- bpo-39542: Convert :c:func:`PyType_HasFeature`, :c:func:`PyType_Check` and
  :c:func:`PyType_CheckExact` macros to static inline functions.

- bpo-39542: In the limited C API, ``PyObject_INIT()`` and
  ``PyObject_INIT_VAR()`` are now defined as aliases to
  :c:func:`PyObject_Init` and :c:func:`PyObject_InitVar` to make their
  implementation opaque. It avoids to leak implementation details in the
  limited C API. Exclude the following functions from the limited C API:
  ``_Py_NewReference()``, ``_Py_ForgetReference()``,
  ``_PyTraceMalloc_NewReference()`` and ``_Py_GetRefTotal()``.

- bpo-39542: Exclude trashcan mechanism from the limited C API: it requires
  access to PyTypeObject and PyThreadState structure fields, whereas these
  structures are opaque in the limited C API.

- bpo-39511: The :c:func:`PyThreadState_Clear` function now calls the
  :c:member:`PyThreadState.on_delete` callback. Previously, that happened in
  :c:func:`PyThreadState_Delete`.

- bpo-38076: Fix to clear the interpreter state only after clearing module
  globals to guarantee module state access from C Extensions during runtime
  destruction

- bpo-39245: The Vectorcall API (PEP 590) was made public, adding the
  functions ``PyObject_Vectorcall``, ``PyObject_VectorcallMethod``,
  ``PyVectorcall_Function``, ``PyObject_CallOneArg``,
  ``PyObject_CallMethodNoArgs``, ``PyObject_CallMethodOneArg``,
  ``PyObject_FastCallDict``, and the flag ``Py_TPFLAGS_HAVE_VECTORCALL``.


What's New in Python 3.9.0 alpha 3?
===================================

*Release date: 2020-01-24*

Core and Builtins
-----------------

- bpo-39427: Document all possibilities for the ``-X`` options in the
  command line help section. Patch by Pablo Galindo.

- bpo-39421: Fix possible crashes when operating with the functions in the
  :mod:`heapq` module and custom comparison operators.

- bpo-39386: Prevent double awaiting of async iterator.

- bpo-17005: Add :class:`functools.TopologicalSorter` to the
  :mod:`functools` module to offers functionality to perform topological
  sorting of graphs. Patch by Pablo Galindo, Tim Peters and Larry Hastings.

- bpo-39320: Replace four complex bytecodes for building sequences with
  three simpler ones.

  The following four bytecodes have been removed:

  * BUILD_LIST_UNPACK
  * BUILD_TUPLE_UNPACK
  * BUILD_SET_UNPACK
  * BUILD_TUPLE_UNPACK_WITH_CALL

  The following three bytecodes have been added:

  * LIST_TO_TUPLE
  * LIST_EXTEND
  * SET_UPDATE

- bpo-39336: Import loaders which publish immutable module objects can now
  publish immutable packages in addition to individual modules.

- bpo-39322: Added a new function :func:`gc.is_finalized` to check if an
  object has been finalized by the garbage collector. Patch by Pablo
  Galindo.

- bpo-39048: Improve the displayed error message when incorrect types are
  passed to ``async with`` statements by looking up the :meth:`__aenter__`
  special method before the :meth:`__aexit__` special method when entering
  an asynchronous context manager. Patch by Géry Ogam.

- bpo-39235: Fix AST end location for lone generator expression in function
  call, e.g. f(i for i in a).

- bpo-39209: Correctly handle multi-line tokens in interactive mode. Patch
  by Pablo Galindo.

- bpo-1635741: Port _json extension module to multiphase initialization
  (:pep:`489`).

- bpo-39216: Fix constant folding optimization for positional only arguments
  - by Anthony Sottile.

- bpo-39215: Fix ``SystemError`` when nested function has annotation on
  positional-only argument - by Anthony Sottile.

- bpo-39200: Correct the error message when calling the :func:`min` or
  :func:`max` with no arguments. Patch by Dong-hee Na.

- bpo-39200: Correct the error message when trying to construct
  :class:`range` objects with no arguments. Patch by Pablo Galindo.

- bpo-39166: Fix incorrect line execution reporting in trace functions when
  tracing the last iteration of asynchronous for loops. Patch by Pablo
  Galindo.

- bpo-39114: Fix incorrent line execution reporting in trace functions when
  tracing exception handlers with name binding. Patch by Pablo Galindo.

- bpo-39156: Split the COMPARE_OP bytecode instruction into four distinct
  instructions.

  *  COMPARE_OP for rich comparisons
  *  IS_OP for 'is' and 'is not' tests
  *  CONTAINS_OP for 'in' and 'is not' tests
  *  JUMP_IF_NOT_EXC_MATCH for checking exceptions in 'try-except' statements.

  This improves the clarity of the interpreter and should provide a modest
  speedup.

- bpo-38588: Fix possible crashes in dict and list when calling
  :c:func:`PyObject_RichCompareBool`.

- bpo-13601: By default, ``sys.stderr`` is line-buffered now, even if
  ``stderr`` is redirected to a file. You can still make ``sys.stderr``
  unbuffered by passing the :option:`-u` command-line option or setting the
  :envvar:`PYTHONUNBUFFERED` environment variable.

  (Contributed by Jendrik Seipp in bpo-13601.)

- bpo-38610: Fix possible crashes in several list methods by holding strong
  references to list elements when calling
  :c:func:`PyObject_RichCompareBool`.

- bpo-32021: Include brotli .br encoding in mimetypes encodings_map

Library
-------

- bpo-39430: Fixed race condition in lazy imports in :mod:`tarfile`.

- bpo-39413: The :func:`os.unsetenv` function is now also available on
  Windows.

- bpo-39390: Fixed a regression with the `ignore` callback of
  :func:`shutil.copytree`. The argument types are now str and List[str]
  again.

- bpo-39395: The :func:`os.putenv` and :func:`os.unsetenv` functions are now
  always available.

- bpo-39406: If ``setenv()`` C function is available, :func:`os.putenv` is
  now implemented with ``setenv()`` instead of ``putenv()``, so Python
  doesn't have to handle the environment variable memory.

- bpo-39396: Fix ``math.nextafter(-0.0, +0.0)`` on AIX 7.1.

- bpo-29435: Allow :func:`tarfile.is_tarfile` to be used with file and
  file-like objects, like :func:`zipfile.is_zipfile`. Patch by William
  Woodruff.

- bpo-39377: Removed ``encoding`` option from :func:`json.loads`.  It has
  been deprecated since Python 3.1.

- bpo-39389: Write accurate compression level metadata in :mod:`gzip`
  archives, rather than always signaling maximum compression.

- bpo-39366: The previously deprecated ``xpath()`` and ``xgtitle()`` methods
  of :class:`nntplib.NNTP` have been removed.

- bpo-39357: Remove the *buffering* parameter of :class:`bz2.BZ2File`. Since
  Python 3.0, it was ignored and using it was emitting
  :exc:`DeprecationWarning`. Pass an open file object, to control how the
  file is opened. The *compresslevel* parameter becomes keyword-only.

- bpo-39353: Deprecate binhex4 and hexbin4 standards. Deprecate the
  :mod:`binhex` module and the following :mod:`binascii` functions:
  :func:`~binascii.b2a_hqx`, :func:`~binascii.a2b_hqx`,
  :func:`~binascii.rlecode_hqx`, :func:`~binascii.rledecode_hqx`,
  :func:`~binascii.crc_hqx`.

- bpo-39351: Remove ``base64.encodestring()`` and ``base64.decodestring()``,
  aliases deprecated since Python 3.1: use :func:`base64.encodebytes` and
  :func:`base64.decodebytes` instead.

- bpo-39350: Remove ``fractions.gcd()`` function, deprecated since Python
  3.5 (:issue:`22486`): use :func:`math.gcd` instead.

- bpo-39329: :class:`~smtplib.LMTP` constructor now has an optional
  *timeout* parameter. Patch by Dong-hee Na.

- bpo-39313: Add a new ``exec_function`` option (*--exec-function* in the
  CLI) to ``RefactoringTool`` for making ``exec`` a function. Patch by
  Batuhan Taskaya.

- bpo-39259: :class:`~ftplib.FTP_TLS` and :class:`~ftplib.FTP_TLS` now raise
  a :class:`ValueError` if the given timeout for their constructor is zero
  to prevent the creation of a non-blocking socket. Patch by Dong-hee Na.

- bpo-39259: :class:`~smtplib.SMTP` and :class:`~smtplib.SMTP_SSL` now raise
  a :class:`ValueError` if the given timeout for their constructor is zero
  to prevent the creation of a non-blocking socket. Patch by Dong-hee Na.

- bpo-39310: Add :func:`math.ulp`: return the value of the least significant
  bit of a float.

- bpo-39297: Improved performance of importlib.metadata distribution
  discovery and resilients to inaccessible sys.path entries
  (importlib_metadata v1.4.0).

- bpo-39259: :class:`~nntplib.NNTP` and :class:`~nntplib.NNTP_SSL` now raise
  a :class:`ValueError` if the given timeout for their constructor is zero
  to prevent the creation of a non-blocking socket. Patch by Dong-hee Na.

- bpo-38901: When you specify prompt='.' or equivalently python -m venv
  --prompt . ... the basename of the current directory is used to set the
  created venv's prompt when it's activated.

- bpo-39288: Add :func:`math.nextafter`: return the next floating-point
  value after *x* towards *y*.

- bpo-39259: :class:`~poplib.POP3` and :class:`~poplib.POP3_SSL` now raise a
  :class:`ValueError` if the given timeout for their constructor is zero to
  prevent the creation of a non-blocking socket. Patch by Dong-hee Na.

- bpo-39242: Updated the Gmane domain from news.gmane.org to news.gmane.io
  which is used for examples of :class:`~nntplib.NNTP` news reader server
  and nntplib tests.

- bpo-35292: Proxy the `SimpleHTTPRequestHandler.guess_type` to
  `mimetypes.guess_type` so the `mimetypes.init` is called lazily to avoid
  unnecessary costs when :mod:`http.server` module is imported.

- bpo-39239: The :meth:`select.epoll.unregister` method no longer ignores
  the :data:`~errno.EBADF` error.

- bpo-38907: In http.server script, restore binding to IPv4 on Windows.

- bpo-39152: Fix ttk.Scale.configure([name]) to return configuration tuple
  for name or all options.  Giovanni Lombardo contributed part of the patch.

- bpo-39198: If an exception were to be thrown in `Logger.isEnabledFor`
  (say, by asyncio timeouts or stopit) , the `logging` global lock may not
  be released appropriately, resulting in deadlock.  This change wraps that
  block of code with `try...finally` to ensure the lock is released.

- bpo-39191: Perform a check for running loop before starting a new task in
  ``loop.run_until_complete()`` to fail fast; it prevents the side effect of
  new task spawning before exception raising.

- bpo-38871: Correctly parenthesize filter-based statements that contain
  lambda expressions in mod:`lib2to3`. Patch by Dong-hee Na.

- bpo-39142: A change was made to logging.config.dictConfig to avoid
  converting instances of named tuples to ConvertingTuple. It's assumed that
  named tuples are too specialised to be treated like ordinary tuples; if a
  user of named tuples requires ConvertingTuple functionality, they will
  have to implement that themselves in their named tuple class.

- bpo-39158: ast.literal_eval() now supports empty sets.

- bpo-39129: Fix import path for ``asyncio.TimeoutError``

- bpo-39057: :func:`urllib.request.proxy_bypass_environment` now ignores
  leading dots and no longer ignores a trailing newline.

- bpo-39056: Fixed handling invalid warning category in the -W option.  No
  longer import the re module if it is not needed.

- bpo-39055: :func:`base64.b64decode` with ``validate=True`` raises now a
  binascii.Error if the input ends with a single ``\n``.

- bpo-21600: Fix :func:`mock.patch.stopall` to stop active patches that were
  created with :func:`mock.patch.dict`.

- bpo-39019: Implement dummy ``__class_getitem__`` for
  :class:`tempfile.SpooledTemporaryFile`.

- bpo-39019: Implement dummy ``__class_getitem__`` for ``subprocess.Popen``,
  ``subprocess.CompletedProcess``

- bpo-38914: Adjusted the wording of the warning issued by distutils'
  ``check`` command when the ``author`` and ``maintainer`` fields are
  supplied but no corresponding e-mail field (``author_email`` or
  ``maintainer_email``) is found. The wording now reflects the fact that
  these fields are suggested, but not required. Patch by Juergen Gmach.

- bpo-38878: Fixed __subclasshook__ of :class:`os.PathLike` to return a
  correct result upon inheritence. Patch by Bar Harel.

- bpo-38615: :class:`~imaplib.IMAP4` and :class:`~imaplib.IMAP4_SSL` now
  have an optional *timeout* parameter for their constructors. Also, the
  :meth:`~imaplib.IMAP4.open` method now has an optional *timeout* parameter
  with this change. The overridden methods of :class:`~imaplib.IMAP4_SSL`
  and :class:`~imaplib.IMAP4_stream` were applied to this change. Patch by
  Dong-hee Na.

- bpo-35182: Fixed :func:`Popen.communicate` subsequent call crash when the
  child process has already closed any piped standard stream, but still
  continues to be running. Patch by Andriy Maletsky.

- bpo-38630: On Unix, :meth:`subprocess.Popen.send_signal` now polls the
  process status. Polling reduces the risk of sending a signal to the wrong
  process if the process completed, the :attr:`subprocess.Popen.returncode`
  attribute is still ``None``, and the pid has been reassigned (recycled) to
  a new different process.

- bpo-38536: Removes trailing space in formatted currency with
  `international=True` and a locale with symbol following value. E.g.
  `locale.currency(12.34, international=True)` returned `'12,34 EUR '`
  instead of `'12,34 EUR'`.

- bpo-38473: Use signature from inner mock for autospecced methods attached
  with :func:`unittest.mock.attach_mock`. Patch by Karthikeyan Singaravelan.

- bpo-38361: Fixed an issue where ``ident`` could include a leading path
  separator when :func:`syslog.openlog` was called without arguments.

- bpo-38293: Add :func:`copy.copy` and :func:`copy.deepcopy` support to
  :func:`property` objects.

- bpo-37958: Added the pstats.Stats.get_profile_dict() method to return the
  profile data as a StatsProfile instance.

- bpo-28367: Termios magic constants for the following baud rates:   -
  B500000   - B576000   - B921600   - B1000000   - B1152000   - B1500000   -
  B2000000   - B2500000   - B3000000   - B3500000   - B4000000 Patch by
  Andrey Smirnov

Documentation
-------------

- bpo-39381: Mention in docs that :func:`asyncio.get_event_loop` implicitly
  creates new event loop only if called from the main thread.

- bpo-38918: Add an entry for ``__module__`` in the "function" & "method"
  sections of the `inspect docs types and members table
  <https://docs.python.org/3/library/inspect.html#types-and-members>`_

- bpo-3530: In the :mod:`ast` module documentation, fix a misleading
  ``NodeTransformer`` example and add advice on when to use the
  ``fix_missing_locations`` function.

Build
-----

- bpo-39395: On non-Windows platforms, the :c:func:`setenv` and
  :c:func:`unsetenv` functions are now required to build Python.

- bpo-39160: Updated the documentation in `./configure --help` to show
  default values, reference documentation where required and add additional
  explanation where needed.

- bpo-39144: The ctags and etags build targets both include Modules/_ctypes
  and Python standard library source files.

IDLE
----

- bpo-39050: Make IDLE Settings dialog Help button work again.

- bpo-34118: Tag memoryview, range, and tuple as classes, the same as list,
  etcetera, in the library manual built-in functions list.

- bpo-32989: Add tests for editor newline_and_indent_event method. Remove
  dead code from pyparse find_good_parse_start method.

C API
-----

- bpo-39372: Clean header files of interfaces defined but with no
  implementation. The public API symbols being removed are:
  ``_PyBytes_InsertThousandsGroupingLocale``,
  ``_PyBytes_InsertThousandsGrouping``, ``_Py_InitializeFromArgs``,
  ``_Py_InitializeFromWideArgs``, ``_PyFloat_Repr``, ``_PyFloat_Digits``,
  ``_PyFloat_DigitsInit``, ``PyFrame_ExtendStack``,
  ``_PyAIterWrapper_Type``, ``PyNullImporter_Type``, ``PyCmpWrapper_Type``,
  ``PySortWrapper_Type``, ``PyNoArgsFunction``.

- bpo-39164: Add a private ``_PyErr_GetExcInfo()`` function to retrieve
  exception information of the specified Python thread state.


What's New in Python 3.9.0 alpha 2?
===================================

*Release date: 2019-12-18*

Security
--------

- bpo-38945: Newline characters have been escaped when performing uu
  encoding to prevent them from overflowing into to content section of the
  encoded file. This prevents malicious or accidental modification of data
  during the decoding process.

- bpo-37228: Due to significant security concerns, the *reuse_address*
  parameter of :meth:`asyncio.loop.create_datagram_endpoint` is no longer
  supported. This is because of the behavior of ``SO_REUSEADDR`` in UDP. For
  more details, see the documentation for
  ``loop.create_datagram_endpoint()``. (Contributed by Kyle Stanley, Antoine
  Pitrou, and Yury Selivanov in :issue:`37228`.)

- bpo-38804: Fixes a ReDoS vulnerability in :mod:`http.cookiejar`. Patch by
  Ben Caller.

Core and Builtins
-----------------

- bpo-39028: Slightly improve the speed of keyword argument parsing with
  many kwargs by strengthening the assumption that kwargs are interned
  strings.

- bpo-39080: Fix the value of *end_col_offset* for Starred Expression AST
  nodes when they are among the elements in the *args* attribute of Call AST
  nodes.

- bpo-39031: When parsing an "elif" node, lineno and col_offset of the node
  now point to the "elif" keyword and not to its condition, making it
  consistent with the "if" node. Patch by Lysandros Nikolaou.

- bpo-20443: In Python 3.9.0a1, sys.argv[0] was made an absolute path if a
  filename was specified on the command line. Revert this change, since most
  users expect sys.argv to be unmodified.

- bpo-39008: :c:func:`PySys_Audit` now requires ``Py_ssize_t`` to be used
  for size arguments in the format string, regardless of whether
  ``PY_SSIZE_T_CLEAN`` was defined at include time.

- bpo-38673: In REPL mode, don't switch to PS2 if the line starts with
  comment or whitespace. Based on work by Batuhan Taşkaya.

- bpo-38922: Calling ``replace`` on a code object now raises the
  ``code.__new__`` audit event.

- bpo-38920: Add audit hooks for when :func:`sys.excepthook` and
  :func:`sys.unraisablehook` are invoked.

- bpo-38892: Improve documentation for audit events table and functions.

- bpo-38852: Set the thread stack size to 8 Mb for debug builds on android
  platforms.

- bpo-38858: Each Python subinterpreter now has its own "small integer
  singletons": numbers in [-5; 257] range. It is no longer possible to
  change the number of small integers at build time by overriding
  ``NSMALLNEGINTS`` and ``NSMALLPOSINTS`` macros: macros should now be
  modified manually in ``pycore_pystate.h`` header file.

- bpo-36854: The garbage collector state becomes per interpreter
  (``PyInterpreterState.gc``), rather than being global
  (``_PyRuntimeState.gc``).

- bpo-38835: The ``PyFPE_START_PROTECT()`` and ``PyFPE_END_PROTECT()``
  macros are empty: they have been doing nothing for the last year, so stop
  using them.

- bpo-38328: Sped up the creation time of constant :class:`list` and
  :class:`set` displays. Patch by Brandt Bucher.

- bpo-38707: ``MainThread.native_id`` is now correctly reset in child
  processes spawned using :class:`multiprocessing.Process`, instead of
  retaining the parent's value.

- bpo-38629: Added ``__floor__`` and ``__ceil__`` methods to float object.
  Patch by Batuhan Taşkaya.

- bpo-27145: int + int and int - int operators can now return small integer
  singletons. Patch by hongweipeng.

- bpo-38021: Provide a platform tag for AIX that is sufficient for PEP425
  binary distribution identification. Patch by Michael Felt.

- bpo-35409: Ignore GeneratorExit exceptions when throwing an exception into
  the aclose coroutine of an asynchronous generator.

- bpo-33387: Removed WITH_CLEANUP_START, WITH_CLEANUP_FINISH, BEGIN_FINALLY,
  END_FINALLY, CALL_FINALLY and POP_FINALLY bytecodes. Replaced with RERAISE
  and WITH_EXCEPT_START bytecodes. The compiler now generates different code
  for exceptional and non-exceptional branches for 'with' and 'try-except'
  statements. For 'try-finally' statements the 'finally' block is replicated
  for each exit from the 'try' body.

Library
-------

- bpo-39033: Fix :exc:`NameError` in :mod:`zipimport`. Patch by Karthikeyan
  Singaravelan.

- bpo-39022: Update importlib.metadata to include improvements from
  importlib_metadata 1.3 including better serialization of EntryPoints and
  improved documentation for custom finders.

- bpo-39006: Fix asyncio when the ssl module is missing: only check for
  ssl.SSLSocket instance if the ssl module is available.

- bpo-38708: Fix a potential IndexError in email parser when parsing an
  empty msg-id.

- bpo-38698: Add a new ``InvalidMessageID`` token to email parser to
  represent invalid Message-ID headers.  Also, add defects when there is
  remaining value after parsing the header.

- bpo-38994: Implement ``__class_getitem__`` for ``os.PathLike``,
  ``pathlib.Path``.

- bpo-38979: Return class from ``ContextVar.__class_getitem__`` to simplify
  subclassing.

- bpo-38978: Implement ``__class_getitem__`` on asyncio objects (Future,
  Task, Queue). Patch by Batuhan Taskaya.

- bpo-38916: :class:`array.array`: Remove ``tostring()`` and
  ``fromstring()`` methods. They were aliases to ``tobytes()`` and
  ``frombytes()``, deprecated since Python 3.2.

- bpo-38986: Make repr of C accelerated TaskWakeupMethWrapper the same as of
  pure Python version.

- bpo-38982: Fix asyncio ``PidfdChildWatcher``: handle ``waitpid()`` error.
  If ``waitpid()`` is called elsewhere, ``waitpid()`` call fails with
  :exc:`ChildProcessError`: use return code 255 in this case, and log a
  warning. It ensures that the pidfd file descriptor is closed if this error
  occurs.

- bpo-38529: Drop too noisy asyncio warning about deletion of a stream
  without explicit ``.close()`` call.

- bpo-27413: Added ability to pass through ``ensure_ascii`` options to
  json.dumps in the ``json.tool`` command-line interface.

- bpo-38634: The :mod:`readline` module now detects if Python is linked to
  libedit at runtime on all platforms.  Previously, the check was only done
  on macOS.

- bpo-33684: Fix ``json.tool`` failed to read a JSON file with non-ASCII
  characters when locale encoding is not UTF-8.

- bpo-38698: Prevent UnboundLocalError to pop up in parse_message_id.

  parse_message_id() was improperly using a token defined inside an
  exception handler, which was raising `UnboundLocalError` on parsing an
  invalid value. Patch by Claudiu Popa.

- bpo-38927: Use ``python -m pip`` instead of ``pip`` to upgrade
  dependencies in venv.

- bpo-26730: Fix ``SpooledTemporaryFile.rollover()`` might corrupt the file
  when it is in text mode. Patch by Serhiy Storchaka.

- bpo-38881: random.choices() now raises a ValueError when all the weights
  are zero.

- bpo-38876: Raise pickle.UnpicklingError when loading an item from memo for
  invalid input.

  The previous code was raising a `KeyError` for both the Python and C
  implementation. This was caused by the specified index of an invalid input
  which did not exist in the memo structure, where the pickle stores what
  objects it has seen. The malformed input would have caused either a
  `BINGET` or `LONG_BINGET` load from the memo, leading to a `KeyError` as
  the determined index was bogus. Patch by Claudiu Popa

- bpo-38688: Calling func:`shutil.copytree` to copy a directory tree from
  one directory to another subdirectory resulted in an endless loop and a
  RecursionError. A fix was added to consume an iterator and create the list
  of the entries to be copied, avoiding the recursion for newly created
  directories. Patch by Bruno P. Kinoshita.

- bpo-38863: Improve :func:`is_cgi` function in :mod:`http.server`, which
  enables processing the case that cgi directory is a child of another
  directory other than root.

- bpo-37838: :meth:`typing.get_type_hints` properly handles functions
  decorated with :meth:`functools.wraps`.

- bpo-38870: Expose :func:`ast.unparse` as a function of the :mod:`ast`
  module that can be used to unparse an :class:`ast.AST` object and produce
  a string with code that would produce an equivalent :class:`ast.AST`
  object when parsed. Patch by Pablo Galindo and Batuhan Taskaya.

- bpo-38859: AsyncMock now returns StopAsyncIteration on the exhaustion of a
  side_effects iterable. Since PEP-479 its Impossible to raise a
  StopIteration exception from a coroutine.

- bpo-38857: AsyncMock fix for return values that are awaitable types.  This
  also covers side_effect iterable values that happened to be awaitable, and
  wraps callables that return an awaitable type. Before these awaitables
  were being awaited instead of being returned as is.

- bpo-38834: :class:`typing.TypedDict` subclasses now track which keys are
  optional using the ``__required_keys__`` and ``__optional_keys__``
  attributes, to enable runtime validation by downstream projects.  Patch by
  Zac Hatfield-Dodds.

- bpo-38821: Fix unhandled exceptions in :mod:`argparse` when
  internationalizing error messages for arguments with ``nargs`` set to
  special (non-integer) values. Patch by Federico Bond.

- bpo-38820: Make Python compatible with OpenSSL 3.0.0.
  :func:`ssl.SSLSocket.getpeercert` no longer returns IPv6 addresses with a
  trailing new line.

- bpo-38811: Fix an unhandled exception in :mod:`pathlib` when
  :meth:`os.link` is missing. Patch by Toke Høiland-Jørgensen.

- bpo-38686: Added support for multiple ``qop`` values in
  :class:`urllib.request.AbstractDigestAuthHandler`.

- bpo-38712: Add the Linux-specific :func:`signal.pidfd_send_signal`
  function, which allows sending a signal to a process identified by a file
  descriptor rather than a pid.

- bpo-38348: Add ``-i`` and ``--indent`` (indentation level), and
  ``--no-type-comments`` (type comments) command line options to ast parsing
  tool.

- bpo-37523: Change :class:`zipfile.ZipExtFile` to raise ``ValueError`` when
  trying to access the underlying file object after it has been closed. This
  new behavior is consistent with how accessing closed files is handled in
  other parts of Python.

- bpo-38045: Improve the performance of :func:`enum._decompose` in
  :mod:`enum`. Patch by hongweipeng.

- bpo-36820: Break cycle generated when saving an exception in socket.py,
  codeop.py and dyld.py as they keep alive not only the exception but user
  objects through the ``__traceback__`` attribute. Patch by Mario Corchero.

- bpo-36406: Handle namespace packages in :mod:`doctest`. Patch by
  Karthikeyan Singaravelan.

- bpo-34776: Fix dataclasses to support forward references in type
  annotations

- bpo-20928: ElementTree supports recursive XInclude processing.  Patch by
  Stefan Behnel.

- bpo-29636: Add whitespace options for formatting JSON with the
  ``json.tool`` CLI. The following mutually exclusive options are now
  supported: ``--indent`` for setting the indent level in spaces; ``--tab``
  for indenting with tabs; ``--no-indent`` for suppressing newlines; and
  ``--compact`` for suppressing all whitespace. The default behavior remains
  the same as ``--indent=4``.

Documentation
-------------

- bpo-38928: Correct when venv's ``upgrade_dependencies()`` and
  ``--upgrade-deps`` are added.

- bpo-38899: Update documentation to state that to activate virtual
  environments under fish one should use `source`, not `.` as documented at
  https://fishshell.com/docs/current/commands.html#source.

- bpo-22377: Improves documentation of the values that
  :meth:`datetime.datetime.strptime` accepts for ``%Z``. Patch by Karl
  Dubost.

Tests
-----

- bpo-38546: Fix test_ressources_gced_in_workers() of
  test_concurrent_futures: explicitly stop the manager to prevent leaking a
  child process running in the background after the test completes.

- bpo-38546: Multiprocessing and concurrent.futures tests now stop the
  resource tracker process when tests complete.

- bpo-38614: Replace hardcoded timeout constants in tests with new
  :mod:`test.support` constants: :data:`~test.support.LOOPBACK_TIMEOUT`,
  :data:`~test.support.INTERNET_TIMEOUT`,
  :data:`~test.support.SHORT_TIMEOUT` and
  :data:`~test.support.LONG_TIMEOUT`. It becomes easier to adjust these four
  timeout constants for all tests at once, rather than having to adjust
  every single test file.

- bpo-38547: Fix test_pty: if the process is the session leader, closing the
  master file descriptor raises a SIGHUP signal: simply ignore SIGHUP when
  running the tests.

- bpo-38992: Fix a test for :func:`math.fsum` that was failing due to
  constant folding.

- bpo-38991: :mod:`test.support`:
  :func:`~test.support.run_python_until_end`,
  :func:`~test.support.assert_python_ok` and
  :func:`~test.support.assert_python_failure` functions no longer strip
  whitespaces from stderr. Remove ``test.support.strip_python_stderr()``
  function.

- bpo-38965: Fix test_faulthandler on GCC 10. Use the "volatile" keyword in
  ``faulthandler._stack_overflow()`` to prevent tail call optimization on
  any compiler, rather than relying on compiler specific pragma.

- bpo-38875: test_capi: trashcan tests now require the test "cpu" resource.

- bpo-38841: Skip asyncio test_create_datagram_endpoint_existing_sock_unix
  on platforms lacking a functional bind() for named unix domain sockets.

- bpo-38692: Skip the test_posix.test_pidfd_open() test if
  ``os.pidfd_open()`` fails with a :exc:`PermissionError`. This situation
  can happen in a Linux sandbox using a syscall whitelist which doesn't
  allow the ``pidfd_open()`` syscall yet.

- bpo-38839: Fix some unused functions in tests. Patch by Adam Johnson.

- bpo-38669: Raise :exc:`TypeError` when passing target as a string with
  :meth:`unittest.mock.patch.object`.

- bpo-37957: test.regrtest now can receive a list of test patterns to ignore
  (using the -i/--ignore argument) or a file with a list of patterns to
  ignore (using the --ignore-file argument). Patch by Pablo Galindo.

Build
-----

- bpo-37404: :mod:`asyncio` now raises :exc:`TyperError` when calling
  incompatible methods with an :class:`ssl.SSLSocket` socket.  Patch by Ido
  Michael.

- bpo-36500: Added an optional "regen" project to the Visual Studio solution
  that will regenerate all grammar, tokens, and opcodes.

Windows
-------

- bpo-39007: Add auditing events to functions in :mod:`winreg`.

- bpo-33125: Add support for building and releasing Windows ARM64 packages.

macOS
-----

- bpo-37931: Fixed a crash on OSX dynamic builds that occurred when
  re-initializing the posix module after a Py_Finalize if the environment
  had changed since the previous `import posix`. Patch by Benoît Hudson.

IDLE
----

- bpo-38944: Escape key now closes IDLE completion windows.  Patch by Johnny
  Najera.

- bpo-38943: Fix IDLE autocomplete windows not always appearing on some
  systems. Patch by Johnny Najera.

- bpo-38862: 'Strip Trailing Whitespace' on the Format menu removes extra
  newlines at the end of non-shell files.

- bpo-38636: Fix IDLE Format menu tab toggle and file indent width. These
  functions (default shortcuts Alt-T and Alt-U) were mistakenly disabled in
  3.7.5 and 3.8.0.

C API
-----

- bpo-38896: Remove ``PyUnicode_ClearFreeList()`` function: the Unicode free
  list has been removed in Python 3.3.

- bpo-37340: Remove ``PyMethod_ClearFreeList()`` and
  ``PyCFunction_ClearFreeList()`` functions: the free lists of bound method
  objects have been removed.

- bpo-38835: Exclude ``PyFPE_START_PROTECT()`` and ``PyFPE_END_PROTECT()``
  macros of ``pyfpe.h`` from ``Py_LIMITED_API`` (stable API).


What's New in Python 3.9.0 alpha 1?
===================================

*Release date: 2019-11-19*

Security
--------

- bpo-38722: :mod:`runpy` now uses :meth:`io.open_code` to open code files.
  Patch by Jason Killen.

- bpo-38622: Add additional audit events for the :mod:`ctypes` module.

- bpo-38418: Fixes audit event for :func:`os.system` to be named
  ``os.system``.

- bpo-38243: Escape the server title of
  :class:`xmlrpc.server.DocXMLRPCServer` when rendering the document page as
  HTML. (Contributed by Dong-hee Na in :issue:`38243`.)

- bpo-38174: Update vendorized expat library version to 2.2.8, which
  resolves CVE-2019-15903.

- bpo-37764: Fixes email._header_value_parser.get_unstructured going into an
  infinite loop for a specific case in which the email header does not have
  trailing whitespace, and the case in which it contains an invalid encoded
  word. Patch by Ashwin Ramaswami.

- bpo-37461: Fix an infinite loop when parsing specially crafted email
  headers. Patch by Abhilash Raj.

- bpo-37363: Adds audit events for the range of supported run commands (see
  :ref:`using-on-general`).

- bpo-37463: ssl.match_hostname() no longer accepts IPv4 addresses with
  additional text after the address and only quad-dotted notation without
  trailing whitespaces. Some inet_aton() implementations ignore whitespace
  and all data after whitespace, e.g. '127.0.0.1 whatever'.

- bpo-37363: Adds audit events for :mod:`ensurepip`, :mod:`ftplib`,
  :mod:`glob`, :mod:`imaplib`, :mod:`nntplib`, :mod:`pdb`, :mod:`poplib`,
  :mod:`shutil`, :mod:`smtplib`, :mod:`sqlite3`, :mod:`subprocess`,
  :mod:`telnetlib`, :mod:`tempfile` and :mod:`webbrowser`, as well as
  :func:`os.listdir`, :func:`os.scandir` and :func:`breakpoint`.

- bpo-37364: :func:`io.open_code` is now used when reading :file:`.pth`
  files.

- bpo-34631: Updated OpenSSL to 1.1.1c in Windows installer

- bpo-34155: Fix parsing of invalid email addresses with more than one ``@``
  (e.g. a@b@c.com.) to not return the part before 2nd ``@`` as valid email
  address. Patch by maxking & jpic.

Core and Builtins
-----------------

- bpo-38631: Replace ``Py_FatalError()`` call with a regular
  :exc:`RuntimeError` exception in :meth:`float.__getformat__`.

- bpo-38639: Optimized :func:`math.floor()`, :func:`math.ceil()` and
  :func:`math.trunc()` for floats.

- bpo-38640: Fixed a bug in the compiler that was causing to raise in the
  presence of break statements and continue statements inside always false
  while loops. Patch by Pablo Galindo.

- bpo-38613: Optimized some set operations (e.g. ``|``, ``^``, and ``-``) of
  ``dict_keys``. ``d.keys() | other`` was slower than ``set(d) | other`` but
  they are almost same performance for now.

- bpo-28029: ``"".replace("", s, n)`` now returns ``s`` instead of an empty
  string for all non-zero ``n``.  There are similar changes for
  :class:`bytes` and :class:`bytearray` objects.

- bpo-38535: Fixed line numbers and column offsets for AST nodes for calls
  without arguments in decorators.

- bpo-38525: Fix a segmentation fault when using reverse iterators of empty
  ``dict`` objects. Patch by Dong-hee Na and Inada Naoki.

- bpo-38465: :class:`bytearray`, :class:`~array.array` and
  :class:`~mmap.mmap` objects allow now to export more than 2**31 buffers at
  a time.

- bpo-38469: Fixed a bug where the scope of named expressions was not being
  resolved correctly in the presence of the *global* keyword. Patch by Pablo
  Galindo.

- bpo-38437: Activate the ``GC_DEBUG`` macro for debug builds of the
  interpreter (when ``Py_DEBUG`` is set). Patch by Pablo Galindo.

- bpo-38379: When the garbage collector makes a collection in which some
  objects resurrect (they are reachable from outside the isolated cycles
  after the finalizers have been executed), do not block the collection of
  all objects that are still unreachable. Patch by Pablo Galindo and Tim
  Peters.

- bpo-38379: When cyclic garbage collection (gc) runs finalizers that
  resurrect unreachable objects, the current gc run ends, without collecting
  any cyclic trash.  However, the statistics reported by ``collect()`` and
  ``get_stats()`` claimed that all cyclic trash found was collected, and
  that the resurrected objects were collected.   Changed the stats to report
  that none were collected.

- bpo-38392: In debug mode, :c:func:`PyObject_GC_Track` now calls
  ``tp_traverse()`` of the object type to ensure that the object is valid:
  test that objects visited by ``tp_traverse()`` are valid.

- bpo-38210: Remove unecessary intersection and update set operation in
  dictview with empty set. (Contributed by Dong-hee Na in :issue:`38210`.)

- bpo-38402: Check the error from the system's underlying ``crypt`` or
  ``crypt_r``.

- bpo-37474: On FreeBSD, Python no longer calls ``fedisableexcept()`` at
  startup to control the floating point control mode. The call became
  useless since FreeBSD 6: it became the default mode.

- bpo-38006: Fix a bug due to the interaction of weakrefs and the cyclic
  garbage collector. We must clear any weakrefs in garbage in order to
  prevent their callbacks from executing and causing a crash.

- bpo-38317: Fix warnings options priority: ``PyConfig.warnoptions`` has the
  highest priority, as stated in the :pep:`587`.

- bpo-38310: Predict ``BUILD_MAP_UNPACK_WITH_CALL`` -> ``CALL_FUNCTION_EX``
  opcode pairs in the main interpreter loop. Patch by Brandt Bucher.

- bpo-36871: Improve error handling for the assert_has_calls and
  assert_has_awaits methods of mocks. Fixed a bug where any errors
  encountered while binding the expected calls to the mock's spec were
  silently swallowed, leading to misleading error output.

- bpo-11410: Better control over symbol visibility is provided through use
  of the visibility attributes available in gcc >= 4.0, provided in a
  uniform way across POSIX and Windows. The POSIX build files have been
  updated to compile with -fvisibility=hidden, minimising exported symbols.

- bpo-38219: Optimized the :class:`dict` constructor and the
  :meth:`~dict.update` method for the case when the argument is a dict.

- bpo-38236: Python now dumps path configuration if it fails to import the
  Python codecs of the filesystem and stdio encodings.

- bpo-38013: Allow to call ``async_generator_athrow().throw(...)`` even for
  non-started async generator helper. It fixes annoying warning at the end
  of :func:`asyncio.run` call.

- bpo-38124: Fix an off-by-one error in PyState_AddModule that could cause
  out-of-bounds memory access.

- bpo-38116: The select module is now PEP-384 compliant and no longer has
  static state

- bpo-38113: ast module updated to PEP-384 and all statics removed

- bpo-38076: The struct module is now PEP-384 compatible

- bpo-38075: The random module is now PEP-384 compatible

- bpo-38074: zlib module made PEP-384 compatible

- bpo-38073: Make pwd extension module PEP-384 compatible

- bpo-38072: grp module made PEP-384 compatible

- bpo-38069: Make _posixsubprocess PEP-384 compatible

- bpo-38071: Make termios extension module PEP-384 compatible

- bpo-38005: Fixed comparing and creating of InterpreterID and ChannelID.

- bpo-36946: Fix possible signed integer overflow when handling slices.
  Patch by hongweipeng.

- bpo-37994: Fixed silencing arbitrary errors if an attribute lookup fails
  in several sites. Only AttributeError should be silenced.

- bpo-8425: Optimize set difference_update for the case when the other set
  is much larger than the base set.  (Suggested by Evgeny Kapun with code
  contributed by Michele Orrù).

- bpo-37966: The implementation of :func:`~unicodedata.is_normalized` has
  been greatly sped up on strings that aren't normalized, by implementing
  the full normalization-quick-check algorithm from the Unicode standard.

- bpo-37947: Adjust correctly the recursion level in the symtable generation
  for named expressions. Patch by Pablo Galindo.

- bpo-37812: The ``CHECK_SMALL_INT`` macro used inside
  :file:`Object/longobject.c` has been replaced with an explicit ``return``
  at each call site.

- bpo-37751: Fix :func:`codecs.lookup` to normalize the encoding name the
  same way than :func:`encodings.normalize_encoding`, except that
  :func:`codecs.lookup` also converts the name to lower case.

- bpo-37830: Fixed compilation of :keyword:`break` and :keyword:`continue`
  in the :keyword:`finally` block when the corresponding :keyword:`try`
  block contains :keyword:`return` with a non-constant value.

- bpo-20490: Improve import error message for partially initialized module
  on circular ``from`` imports - by Anthony Sottile.

- bpo-37840: Fix handling of negative indices in
  :c:member:`~PySequenceMethods.sq_item` of :class:`bytearray`. Patch by
  Sergey Fedoseev.

- bpo-37802: Slightly improve performance of
  :c:func:`PyLong_FromUnsignedLong`, :c:func:`PyLong_FromUnsignedLongLong`
  and :c:func:`PyLong_FromSize_t`. Patch by Sergey Fedoseev.

- bpo-37409: Ensure explicit relative imports from interactive sessions and
  scripts (having no parent package) always raise ImportError, rather than
  treating the current module as the package. Patch by Ben Lewis.

- bpo-32912: Reverted :issue:`32912`: emitting :exc:`SyntaxWarning` instead
  of :exc:`DeprecationWarning` for invalid escape sequences in string and
  bytes literals.

- bpo-37757: :pep:`572`: As described in the PEP, assignment expressions now
  raise :exc:`SyntaxError` when their interaction with comprehension scoping
  results in an ambiguous target scope.

  The ``TargetScopeError`` subclass originally proposed by the PEP has been
  removed in favour of just raising regular syntax errors for the disallowed
  cases.

- bpo-36279: Fix potential use of uninitialized memory in :func:`os.wait3`.

- bpo-36311: Decoding bytes objects larger than 2GiB is faster and no longer
  fails when a multibyte characters spans a chunk boundary.

- bpo-34880: The :keyword:`assert` statement now works properly if the
  :exc:`AssertionError` exception is being shadowed. Patch by Zackery Spytz.

- bpo-37340: Removed object cache (``free_list``) for bound method objects.
  Temporary bound method objects are less used than before thanks to the
  ``LOAD_METHOD`` opcode and the ``_PyObject_VectorcallMethod`` C API.

- bpo-37648: Fixed minor inconsistency in :meth:`list.__contains__`,
  :meth:`tuple.__contains__` and a few other places. The collection's item
  is now always at the left and the needle is on the right of ``==``.

- bpo-37444: Update differing exception between :meth:`builtins.__import__`
  and :meth:`importlib.__import__`.

- bpo-37619: When adding a wrapper descriptor from one class to a different
  class (for example, setting ``__add__ = str.__add__`` on an ``int``
  subclass), an exception is correctly raised when the operator is called.

- bpo-37593: Swap the positions of the *posonlyargs* and *args* parameters
  in the constructor of :class:`ast.parameters` nodes.

- bpo-37543: Optimized pymalloc for non PGO build.

- bpo-37537: Compute allocated pymalloc blocks inside
  _Py_GetAllocatedBlocks().  This slows down _Py_GetAllocatedBlocks() but
  gives a small speedup to _PyObject_Malloc() and _PyObject_Free().

- bpo-37467: Fix :func:`sys.excepthook` and :c:func:`PyErr_Display` if a
  filename is a bytes string. For example, for a SyntaxError exception where
  the filename attribute is a bytes string.

- bpo-37433: Fix ``SyntaxError`` indicator printing too many spaces for
  multi-line strings - by Anthony Sottile.

- bpo-37417: :meth:`bytearray.extend` now correctly handles errors that
  arise during iteration. Patch by Brandt Bucher.

- bpo-37414: The undocumented ``sys.callstats()`` function has been removed.
  Since Python 3.7, it was deprecated and always returned ``None``. It
  required a special build option ``CALL_PROFILE`` which was already removed
  in Python 3.7.

- bpo-37392: Remove ``sys.getcheckinterval()`` and
  ``sys.setcheckinterval()`` functions. They were deprecated since Python
  3.2. Use :func:`sys.getswitchinterval` and :func:`sys.setswitchinterval`
  instead. Remove also ``check_interval`` field of the
  ``PyInterpreterState`` structure.

- bpo-37388: In development mode and in debug build, *encoding* and *errors*
  arguments are now checked on string encoding and decoding operations.
  Examples: :func:`open`, :meth:`str.encode` and :meth:`bytes.decode`.

  By default, for best performances, the *errors* argument is only checked
  at the first encoding/decoding error, and the *encoding* argument is
  sometimes ignored for empty strings.

- bpo-37348: Optimized decoding short ASCII string with UTF-8 and ascii
  codecs. ``b"foo".decode()`` is about 15% faster.  Patch by Inada Naoki.

- bpo-24214: Improved support of the surrogatepass error handler in the
  UTF-8 and UTF-16 incremental decoders.

- bpo-37330: :func:`open`, :func:`io.open`, :func:`codecs.open` and
  :class:`fileinput.FileInput` no longer accept ``'U'`` ("universal
  newline") in the file mode. This flag was deprecated since Python 3.3.

- bpo-35224: Reverse evaluation order of key: value in dict comprehensions
  as proposed in PEP 572. I.e. in ``{k: v for ...}``, ``k`` will be
  evaluated before ``v``.

- bpo-37316: Fix the :c:func:`PySys_Audit` call in :class:`mmap.mmap`.

- bpo-37300: Remove an unnecssary Py_XINCREF in classobject.c.

- bpo-37269: Fix a bug in the peephole optimizer that was not treating
  correctly constant conditions with binary operators. Patch by Pablo
  Galindo.

- bpo-20443: Python now gets the absolute path of the script filename
  specified on the command line (ex: "python3 script.py"): the __file__
  attribute of the __main__ module and sys.path[0] become an absolute path,
  rather than a relative path.

- bpo-37257: Python's small object allocator (``obmalloc.c``) now allows (no
  more than) one empty arena to remain available for immediate reuse,
  without returning it to the OS.  This prevents thrashing in simple loops
  where an arena could be created and destroyed anew on each iteration.

- bpo-37231: The dispatching of type slots to special methods (for example
  calling ``__mul__`` when doing ``x * y``) has been made faster.

- bpo-36974: Implemented separate vectorcall functions for every calling
  convention of builtin functions and methods. This improves performance for
  calls.

- bpo-37213: Handle correctly negative line offsets in the peephole
  optimizer. Patch by Pablo Galindo.

- bpo-37219: Remove erroneous optimization for empty set differences.

- bpo-15913: Implement :c:func:`PyBuffer_SizeFromFormat()` function
  (previously documented but not implemented): call :func:`struct.calcsize`.
  Patch by Joannah Nanjekye.

- bpo-36922: Slot functions optimize any callable with
  ``Py_TPFLAGS_METHOD_DESCRIPTOR`` instead of only instances of
  ``function``.

- bpo-36974: The slot ``tp_vectorcall_offset`` is inherited unconditionally
  to support ``super().__call__()`` when the base class uses vectorcall.

- bpo-37160: :func:`threading.get_native_id` now also supports NetBSD.

- bpo-37077: Add :func:`threading.get_native_id` support for AIX. Patch by
  M. Felt

- bpo-36781: :func:`sum` has been optimized for boolean values.

- bpo-34556: Add ``--upgrade-deps`` to venv module. Patch by Cooper Ry Lees

- bpo-20523: ``pdb.Pdb`` supports ~/.pdbrc in Windows 7. Patch by Tim Hopper
  and Dan Lidral-Porter.

- bpo-35551: Updated encodings: - Removed the "tis260" encoding, which was
  an alias for the nonexistent "tactis" codec. - Added "mac_centeuro" as an
  alias for the mac_latin2 encoding.

- bpo-19072: The :class:`classmethod` decorator can now wrap other
  descriptors such as property objects.  Adapted from a patch written by
  Graham Dumpleton.

- bpo-27575: Improve speed of dictview intersection by directly using set
  intersection logic. Patch by David Su.

- bpo-30773: Prohibit parallel running of aclose() / asend() / athrow(). Fix
  ag_running to reflect the actual running status of the AG.

Library
-------

- bpo-36589: The :func:`curses.update_lines_cols` function now returns
  ``None`` instead of ``1`` on success.

- bpo-38807: Update :exc:`TypeError` messages for :meth:`os.path.join` to
  include :class:`os.PathLike` objects as acceptable input types.

- bpo-38724: Add a repr for ``subprocess.Popen`` objects. Patch by Andrey
  Doroschenko.

- bpo-38786: pydoc now recognizes and parses HTTPS URLs. Patch by python273.

- bpo-38785: Prevent asyncio from crashing if parent ``__init__`` is not
  called from a constructor of object derived from ``asyncio.Future``.

- bpo-38723: :mod:`pdb` now uses :meth:`io.open_code` to trigger auditing
  events.

- bpo-27805: Allow opening pipes and other non-seekable files in append mode
  with :func:`open`.

- bpo-38438: Simplify the :mod:`argparse` usage message for ``nargs="*"``.

- bpo-38761: WeakSet is now registered as a collections.abc.MutableSet.

- bpo-38716: logging: change RotatingHandler namer and rotator to
  class-level attributes. This stops __init__ from setting them to None in
  the case where a subclass defines them with eponymous methods.

- bpo-38713: Add :data:`os.P_PIDFD` constant, which may be passed to
  :func:`os.waitid` to wait on a Linux process file descriptor.

- bpo-38692: Add :class:`asyncio.PidfdChildWatcher`, a Linux-specific child
  watcher implementation that polls process file descriptors.

- bpo-38692: Expose the Linux ``pidfd_open`` syscall as
  :func:`os.pidfd_open`.

- bpo-38602: Added constants :data:`~fcntl.F_OFD_GETLK`,
  :data:`~fcntl.F_OFD_SETLK` and :data:`~fcntl.F_OFD_SETLKW` to the
  :mod:`fcntl` module. Patch by Dong-hee Na.

- bpo-38334: Fixed seeking backward on an encrypted
  :class:`zipfile.ZipExtFile`.

- bpo-38312: Add :func:`curses.get_escdelay`, :func:`curses.set_escdelay`,
  :func:`curses.get_tabsize`, and :func:`curses.set_tabsize` functions - by
  Anthony Sottile.

- bpo-38586: Now :func:`~logging.config.fileConfig` correcty sets the .name
  of handlers loaded.

- bpo-38565: Add new cache_parameters() method for functools.lru_cache() to
  better support pickling.

- bpo-34679: asynci.ProactorEventLoop.close() now only calls
  signal.set_wakeup_fd() in the main thread.

- bpo-31202: The case the result of :func:`pathlib.WindowsPath.glob` matches
  now the case of the pattern for literal parts.

- bpo-36321: Remove misspelled attribute.  The 3.8 changelog noted that this
  would be removed in 3.9.

- bpo-38521: Fixed erroneous equality comparison in statistics.NormalDist().

- bpo-38493: Added :data:`~os.CLD_KILLED` and :data:`~os.CLD_STOPPED` for
  :attr:`si_code`. Patch by Dong-hee Na.

- bpo-38478: Fixed a bug in :meth:`inspect.signature.bind` that was causing
  it to fail when handling a keyword argument with same name as
  positional-only parameter. Patch by Pablo Galindo.

- bpo-33604: Fixed `hmac.new` and `hmac.HMAC` to raise TypeError instead of
  ValueError when the digestmod parameter, now required in 3.8, is omitted.
  Also clarified the hmac module documentation and docstrings.

- bpo-38378: Parameters *out* and *in* of :func:`os.sendfile` was renamed to
  *out_fd* and *in_fd*.

- bpo-38417: Added support for setting the umask in the child process to the
  subprocess module on POSIX systems.

- bpo-38449: Revert GH-15522, which introduces a regression in
  :meth:`mimetypes.guess_type` due to improper handling of filenames as
  urls.

- bpo-38431: Fix ``__repr__`` method for :class:`dataclasses.InitVar` to
  support typing objects, patch by Samuel Colvin.

- bpo-38109: Add missing :data:`stat.S_IFDOOR`, :data:`stat.S_IFPORT`,
  :data:`stat.S_IFWHT`, :func:`stat.S_ISDOOR`, :func:`stat.S_ISPORT`, and
  :func:`stat.S_ISWHT` values to the Python implementation of :mod:`stat`.

- bpo-38422: Clarify docstrings of pathlib suffix(es)

- bpo-38405: Nested subclasses of :class:`typing.NamedTuple` are now
  pickleable.

- bpo-38332: Prevent :exc:`KeyError` thrown by :func:`_encoded_words.decode`
  when given an encoded-word with invalid content-type encoding from
  propagating all the way to :func:`email.message.get`.

- bpo-38371: Deprecated the ``split()`` method in
  :class:`_tkinter.TkappType` in favour of the ``splitlist()`` method which
  has more consistent and predicable behavior.

- bpo-38341: Add :exc:`smtplib.SMTPNotSupportedError` to the :mod:`smtplib`
  exported names.

- bpo-38319: sendfile() used in socket and shutil modules was raising
  OverflowError for files >= 2GiB on 32-bit architectures.  (patch by
  Giampaolo Rodola)

- bpo-38242: Revert the new asyncio Streams API

- bpo-13153: OS native encoding is now used for converting between Python
  strings and Tcl objects.  This allows to display, copy and paste to
  clipboard emoji and other non-BMP characters.  Converting strings from Tcl
  to Python and back now never fails (except MemoryError).

- bpo-38019: Correctly handle pause/resume reading of closed asyncio unix
  pipe.

- bpo-38163: Child mocks will now detect their type as either synchronous or
  asynchronous, asynchronous child mocks will be AsyncMocks and synchronous
  child mocks will be either MagicMock or Mock (depending on their parent
  type).

- bpo-38161: Removes _AwaitEvent from AsyncMock.

- bpo-38216: Allow the rare code that wants to send invalid http requests
  from the `http.client` library a way to do so.  The fixes for bpo-30458
  led to breakage for some projects that were relying on this ability to
  test their own behavior in the face of bad requests.

- bpo-28286: Deprecate opening :class:`~gzip.GzipFile` for writing
  implicitly.  Always specify the *mode* argument for writing.

- bpo-38108: Any synchronous magic methods on an AsyncMock now return a
  MagicMock. Any asynchronous magic methods on a MagicMock now return an
  AsyncMock.

- bpo-38265: Update the *length* parameter of :func:`os.pread` to accept
  :c:type:`Py_ssize_t` instead of :c:type:`int`.

- bpo-38112: :mod:`compileall` has a higher default recursion limit and new
  command-line arguments for path manipulation, symlinks handling, and
  multiple optimization levels.

- bpo-38248: asyncio: Fix inconsistent immediate Task cancellation

- bpo-38237: The arguments for the builtin pow function are more
  descriptive. They can now also be passed in as keywords.

- bpo-34002: Improve efficiency in parts of email package by changing
  while-pop to a for loop, using isdisjoint instead of set intersections.

- bpo-38191: Constructors of :class:`~typing.NamedTuple` and
  :class:`~typing.TypedDict` types now accept arbitrary keyword argument
  names, including "cls", "self", "typename", "_typename", "fields" and
  "_fields".

- bpo-38155: Add ``__all__`` to  :mod:`datetime`. Patch by Tahia Khan.

- bpo-38185: Fixed case-insensitive string comparison in
  :class:`sqlite3.Row` indexing.

- bpo-38136: Changes AsyncMock call count and await count to be two
  different counters. Now await count only counts when a coroutine has been
  awaited, not when it has been called, and vice-versa. Update the
  documentation around this.

- bpo-37828: Fix default mock name in
  :meth:`unittest.mock.Mock.assert_called` exceptions. Patch by Abraham
  Toriz Cruz.

- bpo-38175: Fix a memory leak in comparison of :class:`sqlite3.Row`
  objects.

- bpo-33936: _hashlib no longer calls obsolete OpenSSL initialization
  function with OpenSSL 1.1.0+.

- bpo-34706: Preserve subclassing in inspect.Signature.from_callable.

- bpo-38153: Names of hashing algorithms frome OpenSSL are now normalized to
  follow Python's naming conventions. For example OpenSSL uses sha3-512
  instead of sha3_512 or blake2b512 instead of blake2b.

- bpo-38115: Fix a bug in dis.findlinestarts() where it would return invalid
  bytecode offsets. Document that a code object's co_lnotab can contain
  invalid bytecode offsets.

- bpo-38148: Add slots to :mod:`asyncio` transport classes, which can reduce
  memory usage.

- bpo-38142: The _hashlib OpenSSL wrapper extension module is now PEP-384
  compliant.

- bpo-9216: hashlib constructors now support usedforsecurity flag to signal
  that a hashing algorithm is not used in a security context.

- bpo-36991: Fixes a potential incorrect AttributeError exception escaping
  ZipFile.extract() in some unsupported input error situations.

- bpo-38134: Remove obsolete copy of PBKDF2_HMAC_fast. All supported OpenSSL
  versions contain a fast implementation.

- bpo-38132: The OpenSSL hashlib wrapper uses a simpler implementation.
  Several Macros and pointless caches are gone. The hash name now comes from
  OpenSSL's EVP. The algorithm name stays the same, except it is now always
  lower case.

- bpo-38008: Fix parent class check in protocols to correctly identify the
  module that provides a builtin protocol, instead of assuming they all come
  from the :mod:`collections.abc` module

- bpo-34037: For :mod:`asyncio`, add a new coroutine
  :meth:`loop.shutdown_default_executor`. The new coroutine provides an API
  to schedule an executor shutdown that waits on the threadpool to finish
  closing. Also, :func:`asyncio.run` has been updated to utilize the new
  coroutine. Patch by Kyle Stanley.

- bpo-37405: Fixed regression bug for socket.getsockname() for non-CAN_ISOTP
  AF_CAN address family sockets by returning a 1-tuple instead of string.

- bpo-38121: Update parameter names on functions in importlib.metadata
  matching the changes in the 0.22 release of importlib_metadata.

- bpo-38110: The os.closewalk() implementation now uses the libc fdwalk()
  API on platforms where it is available.

- bpo-38093: Fixes AsyncMock so it doesn't crash when used with
  AsyncContextManagers or AsyncIterators.

- bpo-37488: Add warning to :meth:`datetime.utctimetuple`,
  :meth:`datetime.utcnow` and :meth:`datetime.utcfromtimestamp` .

- bpo-35640: Allow passing a :term:`path-like object` as ``directory``
  argument to the :class:`http.server.SimpleHTTPRequestHandler` class. Patch
  by Géry Ogam.

- bpo-38086: Update importlib.metadata with changes from `importlib_metadata
  0.21
  <https://gitlab.com/python-devs/importlib_metadata/blob/0.21/importlib_metadata/docs/changelog.rst>`_.

- bpo-37251: Remove `__code__` check in AsyncMock that incorrectly evaluated
  function specs as async objects but failed to evaluate classes with
  `__await__` but no `__code__` attribute defined as async objects.

- bpo-38037: Fix reference counters in the :mod:`signal` module.

- bpo-38066: Hide internal asyncio.Stream methods: feed_eof(), feed_data(),
  set_exception() and set_transport().

- bpo-38059: inspect.py now uses sys.exit() instead of exit()

- bpo-38049: Added command-line interface for the :mod:`ast` module.

- bpo-37953: In :mod:`typing`, improved the ``__hash__`` and ``__eq__``
  methods for :class:`ForwardReferences`.

- bpo-38026: Fixed :func:`inspect.getattr_static` used ``isinstance`` while
  it should avoid dynamic lookup.

- bpo-35923: Update :class:`importlib.machinery.BuiltinImporter` to use
  ``loader._ORIGIN`` instead of a hardcoded value. Patch by Dong-hee Na.

- bpo-38010: In ``importlib.metadata`` sync with ``importlib_metadata``
  0.20, clarifying behavior of ``files()`` and fixing issue where only one
  requirement was returned for ``requires()`` on ``dist-info`` packages.

- bpo-38006: weakref.WeakValueDictionary defines a local remove() function
  used as callback for weak references. This function was created with a
  closure. Modify the implementation to avoid the closure.

- bpo-37995: Added the *indent* option to :func:`ast.dump` which allows it
  to produce a multiline indented output.

- bpo-34410: Fixed a crash in the :func:`tee` iterator when re-enter it.
  RuntimeError is now raised in this case.

- bpo-37140: Fix a ctypes regression of Python 3.8. When a ctypes.Structure
  is passed by copy to a function, ctypes internals created a temporary
  object which had the side effect of calling the structure finalizer
  (__del__) twice. The Python semantics requires a finalizer to be called
  exactly once. Fix ctypes internals to no longer call the finalizer twice.

- bpo-37587: ``_json.scanstring`` is now up to 3x faster when there are many
  backslash escaped characters in the JSON string.

- bpo-37834: Prevent shutil.rmtree exception when built on non-Windows
  system without fd system call support, like older versions of macOS.

- bpo-10978: Semaphores and BoundedSemaphores can now release more than one
  waiting thread at a time.

- bpo-37972: Subscripts to the `unittest.mock.call` objects now receive the
  same chaining mechanism as any other custom attributes, so that the
  following usage no longer raises a `TypeError`:

  call().foo().__getitem__('bar')

  Patch by blhsing

- bpo-37965: Fix C compiler warning caused by
  distutils.ccompiler.CCompiler.has_function.

- bpo-37964: Add ``F_GETPATH`` command to :mod:`fcntl`.

- bpo-37960: ``repr()`` of buffered and text streams now silences only
  expected exceptions when get the value of "name" and "mode" attributes.

- bpo-37961: Add a ``total_nframe`` field to the traces collected by the
  tracemalloc module. This field indicates the original number of frames
  before it was truncated.

- bpo-37951: Most features of the subprocess module now work again in
  subinterpreters. Only *preexec_fn* is restricted in subinterpreters.

- bpo-36205: Fix the rusage implementation of time.process_time() to
  correctly report the sum of the system and user CPU time.

- bpo-37950: Fix :func:`ast.dump` when call with incompletely initialized
  node.

- bpo-34679: Restores instantiation of Windows IOCP event loops from the
  non-main thread.

- bpo-36917: Add default implementation of the
  :meth:`ast.NodeVisitor.visit_Constant` method which emits a deprecation
  warning and calls corresponding methody ``visit_Num()``, ``visit_Str()``,
  etc.

- bpo-37798: Update test_statistics.py to verify that the statistics module
  works well for both C and Python implementations. Patch by Dong-hee Na

- bpo-26589: Added a new status code to the http module: 451
  UNAVAILABLE_FOR_LEGAL_REASONS

- bpo-37915: Fix a segmentation fault that appeared when comparing instances
  of ``datetime.timezone`` and ``datetime.tzinfo`` objects. Patch by Pablo
  Galindo.

- bpo-32554: Deprecate having random.seed() call hash on arbitrary types.

- bpo-9938: Add optional keyword argument ``exit_on_error`` for
  :class:`ArgumentParser`.

- bpo-37851: The :mod:`faulthandler` module no longer allocates its
  alternative stack at Python startup. Now the stack is only allocated at
  the first faulthandler usage.

- bpo-32793: Fix a duplicated debug message when
  :meth:`smtplib.SMTP.connect` is called.

- bpo-37885: venv: Don't generate unset variable warning on deactivate.

- bpo-37868: Fix dataclasses.is_dataclass when given an instance that never
  raises AttributeError in __getattr__.  That is, an object that returns
  something for __dataclass_fields__ even if it's not a dataclass.

- bpo-37811: Fix ``socket`` module's ``socket.connect(address)`` function
  being unable to establish connection in case of interrupted system call.
  The problem was observed on all OSes which ``poll(2)`` system call can
  take only non-negative integers and -1 as a timeout value.

- bpo-37863: Optimizations for Fraction.__hash__ suggested by Tim Peters.

- bpo-21131: Fix ``faulthandler.register(chain=True)`` stack. faulthandler
  now allocates a dedicated stack of ``SIGSTKSZ*2`` bytes, instead of just
  ``SIGSTKSZ`` bytes. Calling the previous signal handler in faulthandler
  signal handler uses more than ``SIGSTKSZ`` bytes of stack memory on some
  platforms.

- bpo-37798: Add C fastpath for statistics.NormalDist.inv_cdf() Patch by
  Dong-hee Na

- bpo-37804: Remove the deprecated method `threading.Thread.isAlive()`.
  Patch by Dong-hee Na.

- bpo-37819: Add Fraction.as_integer_ratio() to match the corresponding
  methods in bool, int, float, and decimal.

- bpo-14465: Add an xml.etree.ElementTree.indent() function for
  pretty-printing XML trees. Contributed by Stefan Behnel.

- bpo-37810: Fix :mod:`difflib` ``?`` hint in diff output when dealing with
  tabs.  Patch by Anthony Sottile.

- bpo-37772: In ``zipfile.Path``, when adding implicit dirs, ensure that
  ancestral directories are added and that duplicates are excluded.

- bpo-18578: Renamed and documented `test.bytecode_helper` as
  `test.support.bytecode_helper`. Patch by Joannah Nanjekye.

- bpo-37785: Fix xgettext warnings in :mod:`argparse`.

- bpo-34488: :meth:`writelines` method of :class:`io.BytesIO` is now
  slightly faster when many small lines are passed. Patch by Sergey
  Fedoseev.

- bpo-37449: `ensurepip` now uses `importlib.resources.read_binary()` to
  read data instead of `pkgutil.get_data()`. Patch by Joannah Nanjekye.

- bpo-28292: Mark calendar.py helper functions as being private.  The
  follows PEP 8 guidance to maintain the style conventions in the module and
  it addresses a known case of user confusion.

- bpo-18049: Add definition of THREAD_STACK_SIZE for AIX in
  Python/thread_pthread.h The default thread stacksize caused crashes with
  the default recursion limit Patch by M Felt

- bpo-37742: The logging.getLogger() API now returns the root logger when
  passed the name 'root', whereas previously it returned a non-root logger
  named 'root'. This could affect cases where user code explicitly wants a
  non-root logger named 'root', or instantiates a logger using
  logging.getLogger(__name__) in some top-level module called 'root.py'.

- bpo-37738: Fix the implementation of curses ``addch(str, color_pair)``:
  pass the color pair to ``setcchar()``, instead of always passing 0 as the
  color pair.

- bpo-37723: Fix performance regression on regular expression parsing with
  huge character sets. Patch by Yann Vaginay.

- bpo-35943: The function :c:func:`PyImport_GetModule` now ensures any
  module it returns is fully initialized. Patch by Joannah Nanjekye.

- bpo-32178: Fix IndexError in :mod:`email` package when trying to parse
  invalid address fields starting with ``:``.

- bpo-37268: The :mod:`parser` module is deprecated and will be removed in
  future versions of Python.

- bpo-11953: Completing WSA* error codes in :mod:`socket`.

- bpo-37685: Fixed comparisons of :class:`datetime.timedelta` and
  :class:`datetime.timezone`.

- bpo-37697: Syncronize ``importlib.metadata`` with `importlib_metadata 0.19
  <https://gitlab.com/python-devs/importlib_metadata/-/milestones/20>`_,
  improving handling of EGG-INFO files and fixing a crash when entry point
  names contained colons.

- bpo-37695: Correct :func:`curses.unget_wch` error message.  Patch by
  Anthony Sottile.

- bpo-37689: Add :meth:`is_relative_to` in :class:`PurePath` to determine
  whether or not one path is relative to another.

- bpo-29553: Fixed :meth:`argparse.ArgumentParser.format_usage` for mutually
  exclusive groups. Patch by Andrew Nester.

- bpo-37691: Let math.dist() accept coordinates as sequences (or iterables)
  rather than just tuples.

- bpo-37685: Fixed ``__eq__``, ``__lt__`` etc implementations in some
  classes. They now return :data:`NotImplemented` for unsupported type of
  the other operand. This allows the other operand to play role (for example
  the equality comparison with :data:`~unittest.mock.ANY` will return
  ``True``).

- bpo-37354: Make Activate.ps1 Powershell script static to allow for signing
  it.

- bpo-37664: Update wheels bundled with ensurepip (pip 19.2.3 and setuptools
  41.2.0)

- bpo-37663: Bring consistency to venv shell activation scripts by always
  using __VENV_PROMPT__.

- bpo-37642: Allowed the pure Python implementation of
  :class:`datetime.timezone` to represent sub-minute offsets close to
  minimum and maximum boundaries, specifically in the ranges (23:59, 24:00)
  and (-23:59, 24:00). Patch by Ngalim Siregar

- bpo-36161: In :mod:`posix`, use ``ttyname_r`` instead of ``ttyname`` for
  thread safety.

- bpo-36324: Make internal attributes for statistics.NormalDist() private.

- bpo-37555: Fix `NonCallableMock._call_matcher` returning tuple instead of
  `_Call` object when `self._spec_signature` exists. Patch by Elizabeth
  Uselton

- bpo-29446: Make `from tkinter import *` import only the expected objects.

- bpo-16970: Adding a value error when an invalid value in passed to nargs
  Patch by Robert Leenders

- bpo-34443: Exceptions from :mod:`enum` now use the ``__qualname`` of the
  enum class in the exception message instead of the ``__name__``.

- bpo-37491: Fix ``IndexError`` when parsing email headers with unexpectedly
  ending bare-quoted string value. Patch by Abhilash Raj.

- bpo-37587: Make json.loads faster for long strings. (Patch by Marco
  Paolini)

- bpo-18378: Recognize "UTF-8" as a valid value for LC_CTYPE in
  locale._parse_localename.

- bpo-37579: Return :exc:`NotImplemented` in Python implementation of
  ``__eq__`` for :class:`~datetime.timedelta` and :class:`~datetime.time`
  when the other object being compared is not of the same type to match C
  implementation. Patch by Karthikeyan Singaravelan.

- bpo-21478: Record calls to parent when autospecced object is attached to a
  mock using :func:`unittest.mock.attach_mock`. Patch by Karthikeyan
  Singaravelan.

- bpo-37531: "python3 -m test -jN --timeout=TIMEOUT" now kills a worker
  process if it runs longer than *TIMEOUT* seconds.

- bpo-37482: Fix serialization of display name in originator or destination
  address fields with both encoded words and special chars.

- bpo-36993: Improve error reporting for corrupt zip files with bad zip64
  extra data. Patch by Daniel Hillier.

- bpo-37502: pickle.loads() no longer raises TypeError when the buffers
  argument is set to None

- bpo-37520: Correct behavior for zipfile.Path.parent when the path object
  identifies a subdirectory.

- bpo-18374: Fix the ``.col_offset`` attribute of nested :class:`ast.BinOp`
  instances which had a too large value in some situations.

- bpo-37424: Fixes a possible hang when using a timeout on
  `subprocess.run()` while capturing output.  If the child process spawned
  its own children or otherwise connected its stdout or stderr handles with
  another process, we could hang after the timeout was reached and our child
  was killed when attempting to read final output from the pipes.

- bpo-37421: Fix :func:`multiprocessing.util.get_temp_dir` finalizer: clear
  also the 'tempdir' configuration of the current process, so next call to
  ``get_temp_dir()`` will create a new temporary directory, rather than
  reusing the removed temporary directory.

- bpo-37481: The distutils ``bdist_wininst`` command is deprecated in Python
  3.8, use ``bdist_wheel`` (wheel packages) instead.

- bpo-37479: When `Enum.__str__` is overridden in a derived class, the
  override will be used by `Enum.__format__` regardless of whether mixin
  classes are present.

- bpo-37440: http.client now enables TLS 1.3 post-handshake authentication
  for default context or if a cert_file is passed to HTTPSConnection.

- bpo-37437: Update vendorized expat version to 2.2.7.

- bpo-37428: SSLContext.post_handshake_auth = True no longer sets
  SSL_VERIFY_POST_HANDSHAKE verify flag for client connections. Although the
  option is documented as ignored for clients, OpenSSL implicitly enables
  cert chain validation when the flag is set.

- bpo-37420: :func:`os.sched_setaffinity` now correctly handles errors that
  arise during iteration over its ``mask`` argument. Patch by Brandt Bucher.

- bpo-37412: The :func:`os.getcwdb` function now uses the UTF-8 encoding on
  Windows, rather than the ANSI code page: see :pep:`529` for the rationale.
  The function is no longer deprecated on Windows.

- bpo-37406: The sqlite3 module now raises TypeError, rather than
  ValueError, if operation argument type is not str: execute(),
  executemany() and calling a connection.

- bpo-29412: Fix IndexError in parsing a header value ending unexpectedly.
  Patch by Abhilash Raj.

- bpo-36546: The *dist* argument for statistics.quantiles() is now
  positional only. The current name doesn't reflect that the argument can be
  either a dataset or a distribution.  Marking the parameter as positional
  avoids confusion and makes it possible to change the name later.

- bpo-37394: Fix a bug that was causing the :mod:`queue` module to fail if
  the accelerator module was not available. Patch by Pablo Galindo.

- bpo-37376: :mod:`pprint` now has support for
  :class:`types.SimpleNamespace`. Patch by Carl Bordum Hansen.

- bpo-26967: An :class:`~argparse.ArgumentParser` with
  ``allow_abbrev=False`` no longer disables grouping of short flags, such as
  ``-vv``, but only disables abbreviation of long flags as documented. Patch
  by Zac Hatfield-Dodds.

- bpo-37212: :func:`unittest.mock.call` now preserves the order of keyword
  arguments in repr output. Patch by Karthikeyan Singaravelan.

- bpo-37372: Fix error unpickling datetime.time objects from Python 2 with
  seconds>=24. Patch by Justin Blanchard.

- bpo-37345: Add formal support for UDPLITE sockets. Support was present
  before, but it is now easier to detect support with ``hasattr(socket,
  'IPPROTO_UDPLITE')`` and there are constants defined for each of the
  values needed: :py:obj:`socket.IPPROTO_UDPLITE`,
  :py:obj:`UDPLITE_SEND_CSCOV`, and :py:obj:`UDPLITE_RECV_CSCOV`. Patch by
  Gabe Appleton.

- bpo-37358: Optimized ``functools.partial`` by using vectorcall.

- bpo-37347: :meth:`sqlite3.Connection.create_aggregate`,
  :meth:`sqlite3.Connection.create_function`,
  :meth:`sqlite3.Connection.set_authorizer`,
  :meth:`sqlite3.Connection.set_progress_handler`
  :meth:`sqlite3.Connection.set_trace_callback` methods lead to segfaults if
  some of these methods are called twice with an equal object but not the
  same. Now callbacks are stored more carefully. Patch by Aleksandr Balezin.

- bpo-37163: The *obj* argument of :func:`dataclasses.replace` is
  positional-only now.

- bpo-37085: Add the optional Linux SocketCAN Broadcast Manager constants,
  used as flags to configure the BCM behaviour, in the socket module.  Patch
  by Karl Ding.

- bpo-37328: ``HTMLParser.unescape`` is removed.  It was undocumented and
  deprecated since Python 3.4.

- bpo-37305: Add .webmanifest -> application/manifest+json to list of
  recognized file types and content type headers

- bpo-37320: ``aifc.openfp()`` alias to ``aifc.open()``, ``sunau.openfp()``
  alias to ``sunau.open()``, and ``wave.openfp()`` alias to ``wave.open()``
  have been removed. They were deprecated since Python 3.7.

- bpo-37315: Deprecated accepting floats with integral value (like ``5.0``)
  in :func:`math.factorial`.

- bpo-37312: ``_dummy_thread`` and ``dummy_threading`` modules have been
  removed. These modules were deprecated since Python 3.7 which requires
  threading support.

- bpo-33972: Email with single part but content-type set to ``multipart/*``
  doesn't raise AttributeError anymore.

- bpo-37280: Use threadpool for reading from file for sendfile fallback
  mode.

- bpo-37279: Fix asyncio sendfile support when sendfile sends extra data in
  fallback mode.

- bpo-19865: :func:`ctypes.create_unicode_buffer()` now also supports
  non-BMP characters on platforms with 16-bit :c:type:`wchar_t` (for
  example, Windows and AIX).

- bpo-37266: In a subinterpreter, spawning a daemon thread now raises an
  exception. Daemon threads were never supported in subinterpreters.
  Previously, the subinterpreter finalization crashed with a Pyton fatal
  error if a daemon thread was still running.

- bpo-37210: Allow pure Python implementation of :mod:`pickle` to work even
  when the C :mod:`_pickle` module is unavailable.

- bpo-21872: Fix :mod:`lzma`: module decompresses data incompletely. When
  decompressing a FORMAT_ALONE format file, and it doesn't have the end
  marker, sometimes the last one to dozens bytes can't be output. Patch by
  Ma Lin.

- bpo-35922: Fix :meth:`RobotFileParser.crawl_delay` and
  :meth:`RobotFileParser.request_rate` to return ``None`` rather than raise
  :exc:`AttributeError` when no relevant rule is defined in the robots.txt
  file.  Patch by Rémi Lapeyre.

- bpo-35766: Change the format of feature_version to be a (major, minor)
  tuple.

- bpo-36607: Eliminate :exc:`RuntimeError` raised by
  :func:`asyncio.all_tasks()` if internal tasks weak set is changed by
  another thread during iteration.

- bpo-18748: :class:`_pyio.IOBase` destructor now does nothing if getting
  the ``closed`` attribute fails to better mimick :class:`_io.IOBase`
  finalizer.

- bpo-36402: Fix a race condition at Python shutdown when waiting for
  threads. Wait until the Python thread state of all non-daemon threads get
  deleted (join all non-daemon threads), rather than just wait until
  non-daemon Python threads complete.

- bpo-37206: Default values which cannot be represented as Python objects no
  longer improperly represented as ``None`` in function signatures.

- bpo-37111: Added ``encoding`` and ``errors`` keyword parameters to
  ``logging.basicConfig``.

- bpo-12144: Ensure cookies with ``expires`` attribute are handled in
  :meth:`CookieJar.make_cookies`.

- bpo-34886: Fix an unintended ValueError from :func:`subprocess.run` when
  checking for conflicting `input` and `stdin` or `capture_output` and
  `stdout` or `stderr` args when they were explicitly provided but with
  `None` values within a passed in `**kwargs` dict rather than as passed
  directly by name. Patch contributed by Rémi Lapeyre.

- bpo-37173: The exception message for ``inspect.getfile()`` now correctly
  reports the passed class rather than the builtins module.

- bpo-37178: Give math.perm() a one argument form that means the same as
  math.factorial().

- bpo-37178: For math.perm(n, k), let k default to n, giving the same result
  as factorial.

- bpo-37165: Converted _collections._count_elements to use the Argument
  Clinic.

- bpo-34767: Do not always create a :class:`collections.deque` in
  :class:`asyncio.Lock`.

- bpo-37158: Speed-up statistics.fmean() by switching from a function to a
  generator.

- bpo-34282: Remove ``Enum._convert`` method, deprecated in 3.8.

- bpo-37150: `argparse._ActionsContainer.add_argument` now throws error, if
  someone accidentally pass FileType class object instead of instance of
  FileType as `type` argument

- bpo-28724: The socket module now has the :func:`socket.send_fds` and
  :func:`socket.recv.fds` methods. Contributed by Joannah Nanjekye, Shinya
  Okano and Victor Stinner.

- bpo-35621: Support running asyncio subprocesses when execution event loop
  in a thread on UNIX.

- bpo-36520: Lengthy email headers with UTF-8 characters are now properly
  encoded when they are folded. Patch by Jeffrey Kintscher.

- bpo-30835: Fixed a bug in email parsing where a message with invalid bytes
  in content-transfer-encoding of a multipart message can cause an
  AttributeError. Patch by Andrew Donnellan.

- bpo-31163: pathlib.Path instance's rename and replace methods now return
  the new Path instance.

- bpo-25068: :class:`urllib.request.ProxyHandler` now lowercases the keys of
  the passed dictionary.

- bpo-26185: Fix :func:`repr` on empty :class:`ZipInfo` object. Patch by
  Mickaël Schoentgen.

- bpo-21315: Email headers containing RFC2047 encoded words are parsed
  despite the missing whitespace, and a defect registered. Also missing
  trailing whitespace after encoded words is now registered as a defect.

- bpo-31904: Port test_datetime to VxWorks: skip zoneinfo tests on VxWorks

- bpo-35805: Add parser for Message-ID header and add it to default
  HeaderRegistry. This should prevent folding of Message-ID using RFC 2048
  encoded words.

- bpo-36871: Ensure method signature is used instead of constructor
  signature of a class while asserting mock object against method calls.
  Patch by Karthikeyan Singaravelan.

- bpo-35070: posix.getgrouplist() now works correctly when the user belongs
  to NGROUPS_MAX supplemental groups. Patch by Jeffrey Kintscher.

- bpo-31783: Fix race condition in ThreadPoolExecutor when worker threads
  are created during interpreter shutdown.

- bpo-36582: Fix ``UserString.encode()`` to correctly return ``bytes``
  rather than a ``UserString`` instance.

- bpo-32424: Deprecate xml.etree.ElementTree.Element.copy() in favor of
  copy.copy().

  Patch by Gordon P. Hemsley

- bpo-36564: Fix infinite loop in email header folding logic that would be
  triggered when an email policy's max_line_length is not long enough to
  include the required markup and any values in the message. Patch by Paul
  Ganssle

- bpo-36543: Removed methods Element.getchildren(), Element.getiterator()
  and ElementTree.getiterator() and the xml.etree.cElementTree module.

- bpo-36409: Remove the old plistlib API deprecated in Python 3.4

- bpo-36302: distutils sorts source file lists so that Extension .so files
  build more reproducibly by default

- bpo-36250: Ignore ``ValueError`` from ``signal`` with ``interaction`` in
  non-main thread.

- bpo-36046: Added ``user``, ``group`` and ``extra_groups`` parameters to
  the subprocess.Popen constructor. Patch by Patrick McLean.

- bpo-32627: Fix compile error when ``_uuid`` headers conflicting included.

- bpo-35800: Deprecate ``smtpd.MailmanProxy`` ready for future removal.

- bpo-35168: :attr:`shlex.shlex.punctuation_chars` is now a read-only
  property.

- bpo-8538: Add support for boolean actions like ``--foo`` and ``--no-foo``
  to argparse. Patch contributed by Rémi Lapeyre.

- bpo-20504: Fixes a bug in :mod:`cgi` module when a multipart/form-data
  request has no `Content-Length` header.

- bpo-25988: The abstract base classes in :mod:`collections.abc` no longer
  are exposed in the regular :mod:`collections` module.

- bpo-11122: Distutils won't check for rpmbuild in specified paths only.

- bpo-34775: Division handling of PurePath now returns NotImplemented
  instead of raising a TypeError when passed something other than an
  instance of str or PurePath. Patch by Roger Aiudi.

- bpo-34749: :func:`binascii.a2b_base64` is now up to 2 times faster. Patch
  by Sergey Fedoseev.

- bpo-34519: Add additional aliases for HP Roman 8. Patch by Michael Osipov.

- bpo-28009: Fix uuid.getnode() on platforms with '.' as MAC Addr delimiter
  as well fix for MAC Addr format that omits a leading 0 in MAC Addr values.
  Currently, AIX is the only know platform with these settings. Patch by
  Michael Felt.

- bpo-30618: Add :meth:`~pathlib.Path.readlink`. Patch by Girts Folkmanis.

- bpo-32498: Made :func:`urllib.parse.unquote()` accept bytes in addition to
  strings. Patch by Stein Karlsen.

- bpo-33348: lib2to3 now recognizes expressions after ``*`` and `**` like in
  ``f(*[] or [])``.

- bpo-32689: Update :func:`shutil.move` function to allow for Path objects
  to be used as source argument. Patch by Emily Morehouse and Maxwell
  "5.13b" McKinnon.

- bpo-32820: Added __format__ to IPv4 and IPv6 classes.  Always outputs a
  fully zero- padded string. Supports b/x/n modifiers (bin/hex/native
  format).  Native format for IPv4 is bin, native format for IPv6 is hex.
  Also supports '#' and '_' modifiers.

- bpo-27657: Fix urllib.parse.urlparse() with numeric paths. A string like
  "path:80" is no longer parsed as a path but as a scheme ("path") and a
  path ("80").

- bpo-4963: Fixed non-deterministic behavior related to mimetypes extension
  mapping and module reinitialization.

Documentation
-------------

- bpo-21767: Explicitly mention abc support in functools.singledispatch

- bpo-38816: Provides more details about the interaction between
  :c:func:`fork` and CPython's runtime, focusing just on the C-API.  This
  includes cautions about where :c:func:`fork` should and shouldn't be
  called.

- bpo-38351: Modernize :mod:`email` examples from %-formatting to f-strings.

- bpo-38778: Document the fact that :exc:`RuntimeError` is raised if
  :meth:`os.fork` is called in a subinterpreter.

- bpo-38592: Add Brazilian Portuguese to the language switcher at Python
  Documentation website.

- bpo-38294: Add list of no-longer-escaped chars to re.escape documentation

- bpo-38053: Modernized the plistlib documentation

- bpo-26868: Fix example usage of :c:func:`PyModule_AddObject` to properly
  handle errors.

- bpo-36797: Fix a dead link in the distutils API Reference.

- bpo-37977: Warn more strongly and clearly about pickle insecurity

- bpo-37979: Added a link to dateutil.parser.isoparse in the
  datetime.fromisoformat documentation. Patch by Paul Ganssle

- bpo-12707: Deprecate info(), geturl(), getcode() methods in favor of the
  headers, url, and status properties, respectively, for HTTPResponse and
  addinfourl. Also deprecate the code attribute of addinfourl in favor of
  the status attribute. Patch by Ashwin Ramaswami

- bpo-37937: Mention ``frame.f_trace`` in :func:`sys.settrace` docs.

- bpo-37878: Make :c:func:`PyThreadState_DeleteCurrent` Internal.

- bpo-37759: Beginning edits to Whatsnew 3.8

- bpo-37726: Stop recommending getopt in the tutorial for command line
  argument parsing and promote argparse.

- bpo-32910: Remove implementation-specific behaviour of how venv's
  Deactivate works.

- bpo-37256: Fix wording of arguments for :class:`Request` in
  :mod:`urllib.request`

- bpo-37284: Add a brief note to indicate that any new
  ``sys.implementation`` required attributes must go through the PEP
  process.

- bpo-30088: Documented that :class:`mailbox.Maildir` constructor doesn't
  attempt to verify the maildir folder layout correctness. Patch by
  Sviatoslav Sydorenko.

- bpo-37521: Fix `importlib` examples to insert any newly created modules
  via importlib.util.module_from_spec() immediately into sys.modules instead
  of after calling loader.exec_module().

  Thanks to Benjamin Mintz for finding the bug.

- bpo-37456: Slash ('/') is now part of syntax.

- bpo-37487: Fix PyList_GetItem index description to include 0.

- bpo-37149: Replace the dead link to the Tkinter 8.5 reference by John
  Shipman, New Mexico Tech, with a link to the archive.org copy.

- bpo-37478: Added possible exceptions to the description of os.chdir().

- bpo-34903: Documented that in :meth:`datetime.datetime.strptime()`, the
  leading zero in some two-digit formats is optional. Patch by Mike Gleen.

- bpo-36260: Add decompression pitfalls to zipfile module documentation.

- bpo-37004: In the documentation for difflib, a note was added explicitly
  warning that the results of SequenceMatcher's ratio method may depend on
  the order of the input strings.

- bpo-36960: Restructured the :mod:`datetime` docs in the interest of making
  them more user-friendly and improving readability. Patch by Brad Solomon.

- bpo-36487: Make C-API docs clear about what the "main" interpreter is.

- bpo-23460: The documentation for decimal string formatting using the `:g`
  specifier has been updated to reflect the correct exponential notation
  cutoff point. Original patch contributed by Tuomas Suutari.

- bpo-35803: Document and test that ``tempfile`` functions may accept a
  :term:`path-like object` for the ``dir`` argument.  Patch by Anthony
  Sottile.

- bpo-33944: Added a note about the intended use of code in .pth files.

- bpo-34293: Fix the Doc/Makefile regarding PAPER environment variable and
  PDF builds

- bpo-25237: Add documentation for tkinter modules

Tests
-----

- bpo-38614: Fix test_communicate() of test_asyncio.test_subprocess: use
  ``support.LONG_TIMEOUT`` (5 minutes), instead of just 1 minute.

- bpo-38614: Add timeout constants to :mod:`test.support`:
  :data:`~test.support.LOOPBACK_TIMEOUT`,
  :data:`~test.support.INTERNET_TIMEOUT`,
  :data:`~test.support.SHORT_TIMEOUT` and
  :data:`~test.support.LONG_TIMEOUT`.

- bpo-38502: test.regrtest now uses process groups in the multiprocessing
  mode (-jN command line option) if process groups are available: if
  :func:`os.setsid` and :func:`os.killpg` functions are available.

- bpo-35998: Fix a race condition in test_asyncio.test_start_tls_server_1().
  Previously, there was a race condition between the test main() function
  which replaces the protocol and the test ServerProto protocol which sends
  ANSWER once it gets HELLO. Now, only the test main() function is
  responsible to send data, ServerProto no longer sends data.

- bpo-38470: Fix ``test_compileall.test_compile_dir_maxlevels()`` on Windows
  without long path support: only create 3 subdirectories instead of between
  20 and 100 subdirectories.

- bpo-37531: On timeout, regrtest no longer attempts to call
  ``popen.communicate()`` again: it can hang until all child processes using
  stdout and stderr pipes completes. Kill the worker process and ignores its
  output. Change also the faulthandler timeout of the main process from 1
  minute to 5 minutes, for Python slowest buildbots.

- bpo-38239: Fix test_gdb for Link Time Optimization (LTO) builds.

- bpo-38275: test_ssl now handles disabled TLS/SSL versions better.
  OpenSSL's crypto policy and run-time settings are recognized and tests for
  disabled versions are skipped. Tests also accept more TLS minimum_versions
  for platforms that override OpenSSL's default with strict settings.

- bpo-38271: The private keys for test_ssl were encrypted with 3DES in
  traditional PKCS#5 format. 3DES and the digest algorithm of PKCS#5 are
  blocked by some strict crypto policies. Use PKCS#8 format with AES256
  encryption instead.

- bpo-38270: test.support now has a helper function to check for
  availibility of a hash digest function. Several tests are refactored avoid
  MD5 and use SHA256 instead. Other tests are marked to use MD5 and skipped
  when MD5 is disabled.

- bpo-37123: Multiprocessing test test_mymanager() now also expects
  -SIGTERM, not only exitcode 0. BaseManager._finalize_manager() sends
  SIGTERM to the manager process if it takes longer than 1 second to stop,
  which happens on slow buildbots.

- bpo-38212: Multiprocessing tests: increase
  test_queue_feeder_donot_stop_onexc() timeout from 1 to 60 seconds.

- bpo-38117: Test with OpenSSL 1.1.1d

- bpo-38018: Increase code coverage for multiprocessing.shared_memory.

- bpo-37805: Add tests for json.dump(..., skipkeys=True). Patch by Dong-hee
  Na.

- bpo-37531: Enhance regrtest multiprocess timeout: write a message when
  killing a worker process, catch popen.kill() and popen.wait() exceptions,
  put a timeout on the second call to popen.communicate().

- bpo-37876: Add tests for ROT-13 codec.

- bpo-36833: Added tests for PyDateTime_xxx_GET_xxx() macros of the C API of
  the :mod:`datetime` module. Patch by Joannah Nanjekye.

- bpo-37558: Fix test_shared_memory_cleaned_after_process_termination name
  handling

- bpo-37526: Add :func:`test.support.catch_threading_exception`: context
  manager catching :class:`threading.Thread` exception using
  :func:`threading.excepthook`.

- bpo-37421: test_concurrent_futures now explicitly stops the ForkServer
  instance if it's running.

- bpo-37421: multiprocessing tests now stop the ForkServer instance if it's
  running: close the "alive" file descriptor to ask the server to stop and
  then remove its UNIX address.

- bpo-37421: test_distutils.test_build_ext() is now able to remove the
  temporary directory on Windows: don't import the newly built C extension
  ("xx") in the current process, but test it in a separated process.

- bpo-37421: test_concurrent_futures now cleans up multiprocessing to remove
  immediately temporary directories created by
  multiprocessing.util.get_temp_dir().

- bpo-37421: test_winconsoleio doesn't leak a temporary file anymore: use
  tempfile.TemporaryFile() to remove it when the test completes.

- bpo-37421: multiprocessing tests now explicitly call ``_run_finalizers()``
  to immediately remove temporary directories created by tests.

- bpo-37421: urllib.request tests now call
  :func:`~urllib.request.urlcleanup` to remove temporary files created by
  ``urlretrieve()`` tests and to clear the ``_opener`` global variable set
  by ``urlopen()`` and functions calling indirectly ``urlopen()``.

- bpo-37472: Remove ``Lib/test/outstanding_bugs.py``.

- bpo-37199: Fix test failures when IPv6 is unavailable or disabled.

- bpo-19696: Replace deprecated method "random.choose" with "random.choice"
  in "test_pkg_import.py".

- bpo-37335: Remove no longer necessary code from c locale coercion tests

- bpo-37421: Fix test_shutil to no longer leak temporary files.

- bpo-37411: Fix test_wsgiref.testEnviron() to no longer depend on the
  environment variables (don't fail if "X" variable is set).

- bpo-37400: Fix test_os.test_chown(): use os.getgroups() rather than
  grp.getgrall() to get groups. Rename also the test to test_chown_gid().

- bpo-37359: Add --cleanup option to python3 -m test to remove
  ``test_python_*`` directories of previous failed jobs. Add "make
  cleantest" to run ``python3 -m test --cleanup``.

- bpo-37362: test_gdb no longer fails if it gets an "unexpected" message on
  stderr: it now ignores stderr. The purpose of test_gdb is to test that
  python-gdb.py commands work as expected, not to test gdb.

- bpo-35998: Avoid TimeoutError in test_asyncio: test_start_tls_server_1()

- bpo-37278: Fix test_asyncio ProactorLoopCtrlC: join the thread to prevent
  leaking a running thread and leaking a reference.

- bpo-37261: Fix :func:`test.support.catch_unraisable_exception`: its
  __exit__() method now ignores unraisable exception raised when clearing
  its ``unraisable`` attribute.

- bpo-37069: regrtest now uses :func:`sys.unraisablehook` to mark a test as
  "environment altered" (ENV_CHANGED) if it emits an "unraisable exception".
  Moreover, regrtest logs a warning in this case.

  Use ``python3 -m test --fail-env-changed`` to catch unraisable exceptions
  in tests.

- bpo-37252: Fix assertions in ``test_close`` and
  ``test_events_mask_overflow`` devpoll tests.

- bpo-37169: Rewrite ``_PyObject_IsFreed()`` unit tests.

- bpo-37153: ``test_venv.test_multiprocessing()`` now explicitly calls
  ``pool.terminate()`` to wait until the pool completes.

- bpo-34001: Make test_ssl pass with LibreSSL. LibreSSL handles minimum and
  maximum TLS version differently than OpenSSL.

- bpo-36919: Make ``test_source_encoding.test_issue2301`` implementation
  independent. The test will work now for both CPython and IronPython.

- bpo-30202: Update ``test.test_importlib.test_abc`` to test
  ``find_spec()``.

- bpo-28009: Modify the test_uuid logic to test when a program is available
  AND can be used to obtain a MACADDR as basis for an UUID. Patch by M. Felt

- bpo-34596: Fallback to a default reason when :func:`unittest.skip` is
  uncalled. Patch by Naitree Zhu.

Build
-----

- bpo-38809: On Windows, build scripts will now recognize and use python.exe
  from an active virtual env.

- bpo-38684: Fix _hashlib build when Blake2 is disabled, but OpenSSL
  supports it.

- bpo-38468: Misc/python-config.in now uses `getvar()` for all still
  existing `sysconfig.get_config_var()` calls. Patch by Joannah Nanjekye.

- bpo-37415: Fix stdatomic.h header check for ICC compiler: the ICC
  implementation lacks atomic_uintptr_t type which is needed by Python.

- bpo-38301: In Solaris family, we must be sure to use ``-D_REENTRANT``.
  Patch by Jesús Cea Avión.

- bpo-36002: Locate ``llvm-profdata`` and ``llvm-ar`` binaries using
  ``AC_PATH_TOOL`` rather than ``AC_PATH_TARGET_TOOL``.

- bpo-37936: The :file:`.gitignore` file systematically keeps "rooted", with
  a non-trailing slash, all the rules that are meant to apply to files in a
  specific place in the repo.  Previously, when the intended file to ignore
  happened to be at the root of the repo, we'd most often accidentally also
  ignore files and directories with the same name anywhere in the tree.

- bpo-37760: The :file:`Tools/unicode/makeunicodedata.py` script, which is
  used for converting information from the Unicode Character Database into
  generated code and data used by the methods of :class:`str` and by the
  :mod:`unicodedata` module, now handles each character's data as a
  ``dataclass`` with named attributes, rather than a length-18 list of
  different fields.

- bpo-37936: The :file:`.gitignore` file no longer applies to any files that
  are in fact tracked in the Git repository.  Patch by Greg Price.

- bpo-37725: Change "clean" makefile target to also clean the program guided
  optimization (PGO) data.  Previously you would have to use "make clean"
  and "make profile-removal", or "make clobber".

- bpo-37707: Mark some individual tests to skip when --pgo is used.  The
  tests marked increase the PGO task time significantly and likely don't
  help improve optimization of the final executable.

- bpo-36044: Reduce the number of unit tests run for the PGO generation
  task.  This speeds up the task by a factor of about 15x.  Running the full
  unit test suite is slow.  This change may result in a slightly less
  optimized build since not as many code branches will be executed.  If you
  are willing to wait for the much slower build, the old behavior can be
  restored using './configure [..] PROFILE_TASK="-m test --pgo-extended"'.
  We make no guarantees as to which PGO task set produces a faster build.
  Users who care should run their own relevant benchmarks as results can
  depend on the environment, workload, and compiler tool chain.

- bpo-37468: ``make install`` no longer installs ``wininst-*.exe`` files
  used by distutils bdist_wininst: bdist_wininst only works on Windows.

- bpo-37189: Many ``PyRun_XXX()`` functions like :c:func:`PyRun_String` were
  no longer exported in ``libpython38.dll`` by mistake. Export them again to
  fix the ABI compatibility.

- bpo-25361: Enables use of SSE2 instructions in Windows 32-bit build.

- bpo-36210: Update optional extension module detection for AIX. ossaudiodev
  and spwd are not applicable for AIX, and are no longer reported as
  missing. 3rd-party packaging of ncurses (with ASIS support) conflicts with
  officially supported AIX curses library, so configure AIX to use
  libcurses.a. However, skip trying to build _curses_panel.

  patch by M Felt

Windows
-------

- bpo-38589: Fixes HTML Help shortcut when Windows is not installed to C
  drive

- bpo-38453: Ensure ntpath.realpath() correctly resolves relative paths.

- bpo-38519: Restores the internal C headers that were missing from the
  nuget.org and Microsoft Store packages.

- bpo-38492: Remove ``pythonw.exe`` dependency on the Microsoft C++ runtime.

- bpo-38344: Fix error message in activate.bat

- bpo-38359: Ensures ``pyw.exe`` launcher reads correct registry key.

- bpo-38355: Fixes ``ntpath.realpath`` failing on ``sys.executable``.

- bpo-38117: Update bundled OpenSSL to 1.1.1d

- bpo-38092: Reduce overhead when using multiprocessing in a Windows virtual
  environment.

- bpo-38133: Allow py.exe launcher to locate installations from the
  Microsoft Store and improve display of active virtual environments.

- bpo-38114: The ``pip.ini`` is no longer included in the Nuget package.

- bpo-32592: Set Windows 8 as the minimum required version for API support

- bpo-36634: :func:`os.cpu_count` now returns active processors rather than
  maximum processors.

- bpo-36634: venv activate.bat now works when the existing variables contain
  double quote characters.

- bpo-38081: Prevent error calling :func:`os.path.realpath` on ``'NUL'``.

- bpo-38087: Fix case sensitivity in test_pathlib and test_ntpath.

- bpo-38088: Fixes distutils not finding vcruntime140.dll with only the v142
  toolset installed.

- bpo-37283: Ensure command-line and unattend.xml setting override
  previously detected states in Windows installer.

- bpo-38030: Fixes :func:`os.stat` failing for block devices on Windows

- bpo-38020: Fixes potential crash when calling :func:`os.readlink` (or
  indirectly through :func:`~os.path.realpath`) on a file that is not a
  supported link.

- bpo-37705: Improve the implementation of ``winerror_to_errno()``.

- bpo-37549: :func:`os.dup` no longer fails for standard streams on Windows
  7.

- bpo-1311: The ``nul`` file on Windows now returns True from
  :func:`~os.path.exists` and a valid result from :func:`os.stat` with
  ``S_IFCHR`` set.

- bpo-9949: Enable support for following symlinks in :func:`os.realpath`.

- bpo-37834: Treat all name surrogate reparse points on Windows in
  :func:`os.lstat` and other reparse points as regular files in
  :func:`os.stat`.

- bpo-36266: Add the module name in the formatted error message when DLL
  load fail happens during module import in
  ``_PyImport_FindSharedFuncptrWindows()``. Patch by Srinivas Nyayapati.

- bpo-25172: Trying to import the :mod:`crypt` module on Windows will result
  in an :exc:`ImportError` with a message explaining that the module isn't
  supported on Windows. On other platforms, if the underlying ``_crypt``
  module is not available, the ImportError will include a message explaining
  the problem.

- bpo-37778: Fixes the icons used for file associations to the Microsoft
  Store package.

- bpo-37734: Fix use of registry values to launch Python from Microsoft
  Store app.

- bpo-37702: Fix memory leak on Windows in creating an SSLContext object or
  running urllib.request.urlopen('https://...').

- bpo-37672: Switch Windows Store package's pip to use bundled
  :file:`pip.ini` instead of :envvar:`PIP_USER` variable.

- bpo-10945: Officially drop support for creating bdist_wininst installers
  on non-Windows systems.

- bpo-37445: Include the ``FORMAT_MESSAGE_IGNORE_INSERTS`` flag in
  ``FormatMessageW()`` calls.

- bpo-37369: Fixes path for :data:`sys.executable` when running from the
  Microsoft Store.

- bpo-37380: Don't collect unfinished processes with ``subprocess._active``
  on Windows to cleanup later. Patch by Ruslan Kuprieiev.

- bpo-37351: Removes libpython38.a from standard Windows distribution.

- bpo-35360: Update Windows builds to use SQLite 3.28.0.

- bpo-37267: On Windows, :func:`os.dup` no longer creates an inheritable fd
  when handling a character file.

- bpo-36779: Ensure ``time.tzname`` is correct on Windows when the active
  code page is set to CP_UTF7 or CP_UTF8.

- bpo-32587: Make :data:`winreg.REG_MULTI_SZ` support zero-length strings.

- bpo-28269: Replace use of :c:func:`strcasecmp` for the system function
  :c:func:`_stricmp`. Patch by Minmin Gong.

- bpo-36590: Add native Bluetooth RFCOMM support to socket module.

macOS
-----

- bpo-38117: Updated OpenSSL to 1.1.1d in macOS installer.

- bpo-38089: Move Azure Pipelines to latest VM versions and make macOS tests
  optional

- bpo-18049: Increase the default stack size of threads from 5MB to 16MB on
  macOS, to match the stack size of the main thread. This avoids crashes on
  deep recursion in threads.

- bpo-34602: Avoid test suite failures on macOS by no longer calling
  resource.setrlimit to increase the process stack size limit at runtime.
  The runtime change is no longer needed since the interpreter is being
  built with a larger default stack size.

- bpo-35360: Update macOS installer to use SQLite 3.28.0.

- bpo-34631: Updated OpenSSL to 1.1.1c in macOS installer.

IDLE
----

- bpo-26353: Stop adding newline when saving an IDLE shell window.

- bpo-4630: Add an option to toggle IDLE's cursor blink for shell, editor,
  and output windows.  See Settings, General, Window Preferences, Cursor
  Blink. Patch by Zackery Spytz.

- bpo-38598: Do not try to compile IDLE shell or output windows

- bpo-36698: IDLE no longer fails when write non-encodable characters to
  stderr.  It now escapes them with a backslash, as the regular Python
  interpreter. Added the ``errors`` field to the standard streams.

- bpo-35379: When exiting IDLE, catch any AttributeError.  One happens when
  EditorWindow.close is called twice.  Printing a traceback, when IDLE is
  run from a terminal, is useless and annoying.

- bpo-38183: To avoid problems, test_idle ignores the user config directory.
  It no longer tries to create or access .idlerc or any files within. Users
  must run IDLE to discover problems with saving settings.

- bpo-38077: IDLE no longer adds 'argv' to the user namespace when
  initializing it.  This bug only affected 3.7.4 and 3.8.0b2 to 3.8.0b4.

- bpo-38041: Shell restart lines now fill the window width, always start
  with '=', and avoid wrapping unnecessarily. The line will still wrap if
  the included file name is long relative to the width.

- bpo-35771: To avoid occasional spurious test_idle failures on slower
  machines, increase the ``hover_delay`` in test_tooltip.

- bpo-37824: Properly handle user input warnings in IDLE shell. Cease
  turning SyntaxWarnings into SyntaxErrors.

- bpo-37929: IDLE Settings dialog now closes properly when there is no shell
  window.

- bpo-37902: Add mousewheel scrolling for IDLE module, path, and stack
  browsers. Patch by George Zhang.

- bpo-37849: Fixed completions list appearing too high or low when shown
  above the current line.

- bpo-36419: Refactor IDLE autocomplete and improve testing.

- bpo-37748: Reorder the Run menu.  Put the most common choice, Run Module,
  at the top.

- bpo-37692: Improve highlight config sample with example shell interaction
  and better labels for shell elements.

- bpo-37628: Settings dialog no longer expands with font size.

- bpo-37627: Initialize the Customize Run dialog with the command line
  arguments most recently entered before.  The user can optionally edit
  before submitting them.

- bpo-33610: Fix code context not showing the correct context when first
  toggled on.

- bpo-37530: Optimize code context to reduce unneeded background activity.
  Font and highlight changes now occur along with text changes instead of
  after a random delay.

- bpo-27452: Cleanup ``config.py`` by inlining ``RemoveFile`` and
  simplifying the handling of ``file`` in ``CreateConfigHandlers``.

- bpo-37325: Fix tab focus traversal order for help source and custom run
  dialogs.

- bpo-37321: Both subprocess connection error messages now refer to the
  'Startup failure' section of the IDLE doc.

- bpo-17535: Add optional line numbers for IDLE editor windows.  Windows
  open without line numbers unless set otherwise in the General tab of the
  configuration dialog.

- bpo-26806: To compensate for stack frames added by IDLE and avoid possible
  problems with low recursion limits, add 30 to limits in the user code
  execution process.  Subtract 30 when reporting recursion limits to make
  this addition mostly transparent.

- bpo-37177: Properly 'attach' search dialogs to their main window so that
  they behave like other dialogs and do not get hidden behind their main
  window.

- bpo-37039: Adjust "Zoom Height" to individual screens by momentarily
  maximizing the window on first use with a particular screen.  Changing
  screen settings may invalidate the saved height.  While a window is
  maximized, "Zoom Height" has no effect.

- bpo-35763: Make calltip reminder about '/' meaning positional-only less
  obtrusive by only adding it when there is room on the first line.

- bpo-5680: Add 'Run... Customized' to the Run menu to run a module with
  customized settings.  Any 'command line arguments' entered are added to
  sys.argv. One can suppress the normal Shell main module restart.

- bpo-36390: Gather Format menu functions into format.py.  Combine
  paragraph.py, rstrip.py, and format methods from editor.py.

Tools/Demos
-----------

- bpo-38118: Update Valgrind suppression file to ignore a false alarm in
  :c:func:`PyUnicode_Decode` when using GCC builtin strcmp().

- bpo-38347: pathfix.py: Assume all files that end on '.py' are Python
  scripts when working recursively.

- bpo-37803: pdb's ``--help`` and ``--version`` long options now work.

- bpo-37942: Improve ArgumentClinic converter for floats.

- bpo-37704: Remove ``Tools/scripts/h2py.py``: use cffi to access a C API in
  Python.

- bpo-37675: 2to3 now works when run from a zipped standard library.

- bpo-37034: Argument Clinic now uses the argument name on errors with
  keyword-only argument instead of their position. Patch contributed by Rémi
  Lapeyre.

- bpo-37064: Add option -k to pathscript.py script: preserve shebang flags.
  Add option -a to pathscript.py script: add flags.

C API
-----

- bpo-37633: Re-export some function compatibility wrappers for macros in
  ``pythonrun.h``.

- bpo-38644: Provide :c:func:`Py_EnterRecursiveCall` and
  :c:func:`Py_LeaveRecursiveCall` as regular functions for the limited API.
  Previously, there were defined as macros, but these macros didn't work
  with the limited API which cannot access ``PyThreadState.recursion_depth``
  field. Remove ``_Py_CheckRecursionLimit`` from the stable ABI.

- bpo-38650: The global variable :c:data:`PyStructSequence_UnnamedField` is
  now a constant and refers to a constant string.

- bpo-38540: Fixed possible leak in :c:func:`PyArg_Parse` and similar
  functions for format units ``"es#"`` and ``"et#"`` when the macro
  :c:macro:`PY_SSIZE_T_CLEAN` is not defined.

- bpo-38395: Fix a crash in :class:`weakref.proxy` objects due to incorrect
  lifetime management when calling some associated methods that may delete
  the last reference to object being referenced by the proxy. Patch by Pablo
  Galindo.

- bpo-36389: The ``_PyObject_CheckConsistency()`` function is now also
  available in release mode. For example, it can be used to debug a crash in
  the ``visit_decref()`` function of the GC.

- bpo-38266: Revert the removal of PyThreadState_DeleteCurrent() with
  documentation.

- bpo-38303: Update audioop extension module to use the stable ABI
  (PEP-384). Patch by Tyler Kieft.

- bpo-38234: :c:func:`Py_SetPath` now sets :data:`sys.executable` to the
  program full path (:c:func:`Py_GetProgramFullPath`) rather than to the
  program name (:c:func:`Py_GetProgramName`).

- bpo-38234: Python ignored arguments passed to :c:func:`Py_SetPath`,
  :c:func:`Py_SetPythonHome` and :c:func:`Py_SetProgramName`: fix Python
  initialization to use specified arguments.

- bpo-38205: The :c:func:`Py_UNREACHABLE` macro now calls
  :c:func:`Py_FatalError`.

- bpo-38140: Make dict and weakref offsets opaque for C heap types by
  passing the offsets through PyMemberDef

- bpo-15088: The C function ``PyGen_NeedsFinalizing`` has been removed. It
  was not documented, tested or used anywhere within CPython after the
  implementation of :pep:`442`. Patch by Joannah Nanjekye. (Patch by Joannah
  Nanjekye)

- bpo-36763: Options added by ``PySys_AddXOption()`` are now handled the
  same way than ``PyConfig.xoptions`` and command line ``-X`` options.

- bpo-37926: Fix a crash in ``PySys_SetArgvEx(0, NULL, 0)``.

- bpo-37879: Fix subtype_dealloc to suppress the type decref when the base
  type is a C heap type

- bpo-37645: Add :c:func:`_PyObject_FunctionStr` to get a user-friendly
  string representation of a function-like object. Patch by Jeroen Demeyer.

- bpo-29548: The functions ``PyEval_CallObject``, ``PyEval_CallFunction``,
  ``PyEval_CallMethod`` and ``PyEval_CallObjectWithKeywords`` are
  deprecated. Use :c:func:`PyObject_Call` and its variants instead.

- bpo-37151: ``PyCFunction_Call`` is now a deprecated alias of
  :c:func:`PyObject_Call`.

- bpo-37540: The vectorcall protocol now requires that the caller passes
  only strings as keyword names.

- bpo-37207: The vectorcall protocol is now enabled for ``type`` objects:
  set ``tp_vectorcall`` to a vectorcall function to be used instead of
  ``tp_new`` and ``tp_init`` when calling the class itself.

- bpo-21120: Exclude Python-ast.h, ast.h and asdl.h from the limited API.

- bpo-37483: Add new function ``_PyObject_CallOneArg`` for calling an object
  with one positional argument.

- bpo-36763: Add :func:`PyConfig_SetWideStringList` function.

- bpo-37337: Add fast functions for calling methods:
  :c:func:`_PyObject_VectorcallMethod`, :c:func:`_PyObject_CallMethodNoArgs`
  and :c:func:`_PyObject_CallMethodOneArg`.

- bpo-28805: The :const:`METH_FASTCALL` calling convention has been
  documented.

- bpo-37221: The new function :c:func:`PyCode_NewWithPosOnlyArgs` allows to
  create code objects like :c:func:`PyCode_New`, but with an extra
  *posonlyargcount* parameter for indicating the number of positonal-only
  arguments.

- bpo-37215: Fix dtrace issue introduce by bpo-36842

- bpo-37194: Add a new public :c:func:`PyObject_CallNoArgs` function to the
  C API: call a callable Python object without any arguments. It is the most
  efficient way to call a callback without any argument. On x86-64, for
  example, ``PyObject_CallFunctionObjArgs(func, NULL)`` allocates 960 bytes
  on the stack per call, whereas ``PyObject_CallNoArgs(func)`` only
  allocates 624 bytes per call.

- bpo-37170: Fix the cast on error in
  :c:func:`PyLong_AsUnsignedLongLongMask()`.

- bpo-35381: Convert posixmodule.c statically allocated types
  ``DirEntryType`` and ``ScandirIteratorType`` to heap-allocated types.

- bpo-34331: Use singular/plural noun in error message when instantiating an
  abstract class with non-overriden abstract method(s).


What's New in Python 3.8.0 beta 1?
==================================

*Release date: 2019-06-04*

Security
--------

- bpo-35907: CVE-2019-9948: Avoid file reading by disallowing
  ``local-file://`` and ``local_file://`` URL schemes in
  ``URLopener().open()`` and ``URLopener().retrieve()`` of
  :mod:`urllib.request`.

- bpo-33529: Prevent fold function used in email header encoding from
  entering infinite loop when there are too many non-ASCII characters in a
  header.

- bpo-33164: Updated blake2 implementation which uses secure memset
  implementation provided by platform.

Core and Builtins
-----------------

- bpo-35814: Allow unpacking in the right hand side of annotated
  assignments. In particular, ``t: Tuple[int, ...] = x, y, *z`` is now
  allowed.

- bpo-37126: All structseq objects are now tracked by the garbage collector.
  Patch by Pablo Galindo.

- bpo-37122: Make the *co_argcount* attribute of code objects represent the
  total number of positional arguments (including positional-only
  arguments). The value of *co_posonlyargcount* can be used to distinguish
  which arguments are positional only, and the difference (*co_argcount* -
  *co_posonlyargcount*) is the number of positional-or-keyword arguments.
  Patch by Pablo Galindo.

- bpo-20092: Constructors of :class:`int`, :class:`float` and
  :class:`complex` will now use the :meth:`~object.__index__` special
  method, if available and the corresponding method :meth:`~object.__int__`,
  :meth:`~object.__float__` or :meth:`~object.__complex__` is not available.

- bpo-37087: Add native thread ID (TID) support to OpenBSD.

- bpo-26219: Implemented per opcode cache mechanism and ``LOAD_GLOBAL``
  instruction use it. ``LOAD_GLOBAL`` is now about 40% faster. Contributed
  by Yury Selivanov, and Inada Naoki.

- bpo-37072: Fix crash in PyAST_FromNodeObject() when flags is NULL.

- bpo-37029: Freeing a great many small objects could take time quadratic in
  the number of arenas, due to using linear search to keep ``obmalloc.c``'s
  list of usable arenas sorted by order of number of free memory pools.
  This is accomplished without search now, leaving the worst-case time
  linear in the number of arenas.  For programs where this quite visibly
  matters (typically with more than 100 thousand small objects alive
  simultaneously), this can greatly reduce the time needed to release their
  memory.

- bpo-26423: Fix possible overflow in ``wrap_lenfunc()`` when ``sizeof(long)
  < sizeof(Py_ssize_t)`` (e.g., 64-bit Windows).

- bpo-37050: Improve the AST for "debug" f-strings, which use '=' to print
  out the source of the expression being evaluated.  Delete expr_text from
  the FormattedValue node, and instead use a Constant string node (possibly
  merged with adjacent constant expressions inside the f-string).

- bpo-22385: The `bytes.hex`, `bytearray.hex`, and `memoryview.hex` methods
  as well as the `binascii.hexlify` and `b2a_hex` functions now have the
  ability to include an optional separator between hex bytes.  This
  functionality was inspired by MicroPython's hexlify implementation.

- bpo-26836: Add :func:`os.memfd_create`.

- bpo-37032: Added new ``replace()`` method to the code type
  (:class:`types.CodeType`).

- bpo-37007: Implement :func:`socket.if_nameindex()`,
  :func:`socket.if_nametoindex()`, and :func:`socket.if_indextoname()` on
  Windows.

- bpo-36829: :c:func:`PyErr_WriteUnraisable` now creates a traceback object
  if there is no current traceback. Moreover, call
  :c:func:`PyErr_NormalizeException` and :c:func:`PyException_SetTraceback`
  to normalize the exception value. Ignore any error.

- bpo-36878: Only accept text after `# type: ignore` if the first character
  is ASCII. This is to disallow things like `# type: ignoreé`.

- bpo-36878: Store text appearing after a `# type: ignore` comment in the
  AST. For example a type ignore like `# type: ignore[E1000]` will have the
  string `"[E1000]"` stored in its AST node.

- bpo-2180: Treat line continuation at EOF as a ``SyntaxError`` by Anthony
  Sottile.

- bpo-36907: Fix a crash when calling a C function with a keyword dict
  (``f(**kwargs)``) and changing the dict ``kwargs`` while that function is
  running.

- bpo-36946: Fix possible signed integer overflow when handling slices.

- bpo-36826: Add NamedExpression kind support to ast_unparse.c

- bpo-1875: A :exc:`SyntaxError` is now raised if a code blocks that will be
  optimized away (e.g. if conditions that are always false) contains syntax
  errors. Patch by Pablo Galindo.

- bpo-36027: Allow computation of modular inverses via three-argument
  ``pow``: the second argument is now permitted to be negative in the case
  where the first and third arguments are relatively prime.

- bpo-36861: Update the Unicode database to version 12.1.0.

- bpo-28866: Avoid caching attributes of classes which type defines mro() to
  avoid a hard cache invalidation problem.

- bpo-36851: The ``FrameType`` stack is now correctly cleaned up if the
  execution ends with a return and the stack is not empty.

- bpo-34616: The ``compile()`` builtin functions now support the
  ``ast.PyCF_ALLOW_TOP_LEVEL_AWAIT`` flag,  which allow to compile sources
  that  contains top-level ``await``, ``async with`` or ``async for``. This
  is useful to evaluate async-code from with an already async functions; for
  example in a custom REPL.

- bpo-36842: Implement PEP 578, adding sys.audit, io.open_code and related
  APIs.

- bpo-27639: Correct return type for UserList slicing operations. Patch by
  Michael Blahay, Erick Cervantes, and vaultah

- bpo-36737: Move PyRuntimeState.warnings into per-interpreter state (via
  "module state").

- bpo-36793: Removed ``__str__`` implementations from builtin types
  :class:`bool`, :class:`int`, :class:`float`, :class:`complex` and few
  classes from the standard library. They now inherit ``__str__()`` from
  :class:`object`.

- bpo-36817: Add a ``=`` feature f-strings for debugging. This can precede
  ``!s``, ``!r``, or ``!a``. It produces the text of the expression,
  followed by an equal sign, followed by the repr of the value of the
  expression. So ``f'{3*9+15=}'`` would be equal to the string
  ``'3*9+15=42'``.  If ``=`` is specified, the default conversion is set to
  ``!r``, unless a format spec is given, in which case the formatting
  behavior is unchanged, and __format__ will be used.

- bpo-24048: Save the live exception during import.c's ``remove_module()``.

- bpo-27987: pymalloc returns memory blocks aligned by 16 bytes, instead of
  8 bytes, on 64-bit platforms to conform x86-64 ABI. Recent compilers
  assume this alignment more often. Patch by Inada Naoki.

- bpo-36601: A long-since-meaningless check for ``getpid() == main_pid`` was
  removed from Python's internal C signal handler.

- bpo-36594: Fix incorrect use of ``%p`` in format strings. Patch by Zackery
  Spytz.

- bpo-36045: builtins.help() now prefixes `async` for async functions

- bpo-36084: Add native thread ID (TID) to threading.Thread objects
  (supported platforms: Windows, FreeBSD, Linux, macOS)

- bpo-36035: Added fix for broken symlinks in combination with pathlib

- bpo-35983: Added new trashcan macros to deal with a double deallocation
  that could occur when the `tp_dealloc` of a subclass calls the
  `tp_dealloc` of a base class and that base class uses the trashcan
  mechanism. Patch by Jeroen Demeyer.

- bpo-20602: Do not clear :data:`sys.flags` and :data:`sys.float_info`
  during shutdown. Patch by Zackery Spytz.

- bpo-26826: Expose :func:`copy_file_range` as a low level API in the
  :mod:`os` module.

- bpo-32388: Remove cross-version binary compatibility requirement in
  tp_flags.

- bpo-31862: Port binascii to PEP 489 multiphase initialization. Patch by
  Marcel Plch.

Library
-------

- bpo-37128: Added :func:`math.perm`.

- bpo-37120: Add SSLContext.num_tickets to control the number of TLSv1.3
  session tickets.

- bpo-12202: Fix the error handling in
  :meth:`msilib.SummaryInformation.GetProperty`. Patch by Zackery Spytz.

- bpo-26835: The fcntl module now contains file sealing constants for
  sealing of memfds.

- bpo-29262: Add ``get_origin()`` and ``get_args()`` introspection helpers
  to ``typing`` module.

- bpo-12639: :meth:`msilib.Directory.start_component()` no longer fails if
  *keyfile* is not ``None``.

- bpo-36999: Add the ``asyncio.Task.get_coro()`` method to publicly expose
  the tasks's coroutine object.

- bpo-35246: Make :func:`asyncio.create_subprocess_exec` accept path-like
  arguments.

- bpo-35279: Change default *max_workers* of ``ThreadPoolExecutor`` from
  ``cpu_count() * 5`` to ``min(32, cpu_count() + 4))``.  Previous value was
  unreasonably large on many cores machines.

- bpo-37076: :func:`_thread.start_new_thread` now logs uncaught exception
  raised by the function using :func:`sys.unraisablehook`, rather than
  :func:`sys.excepthook`, so the hook gets access to the function which
  raised the exception.

- bpo-33725: On macOS, the :mod:`multiprocessing` module now uses *spawn*
  start method by default.

- bpo-37054: Fix destructor :class:`_pyio.BytesIO` and
  :class:`_pyio.TextIOWrapper`: initialize their ``_buffer`` attribute as
  soon as possible (in the class body), because it's used by ``__del__()``
  which calls ``close()``.

- bpo-37058: PEP 544: Add ``Protocol`` and ``@runtime_checkable`` to the
  ``typing`` module.

- bpo-36933: The functions ``sys.set_coroutine_wrapper`` and
  ``sys.get_coroutine_wrapper`` that were deprecated and marked for removal
  in 3.8 have been removed.

- bpo-37047: Handle late binding and attribute access in
  :class:`unittest.mock.AsyncMock` setup for autospeccing. Document newly
  implemented async methods in :class:`unittest.mock.MagicMock`.

- bpo-37049: PEP 589: Add ``TypedDict`` to the ``typing`` module.

- bpo-37046: PEP 586: Add ``Literal`` to the ``typing`` module.

- bpo-37045: PEP 591: Add ``Final`` qualifier and ``@final`` decorator to
  the ``typing`` module.

- bpo-37035: Don't log OSError based exceptions if a fatal error has
  occurred in asyncio transport. Peer can generate almost any OSError, user
  cannot avoid these exceptions by fixing own code. Errors are still
  propagated to user code, it's just logging them is pointless and pollute
  asyncio logs.

- bpo-37001: :func:`symtable.symtable` now accepts the same input types for
  source code as the built-in :func:`compile` function. Patch by Dino
  Viehland.

- bpo-37028: Implement asyncio REPL

- bpo-37027: Return safe to use proxy socket object from
  transport.get_extra_info('socket')

- bpo-32528: Make asyncio.CancelledError a BaseException.

  This will address the common mistake many asyncio users make: an "except
  Exception" clause breaking Tasks cancellation.

  In addition to this change, we stop inheriting asyncio.TimeoutError and
  asyncio.InvalidStateError from their concurrent.futures.* counterparts.
  There's no point for these exceptions to share the inheritance chain.

- bpo-1230540: Add a new :func:`threading.excepthook` function which handles
  uncaught :meth:`threading.Thread.run` exception. It can be overridden to
  control how uncaught :meth:`threading.Thread.run` exceptions are handled.

- bpo-36996: Handle :func:`unittest.mock.patch` used as a decorator on async
  functions.

- bpo-37008: Add support for calling :func:`next` with the mock resulting
  from :func:`unittest.mock.mock_open`

- bpo-27737: Allow whitespace only header encoding in ``email.header`` - by
  Batuhan Taskaya

- bpo-36969: PDB command `args` now  display positional only arguments.
  Patch contributed by Rémi Lapeyre.

- bpo-36969: PDB command `args` now  display keyword only arguments. Patch
  contributed by Rémi Lapeyre.

- bpo-36983: Add missing names to ``typing.__all__``: ``ChainMap``,
  ``ForwardRef``, ``OrderedDict`` - by Anthony Sottile.

- bpo-36972: Add SupportsIndex protocol to the typing module to allow type
  checking to detect classes that can be passed to `hex()`, `oct()` and
  `bin()`.

- bpo-32972: Implement ``unittest.IsolatedAsyncioTestCase`` to help testing
  asyncio-based code.

- bpo-36952: :func:`fileinput.input` and :class:`fileinput.FileInput`
  **bufsize** argument has been removed (was deprecated and ignored since
  Python 3.6), and as a result the **mode** and **openhook** arguments have
  been made keyword-only.

- bpo-36952: Starting with Python 3.3, importing ABCs from
  :mod:`collections` is deprecated, and import should be done from
  :mod:`collections.abc`. Still being able to import from :mod:`collections`
  was marked for removal in 3.8, but has been delayed to 3.9; documentation
  and ``DeprecationWarning`` clarified.

- bpo-36949: Implement __repr__ for WeakSet objects.

- bpo-36948: Fix :exc:`NameError` in
  :meth:`urllib.request.URLopener.retrieve`. Patch by Karthikeyan
  Singaravelan.

- bpo-33524: Fix the folding of email header when the max_line_length is 0
  or None and the header contains non-ascii characters.  Contributed by
  Licht Takeuchi (@Licht-T).

- bpo-24564: :func:`shutil.copystat` now ignores :const:`errno.EINVAL` on
  :func:`os.setxattr` which may occur when copying files on filesystems
  without extended attributes support.

  Original patch by Giampaolo Rodola, updated by Ying Wang.

- bpo-36888: Python child processes can now access the status of their
  parent process using multiprocessing.process.parent_process

- bpo-36921: Deprecate ``@coroutine`` for sake of ``async def``.

- bpo-25652: Fix bug in ``__rmod__`` of ``UserString`` - by Batuhan Taskaya.

- bpo-36916: Remove a message about an unhandled exception in a task when
  writer.write() is used without await and writer.drain() fails with an
  exception.

- bpo-36889: Introduce :class:`asyncio.Stream` class that merges
  :class:`asyncio.StreamReader` and :class:`asyncio.StreamWriter`
  functionality. :class:`asyncio.Stream` can work in readonly, writeonly and
  readwrite modes. Provide :func:`asyncio.connect`,
  :func:`asyncio.connect_unix`, :func:`asyncio.connect_read_pipe` and
  :func:`asyncio.connect_write_pipe` factories to open
  :class:`asyncio.Stream` connections. Provide :class:`asyncio.StreamServer`
  and :class:`UnixStreamServer` to serve servers with asyncio.Stream API.
  Modify :func:`asyncio.create_subprocess_shell` and
  :func:`asyncio.create_subprocess_exec` to use :class:`asyncio.Stream`
  instead of deprecated :class:`StreamReader` and :class:`StreamWriter`.
  Deprecate :class:`asyncio.StreamReader` and :class:`asyncio.StreamWriter`.
  Deprecate usage of private classes, e.g.
  :class:`asyncio.FlowControlMixing` and
  :class:`asyncio.StreamReaderProtocol` outside of asyncio package.

- bpo-36845: Added validation of integer prefixes to the construction of IP
  networks and interfaces in the ipaddress module.

- bpo-23378: Add an extend action to argparser.

- bpo-36867: Fix a bug making a SharedMemoryManager instance and its parent
  process use two separate resource_tracker processes.

- bpo-23896: Adds a grammar to lib2to3.pygram that contains exec as a
  function not as statement.

- bpo-36895: The function ``time.clock()`` was deprecated in 3.3 in favor of
  ``time.perf_counter()`` and marked for removal in 3.8, it has removed.

- bpo-35545: Fix asyncio discarding IPv6 scopes when ensuring hostname
  resolutions internally

- bpo-36887: Add new function :func:`math.isqrt` to compute integer square
  roots.

- bpo-34632: Introduce the ``importlib.metadata`` module with (provisional)
  support for reading metadata from third-party packages.

- bpo-36878: When using `type_comments=True` in `ast.parse`, treat `# type:
  ignore` followed by a non-alphanumeric character and then arbitrary text
  as a type ignore, instead of requiring nothing but whitespace or another
  comment. This is to permit formations such as `# type: ignore[E1000]`.

- bpo-36778: ``cp65001`` encoding (Windows code page 65001) becomes an alias
  to ``utf_8`` encoding.

- bpo-36867: The multiprocessing.resource_tracker replaces the
  multiprocessing.semaphore_tracker module. Other than semaphores,
  resource_tracker also tracks shared_memory segments.

- bpo-30262: The ``Cache`` and ``Statement`` objects of the :mod:`sqlite3`
  module are not exposed to the user.  Patch by Aviv Palivoda.

- bpo-24538: In `shutil.copystat()`, first copy extended file attributes and
  then file permissions, since extended attributes can only be set on the
  destination while it is still writeable.

- bpo-36829: Add new :func:`sys.unraisablehook` function which can be
  overridden to control how "unraisable exceptions" are handled. It is
  called when an exception has occurred but there is no way for Python to
  handle it. For example, when a destructor raises an exception or during
  garbage collection (:func:`gc.collect`).

- bpo-36832: Introducing ``zipfile.Path``, a pathlib-compatible wrapper for
  traversing zip files.

- bpo-36814: Fix an issue where os.posix_spawnp() would incorrectly raise a
  TypeError when file_actions is None.

- bpo-33110: Handle exceptions raised by functions added by
  concurrent.futures add_done_callback correctly when the Future has already
  completed.

- bpo-26903: Limit `max_workers` in `ProcessPoolExecutor` to 61 to work
  around a WaitForMultipleObjects limitation.

- bpo-36813: Fix :class:`~logging.handlers.QueueListener` to call
  ``queue.task_done()`` upon stopping. Patch by Bar Harel.

- bpo-36806: Forbid creation of asyncio stream objects like StreamReader,
  StreamWriter, Process, and their protocols outside of asyncio package.

- bpo-36802: Provide both sync and async calls for StreamWriter.write() and
  StreamWriter.close()

- bpo-36801: Properly handle SSL connection closing in asyncio
  StreamWriter.drain() call.

- bpo-36785: Implement PEP 574 (pickle protocol 5 with out-of-band buffers).

- bpo-36772: functools.lru_cache() can now be used as a straight decorator
  in addition to its existing usage as a function that returns a decorator.

- bpo-6584: Add a :exc:`~gzip.BadGzipFile` exception to the :mod:`gzip`
  module.

- bpo-36748: Optimized write buffering in C implementation of
  ``TextIOWrapper``. Writing ASCII string to ``TextIOWrapper`` with ascii,
  latin1, or utf-8 encoding is about 20% faster.  Patch by Inada Naoki.

- bpo-8138: Don't mark ``wsgiref.simple_server.SimpleServer`` as
  multi-threaded since ``wsgiref.simple_server.WSGIServer`` is
  single-threaded.

- bpo-22640: :func:`py_compile.compile` now supports silent mode. Patch by
  Joannah Nanjekye

- bpo-29183: Fix double exceptions in :class:`wsgiref.handlers.BaseHandler`
  by calling its :meth:`~wsgiref.handlers.BaseHandler.close` method only
  when no exception is raised.

- bpo-36548: Improved the repr of regular expression flags.

- bpo-36542: The signature of Python functions can now be overridden by
  specifying the ``__text_signature__`` attribute.

- bpo-36533: Reinitialize logging.Handler locks in forked child processes
  instead of attempting to acquire them all in the parent before forking
  only to be released in the child process.  The acquire/release pattern was
  leading to deadlocks in code that has implemented any form of chained
  logging handlers that depend upon one another as the lock acquisition
  order cannot be guaranteed.

- bpo-35252: Throw a TypeError instead of an AssertionError when using an
  invalid type annotation with singledispatch.

- bpo-35900: Allow reduction methods to return a 6-item tuple where the 6th
  item specifies a custom state-setting method that's called instead of the
  regular ``__setstate__`` method.

- bpo-35900: enable custom reduction callback registration for functions and
  classes in _pickle.c, using the new Pickler's attribute
  ``reducer_override``

- bpo-36368: Fix a bug crashing SharedMemoryManager instances in interactive
  sessions after a ctrl-c (KeyboardInterrupt) was sent

- bpo-31904: Fix mmap fail for VxWorks

- bpo-27497: :meth:`csv.DictWriter.writeheader` now returns the return value
  of the underlying :meth:`csv.Writer.writerow` method. Patch contributed by
  Ashish Nitin Patil.

- bpo-36239: Parsing .mo files now ignores comments starting and ending with
  #-#-#-#-#.

- bpo-26707: Enable plistlib to read and write binary plist files that were
  created as a KeyedArchive file. Specifically, this allows the plistlib to
  process 0x80 tokens as UID objects.

- bpo-31904: Add posix module support for VxWorks.

- bpo-35125: Asyncio: Remove inner callback on outer cancellation in shield

- bpo-35721: Fix :meth:`asyncio.SelectorEventLoop.subprocess_exec()` leaks
  file descriptors if ``Popen`` fails and called with
  ``stdin=subprocess.PIPE``. Patch by Niklas Fiekas.

- bpo-31855: :func:`unittest.mock.mock_open` results now respects the
  argument of read([size]). Patch contributed by Rémi Lapeyre.

- bpo-35431: Implement :func:`math.comb` that returns binomial coefficient,
  that computes the number of ways to choose k items from n items without
  repetition and without order. Patch by Yash Aggarwal and Keller Fuchs.

- bpo-26660: Fixed permission errors in
  :class:`~tempfile.TemporaryDirectory` clean up. Previously
  ``TemporaryDirectory.cleanup()`` failed when non-writeable or
  non-searchable files or directories were created inside a temporary
  directory.

- bpo-34271: Add debugging helpers to ssl module. It's now possible to dump
  key material and to trace TLS protocol. The default and stdlib contexts
  also support SSLKEYLOGFILE env var.

- bpo-26467: Added AsyncMock to support using unittest to mock asyncio
  coroutines. Patch by Lisa Roach.

- bpo-33569: dataclasses.InitVar: Exposes the type used to create the init
  var.

- bpo-34424: Fix serialization of messages containing encoded strings when
  the policy.linesep is set to a multi-character string. Patch by Jens
  Troeger.

- bpo-34303: Performance of :func:`functools.reduce` is slightly improved.
  Patch by Sergey Fedoseev.

- bpo-33361: Fix a bug in :class:`codecs.StreamRecoder` where seeking might
  leave old data in a buffer and break subsequent read calls. Patch by Ammar
  Askar.

- bpo-22454: The :mod:`shlex` module now exposes :func:`shlex.join`, the
  inverse of :func:`shlex.split`. Patch by Bo Bayles.

- bpo-31922: :meth:`asyncio.AbstractEventLoop.create_datagram_endpoint`: Do
  not connect UDP socket when broadcast is allowed. This allows to receive
  replies after a UDP broadcast.

- bpo-24882: Change ThreadPoolExecutor to use existing idle threads before
  spinning up new ones.

- bpo-31961: Added support for bytes and path-like objects in
  :func:`subprocess.Popen` on Windows.  The *args* parameter now accepts a
  :term:`path-like object` if *shell* is ``False`` and a sequence containing
  bytes and path-like objects. The *executable* parameter now accepts a
  bytes and :term:`path-like object`. The *cwd* parameter now accepts a
  bytes object. Based on patch by Anders Lorentsen.

- bpo-33123: :class:`pathlib.Path.unlink` now accepts a *missing_ok*
  parameter to avoid a :exc:`FileNotFoundError` from being raised. Patch by
  Robert Buchholz.

- bpo-32941: Allow :class:`mmap.mmap` objects to access the madvise() system
  call (through :meth:`mmap.mmap.madvise`).

- bpo-22102: Added support for ZIP files with disks set to 0. Such files are
  commonly created by builtin tools on Windows when use ZIP64 extension.
  Patch by Francisco Facioni.

- bpo-32515: trace.py can now run modules via python3 -m trace -t --module
  module_name

- bpo-32299: Changed :func:`unittest.mock.patch.dict` to return the patched
  dictionary when used as context manager. Patch by Vadim Tsander.

- bpo-27141: Added a ``__copy__()`` to ``collections.UserList`` and
  ``collections.UserDict`` in order to correctly implement shallow copying
  of the objects. Patch by Bar Harel.

- bpo-31829: ``\r``, ``\0`` and ``\x1a`` (end-of-file on Windows) are now
  escaped in protocol 0 pickles of Unicode strings. This allows to load them
  without loss from files open in text mode in Python 2.

- bpo-23395: ``_thread.interrupt_main()`` now avoids setting the Python
  error status if the ``SIGINT`` signal is ignored or not handled by Python.

Documentation
-------------

- bpo-36896: Clarify that some types have unstable constructor signature
  between Python versions.

- bpo-36686: Improve documentation of the stdin, stdout, and stderr
  arguments of the ``asyncio.subprocess_exec`` function to specify which
  values are supported. Also mention that decoding as text is not supported.

  Add a few tests to verify that the various values passed to the std*
  arguments actually work.

- bpo-36984: Improve version added references in ``typing`` module - by
  Anthony Sottile.

- bpo-36868: What's new now mentions SSLContext.hostname_checks_common_name
  instead of SSLContext.host_flags.

- bpo-35924: Add a note to the ``curses.addstr()`` documentation to warn
  that multiline strings can cause segfaults because of an ncurses bug.

- bpo-36783: Added C API Documentation for Time_FromTimeAndFold and
  PyDateTime_FromDateAndTimeAndFold as per PEP 495. Patch by Edison
  Abahurire.

- bpo-36797: More of the legacy distutils documentation has been either
  pruned, or else more clearly marked as being retained solely until the
  setuptools documentation covers it independently.

- bpo-22865: Add detail to the documentation on the `pty.spawn` function.

- bpo-35397: Remove deprecation and document urllib.parse.unwrap(). Patch
  contributed by Rémi Lapeyre.

- bpo-32995: Added the context variable in glossary.

- bpo-33519: Clarify that `copy()` is not part of the `MutableSequence` ABC.

- bpo-33482: Make `codecs.StreamRecoder.writelines` take a list of bytes.

- bpo-25735: Added documentation for func factorial to indicate that returns
  integer values

- bpo-20285: Expand object.__doc__ (docstring) to make it clearer. Modify
  pydoc.py so that help(object) lists object methods (for other classes,
  help omits methods of the object base class.)

Tests
-----

- bpo-37069: Modify test_coroutines, test_cprofile, test_generators,
  test_raise, test_ssl and test_yield_from to use
  :func:`test.support.catch_unraisable_exception` rather than
  :func:`test.support.captured_stderr`.

- bpo-37098: Fix test_memfd_create on older Linux Kernels.

- bpo-37081: Test with OpenSSL 1.1.1c

- bpo-36829: Add :func:`test.support.catch_unraisable_exception`: context
  manager catching unraisable exception using :func:`sys.unraisablehook`.

- bpo-36915: The main regrtest process now always removes all temporary
  directories of worker processes even if they crash or if they are killed
  on KeyboardInterrupt (CTRL+c).

- bpo-36719: "python3 -m test -jN ..." now continues the execution of next
  tests when a worker process crash (CHILD_ERROR state). Previously, the
  test suite stopped immediately. Use --failfast to stop at the first error.

- bpo-36816: Update Lib/test/selfsigned_pythontestdotnet.pem to match
  self-signed.pythontest.net's new TLS certificate.

- bpo-35925: Skip httplib and nntplib networking tests when they would
  otherwise fail due to a modern OS or distro with a default OpenSSL policy
  of rejecting connections to servers with weak certificates.

- bpo-36782: Add tests for several C API functions in the :mod:`datetime`
  module. Patch by Edison Abahurire.

- bpo-36342: Fix test_multiprocessing in test_venv if platform lacks
  functioning sem_open.

Build
-----

- bpo-36721: To embed Python into an application, a new ``--embed`` option
  must be passed to ``python3-config --libs --embed`` to get ``-lpython3.8``
  (link the application to libpython). To support both 3.8 and older, try
  ``python3-config --libs --embed`` first and fallback to ``python3-config
  --libs`` (without ``--embed``) if the previous command fails.

  Add a pkg-config ``python-3.8-embed`` module to embed Python into an
  application: ``pkg-config python-3.8-embed --libs`` includes
  ``-lpython3.8``. To support both 3.8 and older, try ``pkg-config
  python-X.Y-embed --libs`` first and fallback to ``pkg-config python-X.Y
  --libs`` (without ``--embed``) if the previous command fails (replace
  ``X.Y`` with the Python version).

  On the other hand, ``pkg-config python3.8 --libs`` no longer contains
  ``-lpython3.8``. C extensions must not be linked to libpython (except on
  Android, case handled by the script); this change is backward incompatible
  on purpose.

- bpo-36786: "make install" now runs compileall in parallel.

Windows
-------

- bpo-36965: include of STATUS_CONTROL_C_EXIT without depending on MSC
  compiler

- bpo-35926: Update to OpenSSL 1.1.1b for Windows.

- bpo-29883: Add Windows support for UDP transports for the Proactor Event
  Loop. Patch by Adam Meily.

- bpo-33407: The :c:macro:`Py_DEPRECATED()` macro has been implemented for
  MSVC.

macOS
-----

- bpo-36231: Support building Python on macOS without /usr/include
  installed. As of macOS 10.14, system header files are only available
  within an SDK provided by either the Command Line Tools or the Xcode app.

IDLE
----

- bpo-35610: Replace now redundant .context_use_ps1 with .prompt_last_line.
  This finishes change started in bpo-31858.

- bpo-37038: Make idlelib.run runnable; add test clause.

- bpo-36958: Print any argument other than None or int passed to SystemExit
  or sys.exit().

- bpo-36807: When saving a file, call os.fsync() so bits are flushed to e.g.
  USB drive.

- bpo-32411: In browser.py, remove extraneous sorting by line number since
  dictionary was created in line number order.

Tools/Demos
-----------

- bpo-37053: Handle strings like u"bar" correctly in
  Tools/parser/unparse.py. Patch by Chih-Hsuan Yen.

C API
-----

- bpo-36763: Implement the :pep:`587` "Python Initialization Configuration".

- bpo-36379: Fix crashes when attempting to use the *modulo* parameter when
  ``__ipow__`` is implemented in C.

- bpo-37107: Update :c:func:`PyObject_CallMethodObjArgs` and
  ``_PyObject_CallMethodIdObjArgs`` to use ``_PyObject_GetMethod`` to avoid
  creating a bound method object in many cases. Patch by Michael J.
  Sullivan.

- bpo-36974: Implement :pep:`590`: Vectorcall: a fast calling protocol for
  CPython. This is a new protocol to optimize calls of custom callable
  objects.

- bpo-36763: ``Py_Main()`` now returns the exitcode rather than calling
  ``Py_Exit(exitcode)`` when calling ``PyErr_Print()`` if the current
  exception type is ``SystemExit``.

- bpo-36922: Add new type flag ``Py_TPFLAGS_METHOD_DESCRIPTOR`` for objects
  behaving like unbound methods. These are objects supporting the
  optimization given by the ``LOAD_METHOD``/``CALL_METHOD`` opcodes. See PEP
  590.

- bpo-36728: The :c:func:`PyEval_ReInitThreads` function has been removed
  from the C API. It should not be called explicitly: use
  :c:func:`PyOS_AfterFork_Child` instead.


What's New in Python 3.8.0 alpha 4?
===================================

*Release date: 2019-05-06*

Security
--------

- bpo-36742: Fixes mishandling of pre-normalization characters in
  urlsplit().

- bpo-30458: Address CVE-2019-9740 by disallowing URL paths with embedded
  whitespace or control characters through into the underlying http client
  request.  Such potentially malicious header injection URLs now cause an
  http.client.InvalidURL exception to be raised.

- bpo-35755: :func:`shutil.which` now uses ``os.confstr("CS_PATH")`` if
  available and if the :envvar:`PATH` environment variable is not set.
  Remove also the current directory from :data:`posixpath.defpath`. On Unix,
  :func:`shutil.which` and the :mod:`subprocess` module no longer search the
  executable in the current directory if the :envvar:`PATH` environment
  variable is not set.

Core and Builtins
-----------------

- bpo-36722: In debug build, import now also looks for C extensions compiled
  in release mode and for C extensions compiled in the stable ABI.

- bpo-32849: Fix Python Initialization code on FreeBSD to detect properly
  when stdin file descriptor (fd 0) is invalid.

- bpo-36623: Remove parser headers and related function declarations that
  lack implementations after the removal of pgen.

- bpo-20180: ``dict.pop()`` is now up to 33% faster thanks to Argument
  Clinic. Patch by Inada Naoki.

- bpo-36611: Debug memory allocators: disable serialno field by default from
  debug hooks on Python memory allocators to reduce the memory footprint by
  5%. Enable :mod:`tracemalloc` to get the traceback where a memory block
  has been allocated when a fatal memory error is logged to decide where to
  put a breakpoint. Compile Python with ``PYMEM_DEBUG_SERIALNO`` defined to
  get back the field.

- bpo-36588: On AIX, :attr:`sys.platform` doesn't contain the major version
  anymore. Always return ``'aix'``, instead of ``'aix3'`` .. ``'aix7'``.
  Since older Python versions include the version number, it is recommended
  to always use ``sys.platform.startswith('aix')``. Contributed by M. Felt.

- bpo-36549: Change str.capitalize to use titlecase for the first character
  instead of uppercase.

- bpo-36540: Implement :pep:`570` (Python positional-only parameters). Patch
  by Pablo Galindo.

- bpo-36475: :c:func:`PyEval_AcquireLock` and :c:func:`PyEval_AcquireThread`
  now terminate the current thread if called while the interpreter is
  finalizing, making them consistent with :c:func:`PyEval_RestoreThread`,
  :c:func:`Py_END_ALLOW_THREADS`, and :c:func:`PyGILState_Ensure`.

- bpo-36504: Fix signed integer overflow in _ctypes.c's
  ``PyCArrayType_new()``.

- bpo-20844: Fix running script with encoding cookie and LF line ending may
  fail on Windows.

- bpo-24214: Fixed support of the surrogatepass error handler in the UTF-8
  incremental decoder.

- bpo-36452: Changing ``dict`` keys during iteration of the dict itself,
  ``keys()``, ``values()``, or ``items()`` will now be detected in certain
  corner cases where keys are deleted/added so that the number of keys isn't
  changed. A `RuntimeError` will be raised after ``len(dict)`` iterations.
  Contributed by Thomas Perl.

- bpo-36459: Fix a possible double ``PyMem_FREE()`` due to tokenizer.c's
  ``tok_nextc()``.

- bpo-36433: Fixed TypeError message in classmethoddescr_call.

- bpo-36430: Fix a possible reference leak in :func:`itertools.count`.

- bpo-36440: Include node names in ``ParserError`` messages, instead of
  numeric IDs. Patch by A. Skrobov.

- bpo-36143: Regenerate :mod:`keyword` from the Grammar and Tokens file
  using pgen. Patch by Pablo Galindo.

- bpo-18372: Add missing :c:func:`PyObject_GC_Track` calls in the
  :mod:`pickle` module. Patch by Zackery Spytz.

Library
-------

- bpo-35952: Fix pythoninfo when the compiler is missing.

- bpo-28238: The ``.find*()`` methods of xml.etree.ElementTree can now
  search for wildcards like ``{*}tag`` and ``{ns}*`` that match a tag in any
  namespace or all tags in a namespace.  Patch by Stefan Behnel.

- bpo-26978: `pathlib.path.link_to()` is now implemented. It creates a hard
  link pointing to a path.

- bpo-1613500: :class:`fileinput.FileInput` now uses the input file mode to
  correctly set the output file mode (previously it was hardcoded to
  ``'w'``)  when ``inplace=True`` is passed to its constructor.

- bpo-36734: Fix compilation of ``faulthandler.c`` on HP-UX. Initialize
  ``stack_t current_stack`` to zero using ``memset()``.

- bpo-13611: The xml.etree.ElementTree packages gained support for C14N 2.0
  serialisation. Patch by Stefan Behnel.

- bpo-36669: Add missing matrix multiplication operator support to
  weakref.proxy.

- bpo-36676: The XMLParser() in xml.etree.ElementTree provides namespace
  prefix context to the parser target if it defines the callback methods
  "start_ns()" and/or "end_ns()". Patch by Stefan Behnel.

- bpo-36673: The TreeBuilder and XMLPullParser in xml.etree.ElementTree
  gained support for parsing comments and processing instructions. Patch by
  Stefan Behnel.

- bpo-36650: The C version of functools.lru_cache() was treating calls with
  an empty ``**kwargs`` dictionary as being distinct from calls with no
  keywords at all. This did not result in an incorrect answer, but it did
  trigger an unexpected cache miss.

- bpo-28552: Fix :mod:`distutils.sysconfig` if :data:`sys.executable` is
  ``None`` or an empty string: use :func:`os.getcwd` to initialize
  ``project_base``.  Fix also the distutils build command: don't use
  :data:`sys.executable` if it is ``None`` or an empty string.

- bpo-35755: :func:`shutil.which` and
  :func:`distutils.spawn.find_executable` now use ``os.confstr("CS_PATH")``
  if available instead of :data:`os.defpath`, if the ``PATH`` environment
  variable is not set. Moreover, don't use ``os.confstr("CS_PATH")`` nor
  :data:`os.defpath` if the ``PATH`` environment variable is set to an empty
  string.

- bpo-25430: improve performance of ``IPNetwork.__contains__()``

- bpo-30485: Path expressions in xml.etree.ElementTree can now avoid
  explicit namespace prefixes for tags (or the "{namespace}tag" notation) by
  passing a default namespace with an empty string prefix.

- bpo-36613: Fix :mod:`asyncio` wait() not removing callback if exception

- bpo-36598: Fix ``isinstance`` check for Mock objects with spec when the
  code is executed under tracing. Patch by Karthikeyan Singaravelan.

- bpo-18748: In development mode (:option:`-X` ``dev``) and in debug build,
  the :class:`io.IOBase` destructor now logs ``close()`` exceptions. These
  exceptions are silent by default in release mode.

- bpo-36575: The ``_lsprof`` module now uses internal timer same to
  ``time.perf_counter()`` by default. ``gettimeofday(2)`` was used on Unix.
  New timer has better resolution on most Unix platforms and timings are no
  longer impacted by system clock updates since ``perf_counter()`` is
  monotonic. Patch by Inada Naoki.

- bpo-33461: ``json.loads`` now emits ``DeprecationWarning`` when
  ``encoding`` option is specified.  Patch by Matthias Bussonnier.

- bpo-36559: The random module now prefers the lean internal _sha512 module
  over hashlib for seed(version=2) to optimize import time.

- bpo-17561: Set backlog=None as the default for socket.create_server.

- bpo-34373: Fix :func:`time.mktime` error handling on AIX for year before
  1970.

- bpo-36232: Improve error message when trying to open existing DBM database
  that actually doesn't exist. Patch by Marco Rougeth.

- bpo-36546: Add statistics.quantiles()

- bpo-36050: Optimized ``http.client.HTTPResponse.read()`` for large
  response. Patch by Inada Naoki.

- bpo-36522: If *debuglevel* is set to >0 in :mod:`http.client`, print all
  values for headers with multiple values for the same header name. Patch by
  Matt Houglum.

- bpo-36492: Deprecated passing required arguments like *func* as keyword
  arguments in functions which should accept arbitrary keyword arguments and
  pass them to other function. Arbitrary keyword arguments (even with names
  "self" and "func") can now be passed to these functions if the required
  arguments are passed as positional arguments.

- bpo-27181: Add statistics.geometric_mean().

- bpo-30427: ``os.path.normcase()`` relies on ``os.fspath()`` to check the
  type of its argument. Redundant checks have been removed from its
  ``posixpath.normcase()`` and ``ntpath.normcase()`` implementations. Patch
  by Wolfgang Maier.

- bpo-36385: Stop rejecting IPv4 octets for being ambiguously octal. Leading
  zeros are ignored, and no longer are assumed to specify octal octets.
  Octets are always decimal numbers. Octets must still be no more than three
  digits, including leading zeroes.

- bpo-36434: Errors during writing to a ZIP file no longer prevent to
  properly close it.

- bpo-36407: Fixed wrong indentation writing for CDATA section in
  xml.dom.minidom. Patch by Vladimir Surjaninov.

- bpo-36326: inspect.getdoc() can now find docstrings for member objects
  when __slots__ is a dictionary.

- bpo-36366: Calling ``stop()`` on an unstarted or stopped
  :func:`unittest.mock.patch` object will now return `None` instead of
  raising :exc:`RuntimeError`, making the method idempotent. Patch by
  Karthikeyan Singaravelan.

- bpo-36348: The :meth:`imap.IMAP4.logout` method no longer ignores silently
  arbitrary exceptions.

- bpo-31904: Add time module support and fix test_time faiures for VxWorks.

- bpo-36227: Added support for keyword arguments `default_namespace` and
  `xml_declaration` in functions ElementTree.tostring() and
  ElementTree.tostringlist().

- bpo-36004: Added new alternate constructors
  :meth:`datetime.date.fromisocalendar` and
  :meth:`datetime.datetime.fromisocalendar`, which construct date objects
  from ISO year, week number and weekday; these are the inverse of each
  class's ``isocalendar`` method. Patch by Paul Ganssle.

- bpo-35936: :mod:`modulefinder` no longer depends on the deprecated
  :mod:`imp` module, and the initializer for
  :class:`modulefinder.ModuleFinder` now has immutable default arguments.
  Patch by Brandt Bucher.

- bpo-35376: :mod:`modulefinder` correctly handles modules that have the
  same name as a bad package. Patch by Brandt Bucher.

- bpo-17396: :mod:`modulefinder` no longer crashes when encountering syntax
  errors in followed imports. Patch by Brandt Bucher.

- bpo-35934: Added :meth:`~socket.create_server()` and
  :meth:`~socket.has_dualstack_ipv6()` convenience functions to automate the
  necessary tasks usually involved when creating a server socket, including
  accepting both IPv4 and IPv6 connections on the same socket.  (Contributed
  by Giampaolo Rodola in :issue:`17561`.)

- bpo-23078: Add support for :func:`classmethod` and :func:`staticmethod` to
  :func:`unittest.mock.create_autospec`.  Initial patch by Felipe Ochoa.

- bpo-35416: Fix potential resource warnings in distutils. Patch by Mickaël
  Schoentgen.

- bpo-25451: Add transparency methods to :class:`tkinter.PhotoImage`.  Patch
  by Zackery Spytz.

- bpo-35082: Don't return deleted attributes when calling dir on a
  :class:`unittest.mock.Mock`.

- bpo-34547: :class:`wsgiref.handlers.BaseHandler` now handles abrupt client
  connection terminations gracefully. Patch by Petter Strandmark.

- bpo-31658: :func:`xml.sax.parse` now supports :term:`path-like <path-like
  object>`. Patch by Mickaël Schoentgen.

- bpo-34139: Remove stale unix datagram socket before binding

- bpo-33530: Implemented Happy Eyeballs in `asyncio.create_connection()`.
  Added two new arguments, *happy_eyeballs_delay* and *interleave*, to
  specify Happy Eyeballs behavior.

- bpo-33291: Do not raise AttributeError when calling the inspect functions
  isgeneratorfunction, iscoroutinefunction, isasyncgenfunction on a method
  created from an arbitrary callable. Instead, return False.

- bpo-31310: Fix the multiprocessing.semaphore_tracker so it is reused by
  child processes

- bpo-31292: Fix ``setup.py check --restructuredtext`` for files containing
  ``include`` directives.

Documentation
-------------

- bpo-36625: Remove obsolete comments from docstrings in fractions.Fraction

- bpo-30840: Document relative imports

- bpo-36523: Add docstring for io.IOBase.writelines().

- bpo-36425: New documentation translation: `Simplified Chinese
  <https://docs.python.org/zh-cn/>`_.

- bpo-36345: Avoid the duplication of code from ``Tools/scripts/serve.py``
  in using the :rst:dir:`literalinclude` directive for the basic
  wsgiref-based web server in the documentation of :mod:`wsgiref`.
  Contributed by Stéphane Wirtel.

- bpo-36345: Using the code of the ``Tools/scripts/serve.py`` script as an
  example in the :mod:`wsgiref` documentation.  Contributed by Stéphane
  Wirtel.

- bpo-36157: Added Documention for  PyInterpreterState_Main().

- bpo-33043: Updates the docs.python.org page with the addition of a
  'Contributing to Docs' link at the end of the page (between 'Reporting
  Bugs' and 'About Documentation'). Updates the 'Found a Bug' page with
  additional links and information in the Documentation Bugs section.

- bpo-35581: @typing.type_check_only now allows type stubs to mark functions
  and classes not available during runtime.

- bpo-33832: Add glossary entry for 'magic method'.

- bpo-32913: Added re.Match.groupdict example to regex HOWTO.

Tests
-----

- bpo-36719: regrtest now always detects uncollectable objects. Previously,
  the check was only enabled by ``--findleaks``. The check now also works
  with ``-jN/--multiprocess N``. ``--findleaks`` becomes a deprecated alias
  to ``--fail-env-changed``.

- bpo-36725: When using multiprocessing mode (-jN), regrtest now better
  reports errors if a worker process fails, and it exits immediately on a
  worker thread failure or when interrupted.

- bpo-36454: Change test_time.test_monotonic() to test only the lower bound
  of elapsed time after a sleep command rather than the upper bound. This
  prevents unnecessary test failures on slow buildbots. Patch by Victor
  Stinner.

- bpo-32424: Improve test coverage for xml.etree.ElementTree. Patch by
  Gordon P. Hemsley.

- bpo-32424: Fix typo in test_cyclic_gc() test for xml.etree.ElementTree.
  Patch by Gordon P. Hemsley.

- bpo-36635: Add a new :mod:`_testinternalcapi` module to test the internal
  C API.

- bpo-36629: Fix ``test_imap4_host_default_value()`` of ``test_imaplib``:
  catch also :data:`errno.ENETUNREACH` error.

- bpo-36611: Fix ``test_sys.test_getallocatedblocks()`` when
  :mod:`tracemalloc` is enabled.

- bpo-36560: Fix reference leak hunting in regrtest: compute also deltas (of
  reference count, allocated memory blocks, file descriptor count) during
  warmup, to ensure that everything is initialized before starting to hunt
  reference leaks.

- bpo-36565: Fix reference hunting (``python3 -m test -R 3:3``) when Python
  has no built-in abc module.

- bpo-31904: Port test_resource to VxWorks: skip tests cases setting
  RLIMIT_FSIZE and RLIMIT_CPU.

- bpo-31904: Fix test_tabnanny on VxWorks: adjust ENOENT error message.

- bpo-36436: Fix ``_testcapi.pymem_buffer_overflow()``: handle memory
  allocation failure.

- bpo-31904: Fix test_utf8_mode on VxWorks: Python always use UTF-8 on
  VxWorks.

- bpo-36341: Fix tests that may fail with PermissionError upon calling
  bind() on AF_UNIX sockets.

Build
-----

- bpo-36747: Remove the stale scriptsinstall Makefile target.

- bpo-21536: On Unix, C extensions are no longer linked to libpython except
  on Android and Cygwin.

  It is now possible for a statically linked Python to load a C extension
  built using a shared library Python.

  When Python is embedded, ``libpython`` must not be loaded with
  ``RTLD_LOCAL``, but ``RTLD_GLOBAL`` instead. Previously, using
  ``RTLD_LOCAL``, it was already not possible to load C extensions which
  were not linked to ``libpython``, such as C extensions of the standard
  library built by the ``*shared*`` section of ``Modules/Setup``.

  distutils, python-config and python-config.py have been modified.

- bpo-36707: ``./configure --with-pymalloc`` no longer adds the ``m`` flag
  to SOABI (sys.implementation.cache_tag). Enabling or disabling pymalloc
  has no impact on the ABI.

- bpo-36635: Change ``PyAPI_FUNC(type)``, ``PyAPI_DATA(type)`` and
  ``PyMODINIT_FUNC`` macros of ``pyport.h`` when ``Py_BUILD_CORE_MODULE`` is
  defined. The ``Py_BUILD_CORE_MODULE`` define must be now be used to build
  a C extension as a dynamic library accessing Python internals: export the
  PyInit_xxx() function in DLL exports on Windows.

- bpo-31904: Don't build the ``_crypt`` extension on VxWorks.

- bpo-36618: Add ``-fmax-type-align=8`` to CFLAGS when clang compiler is
  detected. The pymalloc memory allocator aligns memory on 8 bytes. On
  x86-64, clang expects alignment on 16 bytes by default and so uses MOVAPS
  instruction which can lead to segmentation fault. Instruct clang that
  Python is limited to alignment on 8 bytes to use MOVUPS instruction
  instead: slower but don't trigger a SIGSEGV if the memory is not aligned
  on 16 bytes. Sadly, the flag must be added to ``CFLAGS`` and not just
  ``CFLAGS_NODIST``, since third party C extensions can have the same issue.

- bpo-36605: ``make tags`` and ``make TAGS`` now also parse
  ``Modules/_io/*.c`` and ``Modules/_io/*.h``.

- bpo-36465: Release builds and debug builds are now ABI compatible:
  defining the ``Py_DEBUG`` macro no longer implies the ``Py_TRACE_REFS``
  macro, which introduces the only ABI incompatibility. The
  ``Py_TRACE_REFS`` macro, which adds the :func:`sys.getobjects` function
  and the :envvar:`PYTHONDUMPREFS` environment variable, can be set using
  the new ``./configure --with-trace-refs`` build option.

- bpo-36577: setup.py now correctly reports missing OpenSSL headers and
  libraries again.

- bpo-36544: Fix regression introduced in bpo-36146 refactoring setup.py

- bpo-36508: ``python-config --ldflags`` no longer includes flags of the
  ``LINKFORSHARED`` variable. The ``LINKFORSHARED`` variable must only be
  used to build executables.

- bpo-36503: Remove references to "aix3" and "aix4". Patch by M. Felt.

Windows
-------

- bpo-35920: Added platform.win32_edition() and platform.win32_is_iot().
  Added support for cross-compiling packages for Windows ARM32. Skip tests
  that are not expected to work on Windows IoT Core ARM32.

- bpo-36649: Remove trailing spaces for registry keys when installed via the
  Store.

- bpo-34144: Fixed activate.bat to correctly update codepage when chcp.com
  returns dots in output. Patch by Lorenz Mende.

- bpo-36509: Added preset-iot layout for Windows IoT ARM containers. This
  layout doesn't contain UI components like tkinter or IDLE. It also doesn't
  contain files to support on-target builds since Windows ARM32 builds must
  be cross-compiled when using MSVC.

- bpo-35941: enum_certificates function of the ssl module now returns
  certificates from all available certificate stores inside windows in a
  query instead of returning only certificates from the system wide
  certificate store. This includes certificates from these certificate
  stores: local machine, local machine enterprise, local machine group
  policy, current user, current user group policy, services, users.
  ssl.enum_crls() function is changed in the same way to return all
  certificate revocation lists inside the windows certificate revocation
  list stores.

- bpo-36441: Fixes creating a venv when debug binaries are installed.

- bpo-36085: Enable better DLL resolution on Windows by using safe DLL
  search paths and adding :func:`os.add_dll_directory`.

- bpo-36010: Add the venv standard library module to the nuget distribution
  for Windows.

- bpo-29515: Add the following socket module constants on Windows:
  IPPROTO_AH IPPROTO_CBT IPPROTO_DSTOPTS IPPROTO_EGP IPPROTO_ESP
  IPPROTO_FRAGMENT IPPROTO_GGP IPPROTO_HOPOPTS IPPROTO_ICLFXBM
  IPPROTO_ICMPV6 IPPROTO_IDP IPPROTO_IGMP IPPROTO_IGP IPPROTO_IPV4
  IPPROTO_IPV6 IPPROTO_L2TP IPPROTO_MAX IPPROTO_ND IPPROTO_NONE IPPROTO_PGM
  IPPROTO_PIM IPPROTO_PUP IPPROTO_RDP IPPROTO_ROUTING IPPROTO_SCTP
  IPPROTO_ST

- bpo-35947: Added current version of libffi to cpython-source-deps. Change
  _ctypes to use current version of libffi on Windows.

- bpo-34060: Report system load when running test suite on Windows. Patch by
  Ammar Askar. Based on prior work by Jeremy Kloth.

- bpo-31512: With the Windows 10 Creators Update, non-elevated users can now
  create symlinks as long as the computer has Developer Mode enabled.

macOS
-----

- bpo-34602: Avoid failures setting macOS stack resource limit with
  resource.setrlimit. This reverts an earlier fix for bpo-18075 which forced
  a non-default stack size when building the interpreter executable on
  macOS.

IDLE
----

- bpo-36429: Fix starting IDLE with pyshell. Add idlelib.pyshell alias at
  top; remove pyshell alias at bottom. Remove obsolete __name__=='__main__'
  command.

Tools/Demos
-----------

- bpo-14546: Fix the argument handling in Tools/scripts/lll.py.

C API
-----

- bpo-36763: Fix memory leak in :c:func:`Py_SetStandardStreamEncoding`:
  release memory if the function is called twice.

- bpo-36641: :c:macro:`PyDoc_VAR(name)` and
  :c:macro:`PyDoc_STRVAR(name,str)` now create ``static const char name[]``
  instead of ``static char name[]``.  Patch by Inada Naoki.

- bpo-36389: Change the value of ``CLEANBYTE``, ``DEADDYTE`` and
  ``FORBIDDENBYTE`` internal constants used by debug hooks on Python memory
  allocators (:c:func:`PyMem_SetupDebugHooks` function). Byte patterns
  ``0xCB``, ``0xDB`` and ``0xFB`` have been replaced with ``0xCD``, ``0xDD``
  and ``0xFD`` to use the same values than Windows CRT debug ``malloc()``
  and ``free()``.

- bpo-36443: Since Python 3.7.0, calling :c:func:`Py_DecodeLocale` before
  :c:func:`Py_Initialize` produces mojibake if the ``LC_CTYPE`` locale is
  coerced and/or if the UTF-8 Mode is enabled by the user configuration. The
  LC_CTYPE coercion and UTF-8 Mode are now disabled by default to fix the
  mojibake issue. They must now be enabled explicitly (opt-in) using the new
  :c:func:`_Py_PreInitialize` API with ``_PyPreConfig``.

- bpo-36025: Fixed an accidental change to the datetime C API where the
  arguments to the :c:func:`PyDate_FromTimestamp` function were incorrectly
  interpreted as a single timestamp rather than an arguments tuple, which
  causes existing code to start raising :exc:`TypeError`. The
  backwards-incompatible change was only present in alpha releases of Python
  3.8. Patch by Paul Ganssle.

- bpo-35810: Modify ``PyObject_Init`` to correctly increase the refcount of
  heap- allocated Type objects. Also fix the refcounts of the heap-allocated
  types that were either doing this manually or not decreasing the type's
  refcount in tp_dealloc


What's New in Python 3.8.0 alpha 3?
===================================

*Release date: 2019-03-25*

Security
--------

- bpo-36216: Changes urlsplit() to raise ValueError when the URL contains
  characters that decompose under IDNA encoding (NFKC-normalization) into
  characters that affect how the URL is parsed.

- bpo-35121: Don't send cookies of domain A without Domain attribute to
  domain B when domain A is a suffix match of domain B while using a
  cookiejar with :class:`http.cookiejar.DefaultCookiePolicy` policy. Patch
  by Karthikeyan Singaravelan.

Core and Builtins
-----------------

- bpo-36421: Fix a possible double decref in _ctypes.c's
  ``PyCArrayType_new()``.

- bpo-36412: Fix a possible crash when creating a new dictionary.

- bpo-36398: Fix a possible crash in ``structseq_repr()``.

- bpo-36256: Fix bug in parsermodule when parsing a state in a DFA that has
  two or more arcs with labels of the same type. Patch by Pablo Galindo.

- bpo-36365: repr(structseq) is no longer limited to 512 bytes.

- bpo-36374: Fix a possible null pointer dereference in
  ``merge_consts_recursive()``. Patch by Zackery Spytz.

- bpo-36236: At Python initialization, the current directory is no longer
  prepended to :data:`sys.path` if it has been removed.

- bpo-36352: Python initialization now fails with an error, rather than
  silently truncating paths, if a path is too long.

- bpo-36301: Python initialization now fails if decoding ``pybuilddir.txt``
  configuration file fails at startup.

- bpo-36333: Fix leak in _PyRuntimeState_Fini. Contributed by Stéphane
  Wirtel.

- bpo-36332: The builtin :func:`compile` can now handle AST objects that
  contain assignment expressions. Patch by Pablo Galindo.

- bpo-36282: Improved error message for too much positional arguments in
  some builtin functions.

- bpo-30040: New empty dict uses fewer memory for now.  It used more memory
  than empty dict created by ``dict.clear()``.  And empty dict creation and
  deletion is about 2x faster.  Patch by Inada Naoki.

- bpo-36262: Fix an unlikely memory leak on conversion from string to float
  in the function ``_Py_dg_strtod()`` used by ``float(str)``,
  ``complex(str)``, :func:`pickle.load`, :func:`marshal.load`, etc.

- bpo-36252: Update Unicode databases to version 12.0.0.

- bpo-36218: Fix a segfault occurring when sorting a list of heterogeneous
  values. Patch contributed by Rémi Lapeyre and Elliot Gorokhovsky.

- bpo-36188: Cleaned up left-over vestiges of Python 2 unbound method
  handling in method objects and documentation. Patch by Martijn Pieters

- bpo-36124: Add a new interpreter-specific dict and expose it in the C-API
  via PyInterpreterState_GetDict().  This parallels PyThreadState_GetDict().
  However, extension modules should continue using PyModule_GetState() for
  their own internal per-interpreter state.

- bpo-35975: Add a ``feature_version`` flag to ``ast.parse()`` (documented)
  and ``compile()`` (hidden) that allows tweaking the parser to support
  older versions of the grammar. In particular, if ``feature_version`` is 5
  or 6, the hacks for the ``async`` and ``await`` keyword from PEP 492 are
  reinstated. (For 7 or higher, these are unconditionally treated as
  keywords, but they are still special tokens rather than ``NAME`` tokens
  that the parser driver recognizes.)

- bpo-31904: Use UTF-8 as the system encoding on VxWorks.

- bpo-36048: The :meth:`~object.__index__` special method will be used
  instead of :meth:`~object.__int__` for implicit conversion of Python
  numbers to C integers.  Using the ``__int__()`` method in implicit
  conversions has been deprecated.

- bpo-35808: Retire pgen and use a modified version of pgen2 to generate the
  parser. Patch by Pablo Galindo.

Library
-------

- bpo-36401: The class documentation created by pydoc now has a separate
  section for readonly properties.

- bpo-36320: The typing.NamedTuple() class has deprecated the _field_types
  attribute in favor of the __annotations__ attribute which carried the same
  information. Also, both attributes were converted from OrderedDict to a
  regular dict.

- bpo-34745: Fix :mod:`asyncio` ssl memory issues caused by circular
  references

- bpo-36324: Add method to statistics.NormalDist for computing the inverse
  cumulative normal distribution.

- bpo-36321: collections.namedtuple() misspelled the name of an attribute.
  To be consistent with typing.NamedTuple, the attribute name should have
  been "_field_defaults" instead of "_fields_defaults".  For backwards
  compatibility, both spellings are now created.  The misspelled version may
  be removed in the future.

- bpo-36297: "unicode_internal" codec is removed.  It was deprecated since
  Python 3.3. Patch by Inada Naoki.

- bpo-36298: Raise ModuleNotFoundError in pyclbr when a module can't be
  found. Thanks to 'mental' for the bug report.

- bpo-36268: Switch the default format used for writing tars with
  mod:`tarfile` to the modern POSIX.1-2001 pax standard, from the
  vendor-specific GNU. Contributed by C.A.M. Gerlach.

- bpo-36285: Fix integer overflows in the array module. Patch by Stephan
  Hohe.

- bpo-31904: Add _signal module support for VxWorks.

- bpo-36272: :mod:`logging` does not silently ignore RecursionError anymore.
  Patch contributed by Rémi Lapeyre.

- bpo-36280: Add a kind field to ast.Constant. It is 'u' if the literal has
  a 'u' prefix (i.e. a Python 2 style unicode literal), else None.

- bpo-35931: The :mod:`pdb` ``debug`` command now gracefully handles all
  exceptions.

- bpo-36251: Fix format strings used for stderrprinter and re.Match reprs.
  Patch by Stephan Hohe.

- bpo-36235: Fix ``CFLAGS`` in ``customize_compiler()`` of
  ``distutils.sysconfig``: when the ``CFLAGS`` environment variable is
  defined, don't override ``CFLAGS`` variable with the ``OPT`` variable
  anymore. Initial patch written by David Malcolm.

- bpo-35807: Update ensurepip to install pip 19.0.3 and setuptools 40.8.0.

- bpo-36139: Release GIL when closing :class:`~mmap.mmap` objects.

- bpo-36179: Fix two unlikely reference leaks in _hashopenssl. The leaks
  only occur in out-of-memory cases.

- bpo-36169: Add overlap() method to statistics.NormalDist.  Computes the
  overlapping coefficient for two normal distributions.

- bpo-36103: Default buffer size used by ``shutil.copyfileobj()`` is changed
  from 16 KiB to 64 KiB on non-Windows platform to reduce system call
  overhead. Contributed by Inada Naoki.

- bpo-36130: Fix ``pdb`` with ``skip=...`` when stepping into a frame
  without a ``__name__`` global.  Patch by Anthony Sottile.

- bpo-35652: shutil.copytree(copy_function=...) erroneously pass DirEntry
  instead of a path string.

- bpo-35178: Ensure custom :func:`warnings.formatwarning` function can
  receive `line` as positional argument. Based on patch by Tashrif Billah.

- bpo-36106: Resolve potential name clash with libm's sinpi(). Patch by
  Dmitrii Pasechnik.

- bpo-36091: Clean up reference to async generator in Lib/types. Patch by
  Henry Chen.

- bpo-36043: :class:`FileCookieJar` supports :term:`path-like object`.
  Contributed by Stéphane Wirtel

- bpo-35899: Enum has been fixed to correctly handle empty strings and
  strings with non-Latin characters (ie. 'α', 'א') without crashing.
  Original patch contributed by Maxwell. Assisted by Stéphane Wirtel.

- bpo-21269: Add ``args`` and ``kwargs`` properties to mock call objects.
  Contributed by Kumar Akshay.

- bpo-30670: `pprint.pp` has been added to pretty-print objects with
  dictionary keys being sorted with their insertion order by default.
  Parameter *sort_dicts* has been added to `pprint.pprint`, `pprint.pformat`
  and `pprint.PrettyPrinter`. Contributed by Rémi Lapeyre.

- bpo-35843: Implement ``__getitem__`` for ``_NamespacePath``.  Patch by
  Anthony Sottile.

- bpo-35802: Clean up code which checked presence of ``os.stat`` /
  ``os.lstat`` / ``os.chmod`` which are always present.  Patch by Anthony
  Sottile.

- bpo-35715: Librates the return value of a ProcessPoolExecutor
  _process_worker after it's no longer needed to free memory

- bpo-35493: Use :func:`multiprocessing.connection.wait` instead of polling
  each 0.2 seconds for worker updates in :class:`multiprocessing.Pool`.
  Patch by Pablo Galindo.

- bpo-35661: Store the venv prompt in pyvenv.cfg.

- bpo-35121: Don't set cookie for a request when the request path is a
  prefix match of the cookie's path attribute but doesn't end with "/".
  Patch by Karthikeyan Singaravelan.

- bpo-21478: Calls to a child function created with
  :func:`unittest.mock.create_autospec` should propagate to the parent.
  Patch by Karthikeyan Singaravelan.

- bpo-35198: Fix C++ extension compilation on AIX

Documentation
-------------

- bpo-36329: Declare the path of the Python binary for the usage of
  ``Tools/scripts/serve.py`` when executing ``make -C Doc/ serve``.
  Contributed by Stéphane Wirtel

- bpo-36138: Improve documentation about converting datetime.timedelta to
  scalars.

- bpo-21314: A new entry was added to the Core Language Section of the
  Programming FAQ, which explaines the usage of slash(/) in the signature of
  a function. Patch by Lysandros Nikolaou

Tests
-----

- bpo-36234: test_posix.PosixUidGidTests: add tests for invalid uid/gid type
  (str). Initial patch written by David Malcolm.

- bpo-29571: Fix ``test_re.test_locale_flag()``:  use
  ``locale.getpreferredencoding()`` rather than ``locale.getlocale()`` to
  get the locale encoding. With some locales, ``locale.getlocale()`` returns
  the wrong encoding.

- bpo-36123: Fix race condition in test_socket.

Build
-----

- bpo-36356: Fix leaks that led to build failure when configured with
  address sanitizer.

- bpo-36146: Add ``TEST_EXTENSIONS`` constant to ``setup.py`` to allow to
  not build test extensions like ``_testcapi``.

- bpo-36146: Fix setup.py on macOS: only add ``/usr/include/ffi`` to include
  directories of _ctypes, not for all extensions.

- bpo-31904: Enable build system to cross-build for VxWorks RTOS.

Windows
-------

- bpo-36312: Fixed decoders for the following code pages: 50220, 50221,
  50222, 50225, 50227, 50229, 57002 through 57011, 65000 and 42.

- bpo-36264: Don't honor POSIX ``HOME`` in ``os.path.expanduser`` on
  windows.  Patch by Anthony Sottile.

- bpo-24643: Fix name collisions due to ``#define timezone _timezone`` in
  PC/pyconfig.h.

IDLE
----

- bpo-36405: Use dict unpacking in idlelib.

- bpo-36396: Remove fgBg param of idlelib.config.GetHighlight(). This param
  was only used twice and changed the return type.

- bpo-36176: Fix IDLE autocomplete & calltip popup colors. Prevent conflicts
  with Linux dark themes (and slightly darken calltip background).

- bpo-23205: For the grep module, add tests for findfiles, refactor
  findfiles to be a module-level function, and refactor findfiles to use
  os.walk.

- bpo-23216: Add docstrings to IDLE search modules.

- bpo-36152: Remove colorizer.ColorDelegator.close_when_done and the
  corresponding argument of .close().  In IDLE, both have always been None
  or False since 2007.

- bpo-32129: Avoid blurry IDLE application icon on macOS with Tk 8.6. Patch
  by Kevin Walzer.

- bpo-36096: Refactor class variables to instance variables in colorizer.

- bpo-30348: Increase test coverage of idlelib.autocomplete by 30%. Patch by
  Louie Lu

Tools/Demos
-----------

- bpo-35132: Fix py-list and py-bt commands of python-gdb.py on gdb7.

- bpo-32217: Fix freeze script on Windows.

C API
-----

- bpo-36381: Raise ``DeprecationWarning`` when '#' formats are used for
  building or parsing values without ``PY_SSIZE_T_CLEAN``.

- bpo-36142: The whole coreconfig.h header is now excluded from
  Py_LIMITED_API. Move functions definitions into a new internal
  pycore_coreconfig.h header.


What's New in Python 3.8.0 alpha 2?
===================================

*Release date: 2019-02-25*

Core and Builtins
-----------------

- bpo-36052: Raise a :exc:`SyntaxError` when assigning a value to
  `__debug__` with the Assignment Operator. Contributed by Stéphane Wirtel
  and Pablo Galindo.

- bpo-36012: Doubled the speed of class variable writes.  When a non-dunder
  attribute was updated, there was an unnecessary call to update slots.

- bpo-35942: The error message emitted when returning invalid types from
  ``__fspath__`` in interfaces that allow passing :class:`~os.PathLike`
  objects has been improved and now it does explain the origin of the error.

- bpo-36016: ``gc.get_objects`` can now receive an optional parameter
  indicating a generation to get objects from. Patch by Pablo Galindo.

- bpo-1054041: When the main interpreter exits due to an uncaught
  KeyboardInterrupt, the process now exits in the appropriate manner for its
  parent process to detect that a SIGINT or ^C terminated the process.  This
  allows shells and batch scripts to understand that the user has asked them
  to stop.

- bpo-35992: Fix ``__class_getitem__()`` not being called on a class with a
  custom non-subscriptable metaclass.

- bpo-35993: Fix a crash on fork when using subinterpreters. Contributed by
  Stéphane Wirtel

- bpo-35991: Fix a potential double free in Modules/_randommodule.c.

- bpo-35961: Fix a crash in slice_richcompare(): use strong references
  rather than stolen references for the two temporary internal tuples.

- bpo-35911: Enable the creation of cell objects by adding a
  ``cell.__new__`` method, and expose the type ``cell`` in ``Lib/types.py``
  under the name CellType. Patch by Pierre Glaser.

- bpo-12822: Use monotonic clock for ``pthread_cond_timedwait`` when
  ``pthread_condattr_setclock`` and ``CLOCK_MONOTONIC`` are available.

- bpo-15248: The compiler emits now syntax warnings in the case when a comma
  is likely missed before tuple or list.

- bpo-35886: The implementation of PyInterpreterState has been moved into
  the internal header files (guarded by Py_BUILD_CORE).

- bpo-31506: Clarify the errors reported when ``object.__new__`` and
  ``object.__init__`` receive more than one argument. Contributed by Sanyam
  Khurana.

- bpo-35724: Signal-handling is now guaranteed to happen relative to the
  main interpreter.

- bpo-33608: We added a new internal _Py_AddPendingCall() that operates
  relative to the provided interpreter.  This allows us to use the existing
  implementation to ask another interpreter to do work that cannot be done
  in the current interpreter, like decref an object the other interpreter
  owns.  The existing Py_AddPendingCall() only operates relative to the main
  interpreter.

- bpo-33989: Fix a possible crash in :meth:`list.sort` when sorting objects
  with ``ob_type->tp_richcompare == NULL``.  Patch by Zackery Spytz.

Library
-------

- bpo-35512: :func:`unittest.mock.patch.dict` used as a decorator with
  string target resolves the target during function call instead of during
  decorator construction. Patch by Karthikeyan Singaravelan.

- bpo-36018: Add statistics.NormalDist, a tool for creating and manipulating
  normal distributions of random variable.  Features a composite class that
  treats the mean and standard deviation of measurement data as single
  entity.

- bpo-35904: Added statistics.fmean() as a faster, floating point variant of
  the existing mean() function.

- bpo-35918: Removed broken ``has_key`` method from
  multiprocessing.managers.SyncManager.dict. Contributed by Rémi Lapeyre.

- bpo-18283: Add support for bytes to :func:`shutil.which`.

- bpo-35960: Fix :func:`dataclasses.field` throwing away empty mapping
  objects passed as metadata.

- bpo-35500: Write expected and actual call parameters on separate lines in
  :meth:`unittest.mock.Mock.assert_called_with` assertion errors.
  Contributed by Susan Su.

- bpo-35931: The :mod:`pdb` ``debug`` command now gracefully handles syntax
  errors.

- bpo-24209: In http.server script, rely on getaddrinfo to bind to preferred
  address based on the bind parameter. Now default bind or binding to a name
  may bind to IPv6 or dual-stack, depending on the environment.

- bpo-35321: Set ``__spec__.origin`` of  ``_frozen_importlib`` to frozen so
  that it matches the behavior of ``_frozen_importlib_external``.  Patch by
  Nina Zakharenko.

- bpo-35378: Fix a reference issue inside :class:`multiprocessing.Pool` that
  caused the pool to remain alive if it was deleted without being closed or
  terminated explicitly. A new strong reference is added to the pool
  iterators to link the lifetime of the pool to the lifetime of its
  iterators so the pool does not get destroyed if a pool iterator is still
  alive.

- bpo-34294: re module, fix wrong capturing groups in rare cases.
  :func:`re.search`, :func:`re.findall`, :func:`re.sub` and other functions
  that scan through string looking for a match, should reset capturing
  groups between two match attempts. Patch by Ma Lin.

- bpo-35615: :mod:`weakref`: Fix a RuntimeError when copying a
  WeakKeyDictionary or a WeakValueDictionary, due to some keys or values
  disappearing while iterating.

- bpo-35606: Implement :func:`math.prod` as analogous function to
  :func:`sum` that returns the product of a 'start' value (default: 1) times
  an iterable of numbers. Patch by Pablo Galindo.

- bpo-32417: Performing arithmetic between :class:`datetime.datetime`
  subclasses and :class:`datetime.timedelta` now returns an object of the
  same type as the :class:`datetime.datetime` subclass. As a result,
  :meth:`datetime.datetime.astimezone` and alternate constructors like
  :meth:`datetime.datetime.now` and :meth:`datetime.fromtimestamp` called
  with a ``tz`` argument now *also* retain their subclass.

- bpo-35153: Add *headers* optional keyword-only parameter to
  :class:`xmlrpc.client.ServerProxy`, :class:`xmlrpc.client.Transport` and
  :class:`xmlrpc.client.SafeTransport`.  Patch by Cédric Krier.

- bpo-34572: Fix C implementation of pickle.loads to use importlib's locking
  mechanisms, and thereby avoid using partially-loaded modules. Patch by Tim
  Burgess.

Documentation
-------------

- bpo-36083: Fix formatting of --check-hash-based-pycs options in the
  manpage Synopsis.

- bpo-36007: Bump minimum sphinx version to 1.8.  Patch by Anthony Sottile.

- bpo-22062: Update documentation and docstrings for pathlib. Original patch
  by Mike Short.

Tests
-----

- bpo-27313: Avoid test_ttk_guionly ComboboxTest failure with macOS Cocoa
  Tk.

- bpo-36019: Add test.support.TEST_HTTP_URL and replace references of
  http://www.example.com by this new constant. Contributed by Stéphane
  Wirtel.

- bpo-36037: Fix test_ssl for strict OpenSSL configuration like RHEL8 strict
  crypto policy. Use older TLS version for minimum TLS version of the server
  SSL context if needed, to test TLS version older than default minimum TLS
  version.

- bpo-35798: Added :func:`test.support.check_syntax_warning`.

- bpo-35505: Make test_imap4_host_default_value independent on whether the
  local IMAP server is running.

- bpo-35917: multiprocessing: provide unit tests for SyncManager and
  SharedMemoryManager classes + all the shareable types which are supposed
  to be supported by them.  (patch by Giampaolo Rodola)

- bpo-35704: Skip ``test_shutil.test_unpack_archive_xztar`` to prevent a
  MemoryError on 32-bit AIX when MAXDATA setting is less than 0x20000000.

  Patch by Michael Felt (aixtools)

- bpo-34720: Assert m_state != NULL to mimic GC traversal functions that do
  not correctly handle module creation when the module state has not been
  created.

Windows
-------

- bpo-35976: Added ARM build support to Windows build files in PCBuild.

- bpo-35692: ``pathlib`` no longer raises when checking file and directory
  existence on drives that are not ready

- bpo-35872: Uses the base Python executable when invoking venv in a virtual
  environment

- bpo-35873: Prevents venv paths being inherited by child processes

- bpo-35299: Fix sysconfig detection of the source directory and distutils
  handling of pyconfig.h during PGO profiling

IDLE
----

- bpo-24310: IDLE -- Document settings dialog font tab sample.

- bpo-35833: Revise IDLE doc for control codes sent to Shell. Add a code
  example block.

- bpo-35689: Add docstrings and unittests for colorizer.py.


What's New in Python 3.8.0 alpha 1?
===================================

*Release date: 2019-02-03*

Security
--------

- bpo-35746: [CVE-2019-5010] Fix a NULL pointer deref in ssl module. The
  cert parser did not handle CRL distribution points with empty DP or URI
  correctly. A malicious or buggy certificate can result into segfault.
  Vulnerability (TALOS-2018-0758) reported by Colin Read and Nicolas Edet of
  Cisco.

- bpo-34812: The :option:`-I` command line option (run Python in isolated
  mode) is now also copied by the :mod:`multiprocessing` and
  :mod:`distutils` modules when spawning child processes. Previously, only
  :option:`-E` and :option:`-s` options (enabled by :option:`-I`) were
  copied.

- bpo-34791: The xml.sax and xml.dom.domreg no longer use environment
  variables to override parser implementations when
  sys.flags.ignore_environment is set by -E or -I arguments.

- bpo-17239: The xml.sax and xml.dom.minidom parsers no longer processes
  external entities by default. External DTD and ENTITY declarations no
  longer load files or create network connections.

- bpo-34623: CVE-2018-14647: The C accelerated _elementtree module now
  initializes hash randomization salt from _Py_HashSecret instead of
  libexpat's default CSPRNG.

- bpo-34405: Updated to OpenSSL 1.1.0i for Windows builds.

- bpo-33871: Fixed sending the part of the file in :func:`os.sendfile` on
  macOS.  Using the *trailers* argument could cause sending more bytes from
  the input file than was specified.

- bpo-32533: Fixed thread-safety of error handling in _ssl.

- bpo-33136: Harden ssl module against LibreSSL CVE-2018-8970.
  X509_VERIFY_PARAM_set1_host() is called with an explicit namelen. A new
  test ensures that NULL bytes are not allowed.

- bpo-33001: Minimal fix to prevent buffer overrun in os.symlink on Windows

- bpo-32981: Regexes in difflib and poplib were vulnerable to catastrophic
  backtracking. These regexes formed potential DOS vectors (REDOS). They
  have been refactored. This resolves CVE-2018-1060 and CVE-2018-1061. Patch
  by Jamie Davis.

- bpo-28414: The ssl module now allows users to perform their own IDN
  en/decoding when using SNI.

Core and Builtins
-----------------

- bpo-35877: Make parenthesis optional for named expressions in while
  statement. Patch by Karthikeyan Singaravelan.

- bpo-35814: Allow same right hand side expressions in annotated assignments
  as in normal ones. In particular, ``x: Tuple[int, int] = 1, 2`` (without
  parentheses on the right) is now allowed.

- bpo-35766: Add the option to parse PEP 484 type comments in the ast
  module. (Off by default.) This is merging the key functionality of the
  third party fork thereof,
  [typed_ast](https://github.com/python/typed_ast).

- bpo-35713: Reorganize Python initialization to get working exceptions and
  sys.stderr earlier.

- bpo-33416: Add end line and end column position information to the Python
  AST nodes. This is a C-level backwards incompatible change.

- bpo-35720: Fixed a minor memory leak in pymain_parse_cmdline_impl function
  in Modules/main.c

- bpo-35634: ``func(**kwargs)`` will now raise an error when ``kwargs`` is a
  mapping containing multiple entries with the same key. An error was
  already raised when other keyword arguments are passed before ``**kwargs``
  since Python 3.6.

- bpo-35623: Fix a crash when sorting very long lists. Patch by Stephan
  Hohe.

- bpo-35214: clang Memory Sanitizer build instrumentation was added to work
  around false positives from posix, socket, time, test_io, and
  test_faulthandler.

- bpo-35560: Fix an assertion error in :func:`format` in debug build for
  floating point formatting with "n" format, zero padding and small width.
  Release build is not impacted. Patch by Karthikeyan Singaravelan.

- bpo-35552: Format characters ``%s`` and ``%V`` in
  :c:func:`PyUnicode_FromFormat` and ``%s`` in :c:func:`PyBytes_FromFormat`
  no longer read memory past the limit if *precision* is specified.

- bpo-35504: Fix segfaults and :exc:`SystemError`\ s when deleting certain
  attributes. Patch by Zackery Spytz.

- bpo-35504: Fixed a SystemError when delete the characters_written
  attribute of an OSError.

- bpo-35494: Improved syntax error messages for unbalanced parentheses in
  f-string.

- bpo-35444: Fixed error handling in pickling methods when fail to look up
  builtin "getattr". Sped up pickling iterators.

- bpo-35436: Fix various issues with memory allocation error handling.
  Patch by Zackery Spytz.

- bpo-35423: Separate the signal handling trigger in the eval loop from the
  "pending calls" machinery. There is no semantic change and the difference
  in performance is insignificant.

- bpo-35357: Internal attributes' names of unittest.mock._Call and
  unittest.mock.MagicProxy (name, parent & from_kall) are now prefixed with
  _mock_ in order to prevent clashes with widely used object attributes.
  Fixed minor typo in test function name.

- bpo-35372: Fixed the code page decoder for input longer than 2 GiB
  containing undecodable bytes.

- bpo-35336: Fix PYTHONCOERCECLOCALE=1 environment variable: only coerce the
  C locale if the LC_CTYPE locale is "C".

- bpo-31241: The *lineno* and *col_offset* attributes of AST nodes for list
  comprehensions, generator expressions and tuples are now point to the
  opening parenthesis or square brace. For tuples without parenthesis they
  point to the position of the first item.

- bpo-33954: For :meth:`str.format`, :meth:`float.__format__` and
  :meth:`complex.__format__` methods for non-ASCII decimal point when using
  the "n" formatter.

- bpo-35269: Fix a possible segfault involving a newly-created coroutine.
  Patch by Zackery Spytz.

- bpo-35224: Implement :pep:`572` (assignment expressions). Patch by Emily
  Morehouse.

- bpo-32492: Speed up :class:`namedtuple` attribute access by 1.6x using a C
  fast-path for the name descriptors. Patch by Pablo Galindo.

- bpo-35214: Fixed an out of bounds memory access when parsing a truncated
  unicode escape sequence at the end of a string such as ``'\N'``.  It would
  read one byte beyond the end of the memory allocation.

- bpo-35214: The interpreter and extension modules have had annotations
  added so that they work properly under clang's Memory Sanitizer.  A new
  configure flag --with-memory-sanitizer has been added to make test builds
  of this nature easier to perform.

- bpo-35193: Fix an off by one error in the bytecode peephole optimizer
  where it could read bytes beyond the end of bounds of an array when
  removing unreachable code. This bug was present in every release of Python
  3.6 and 3.7 until now.

- bpo-35169: Improved error messages for forbidden assignments.

- bpo-34022: Fix handling of hash-based bytecode files in :mod:`zipimport`.
  Patch by Elvis Pranskevichus.

- bpo-28401: Debug builds will no longer to attempt to import extension
  modules built for the ABI as they were never compatible to begin with.
  Patch by Stefano Rivera.

- bpo-29341: Clarify in the docstrings of :mod:`os` methods that path-like
  objects are also accepted as input parameters.

- bpo-35050: :mod:`socket`: Fix off-by-one bug in length check for
  ``AF_ALG`` name and type.

- bpo-29743: Raise :exc:`ValueError` instead of :exc:`OverflowError` in case
  of a negative ``_length_`` in a :class:`ctypes.Array` subclass.  Also
  raise :exc:`TypeError` instead of :exc:`AttributeError` for non-integer
  ``_length_``. Original patch by Oren Milman.

- bpo-16806: Fix ``lineno`` and ``col_offset`` for multi-line string tokens.

- bpo-35029: :exc:`SyntaxWarning` raised as an exception at code generation
  time will be now replaced with a :exc:`SyntaxError` for better error
  reporting.

- bpo-34983: Expose :meth:`symtable.Symbol.is_nonlocal` in the symtable
  module. Patch by Pablo Galindo.

- bpo-34974: :class:`bytes` and :class:`bytearray` constructors no longer
  convert unexpected exceptions (e.g. :exc:`MemoryError` and
  :exc:`KeyboardInterrupt`) to :exc:`TypeError`.

- bpo-34939: Allow annotated names in module namespace that are declared
  global before the annotation happens. Patch by Pablo Galindo.

- bpo-34973: Fixed crash in :func:`bytes` when the :class:`list` argument is
  mutated while it is iterated.

- bpo-34876: The *lineno* and *col_offset* attributes of the AST for
  decorated function and class refer now to the position of the
  corresponding ``def``, ``async def`` and ``class`` instead of the position
  of the first decorator. This leads to more correct line reporting in
  tracing. This is the only case when the position of child AST nodes can
  precede the position of the parent AST node.

- bpo-34879: Fix a possible null pointer dereference in bytesobject.c.
  Patch by Zackery Spytz.

- bpo-34784: Fix the implementation of PyStructSequence_NewType in order to
  create heap allocated StructSequences.

- bpo-32912: A :exc:`SyntaxWarning` is now emitted instead of a
  :exc:`DeprecationWarning` for invalid escape sequences in string and bytes
  literals.

- bpo-34854: Fixed a crash in compiling string annotations containing a
  lambda with a keyword-only argument that doesn't have a default value.

- bpo-34850: The compiler now produces a :exc:`SyntaxWarning` when identity
  checks (``is`` and ``is not``) are used with certain types of literals
  (e.g. strings, ints).  These can often work by accident in CPython, but
  are not guaranteed by the language spec.  The warning advises users to use
  equality tests (``==`` and ``!=``) instead.

- bpo-34824: Fix a possible null pointer dereference in Modules/_ssl.c.
  Patch by Zackery Spytz.

- bpo-30156: The C function ``property_descr_get()`` uses a "cached" tuple
  to optimize function calls. But this tuple can be discovered in debug mode
  with :func:`sys.getobjects()`. Remove the optimization, it's not really
  worth it and it causes 3 different crashes last years.

- bpo-34762: Fix contextvars C API to use PyObject* pointer types.

- bpo-34751: The hash function for tuples is now based on xxHash which gives
  better collision results on (formerly) pathological cases. Additionally,
  on 64-bit systems it improves tuple hashes in general. Patch by Jeroen
  Demeyer with substantial contributions by Tim Peters.

- bpo-34735: Fix a memory leak in Modules/timemodule.c.  Patch by Zackery
  Spytz.

- bpo-34683: Fixed a bug where some SyntaxError error pointed to locations
  that were off-by-one.

- bpo-34651: Only allow the main interpreter to fork.  The avoids the
  possibility of affecting the main interpreter, which is critical to
  operation of the runtime.

- bpo-34653: Remove unused function PyParser_SimpleParseStringFilename.

- bpo-32236: Warn that line buffering is not supported if :func:`open` is
  called with binary mode and ``buffering=1``.

- bpo-34641: Further restrict the syntax of the left-hand side of keyword
  arguments in function calls. In particular, ``f((keyword)=arg)`` is now
  disallowed.

- bpo-34637: Make the *start* argument to *sum()* visible as a keyword
  argument.

- bpo-1621: Do not assume signed integer overflow behavior (C undefined
  behavior) when performing set hash table resizing.

- bpo-34588: Fix an off-by-one in the recursive call pruning feature of
  traceback formatting.

- bpo-34485: On Windows, the LC_CTYPE is now set to the user preferred
  locale at startup. Previously, the LC_CTYPE locale was "C" at startup, but
  changed when calling setlocale(LC_CTYPE, "") or setlocale(LC_ALL, "").

- bpo-34485: Standard streams like sys.stdout now use the "surrogateescape"
  error handler, instead of "strict", on the POSIX locale (when the C locale
  is not coerced and the UTF-8 Mode is disabled).

- bpo-34485: Fix the error handler of standard streams like sys.stdout:
  PYTHONIOENCODING=":" is now ignored instead of setting the error handler
  to "strict".

- bpo-34485: Python now gets the locale encoding with C code to initialize
  the encoding of standard streams like sys.stdout. Moreover, the encoding
  is now initialized to the Python codec name to get a normalized encoding
  name and to ensure that the codec is loaded. The change avoids importing
  _bootlocale and _locale modules at startup by default.

- bpo-34527: On FreeBSD, Py_DecodeLocale() and Py_EncodeLocale() now also
  forces the ASCII encoding if the LC_CTYPE locale is "POSIX", not only if
  the LC_CTYPE locale is "C".

- bpo-34527: The UTF-8 Mode is now also enabled by the "POSIX" locale, not
  only by the "C" locale.

- bpo-34403: On HP-UX with C or POSIX locale, sys.getfilesystemencoding()
  now returns "ascii" instead of "roman8" (when the UTF-8 Mode is disabled
  and the C locale is not coerced).

- bpo-34523: The Python filesystem encoding is now read earlier during the
  Python initialization.

- bpo-12458: Tracebacks show now correct line number for subexpressions in
  multiline expressions. Tracebacks show now the line number of the first
  line for multiline expressions instead of the line number of the last
  subexpression.

- bpo-34408: Prevent a null pointer dereference and resource leakage in
  ``PyInterpreterState_New()``.

- bpo-34400: Fix undefined behavior in parsetok.c.  Patch by Zackery Spytz.

- bpo-33073: Added as_integer_ratio to ints to make them more interoperable
  with floats.

- bpo-34377: Update valgrind suppression list to use
  ``_PyObject_Free``/``_PyObject_Realloc`` instead of
  ``PyObject_Free``/``PyObject_Realloc``.

- bpo-34353: Added the "socket" option in the `stat.filemode()` Python
  implementation to match the C implementation.

- bpo-34320: Fix ``dict(od)`` didn't copy iteration order of OrderedDict.

- bpo-34113: Fixed crash on debug builds when opcode stack was adjusted with
  negative numbers. Patch by Constantin Petrisor.

- bpo-34100: Compiler now merges constants in tuples and frozensets
  recursively. Code attributes like ``co_names`` are merged too.

- bpo-34151: Performance of list concatenation, repetition and slicing
  operations is slightly improved. Patch by Sergey Fedoseev.

- bpo-34170: -X dev: it is now possible to override the memory allocator
  using PYTHONMALLOC even if the developer mode is enabled.

- bpo-33237: Improved :exc:`AttributeError` message for partially
  initialized module.

- bpo-34149: Fix min and max functions to get default behavior when key is
  None.

- bpo-34125: Profiling of unbound built-in methods now works when
  ``**kwargs`` is given.

- bpo-34141: Optimized pickling atomic types (None, bool, int, float, bytes,
  str).

- bpo-34126: Fix crashes when profiling certain invalid calls of unbound
  methods. Patch by Jeroen Demeyer.

- bpo-24618: Fixed reading invalid memory when create the code object with
  too small varnames tuple or too large argument counts.

- bpo-34068: In :meth:`io.IOBase.close`, ensure that the
  :attr:`~io.IOBase.closed` attribute is not set with a live exception.
  Patch by Zackery Spytz and Serhiy Storchaka.

- bpo-34087: Fix buffer overflow while converting unicode to numeric values.

- bpo-34080: Fixed a memory leak in the compiler when it raised some
  uncommon errors during tokenizing.

- bpo-34066: Disabled interruption by Ctrl-C between calling ``open()`` and
  entering a **with** block in ``with open()``.

- bpo-34042: Fix dict.copy() to maintain correct total refcount (as reported
  by sys.gettotalrefcount()).

- bpo-33418: Fix potential memory leak in function object when it creates
  reference cycle.

- bpo-33985: Implement contextvars.ContextVar.name attribute.

- bpo-33956: Update vendored Expat library copy to version 2.2.5.

- bpo-24596: Decref the module object in :c:func:`PyRun_SimpleFileExFlags`
  before calling :c:func:`PyErr_Print()`.  Patch by Zackery Spytz.

- bpo-33451: Close directly executed pyc files before calling
  ``PyEval_EvalCode()``.

- bpo-1617161: The hash of :class:`BuiltinMethodType` instances (methods of
  built-in classes) now depends on the hash of the identity of *__self__*
  instead of its value. The hash and equality of :class:`ModuleType` and
  :class:`MethodWrapperType` instances (methods of user-defined classes and
  some methods of built-in classes like ``str.__add__``) now depend on the
  hash and equality of the identity of *__self__* instead of its value.
  :class:`MethodWrapperType` instances no longer support ordering.

- bpo-33824: Fix "LC_ALL=C python3.7 -V": reset properly the command line
  parser when the encoding changes after reading the Python configuration.

- bpo-33803: Fix a crash in hamt.c caused by enabling GC tracking for an
  object that hadn't all of its fields set to NULL.

- bpo-33738: Seven macro incompatibilities with the Limited API were fixed,
  and the macros :c:func:`PyIter_Check`, :c:func:`PyIndex_Check` and
  :c:func:`PyExceptionClass_Name` were added as functions. A script for
  automatic macro checks was added.

- bpo-33786: Fix asynchronous generators to handle GeneratorExit in athrow()
  correctly

- bpo-30167: ``PyRun_SimpleFileExFlags`` removes ``__cached__`` from module
  in addition to ``__file__``.

- bpo-33706: Fix a crash in Python initialization when parsing the command
  line options. Thanks Christoph Gohlke for the bug report and the fix!

- bpo-33597: Reduce ``PyGC_Head`` size from 3 words to 2 words.

- bpo-30654: Fixed reset of the SIGINT handler to SIG_DFL on interpreter
  shutdown even when there was a custom handler set previously. Patch by
  Philipp Kerling.

- bpo-33622: Fixed a leak when the garbage collector fails to add an object
  with the ``__del__`` method or referenced by it into the
  :data:`gc.garbage` list. :c:func:`PyGC_Collect` can now be called when an
  exception is set and preserves it.

- bpo-33462: Make dict and dict views reversible. Patch by Rémi Lapeyre.

- bpo-23722: A :exc:`RuntimeError` is now raised when the custom metaclass
  doesn't provide the ``__classcell__`` entry in the namespace passed to
  ``type.__new__``.  A :exc:`DeprecationWarning` was emitted in Python
  3.6--3.7.

- bpo-33499: Add :envvar:`PYTHONPYCACHEPREFIX` environment variable and
  :option:`-X` ``pycache_prefix`` command-line option to set an alternate
  root directory for writing module bytecode cache files.

- bpo-25711: The :mod:`zipimport` module has been rewritten in pure Python.

- bpo-33509: Fix module_globals parameter of warnings.warn_explicit(): don't
  crash if module_globals is not a dict.

- bpo-31849: Fix signed/unsigned comparison warning in pyhash.c.

- bpo-33475: Fixed miscellaneous bugs in converting annotations to strings
  and optimized parentheses in the string representation.

- bpo-20104: Added support for the `setpgroup`, `resetids`, `setsigmask`,
  `setsigdef` and `scheduler` parameters of `posix_spawn`. Patch by Pablo
  Galindo.

- bpo-33391: Fix a leak in set_symmetric_difference().

- bpo-33363: Raise a SyntaxError for ``async with`` and ``async for``
  statements outside of async functions.

- bpo-28055: Fix unaligned accesses in siphash24(). Patch by Rolf Eike Beer.

- bpo-33128: Fix a bug that causes PathFinder to appear twice on
  sys.meta_path. Patch by Pablo Galindo Salgado.

- bpo-33331: Modules imported last are now cleared first at interpreter
  shutdown.

- bpo-33312: Fixed clang ubsan (undefined behavior sanitizer) warnings in
  dictobject.c by adjusting how the internal struct _dictkeysobject shared
  keys structure is declared.

- bpo-33305: Improved syntax error messages for invalid numerical literals.

- bpo-33306: Improved syntax error messages for unbalanced parentheses.

- bpo-33234: The list constructor will pre-size and not over-allocate when
  the input length is known.

- bpo-33270: Intern the names for all anonymous code objects.  Patch by
  Zackery Spytz.

- bpo-30455: The C and Python code and the documentation related to tokens
  are now generated from a single source file :file:`Grammar/Tokens`.

- bpo-33176: Add a ``toreadonly()`` method to memoryviews.

- bpo-33231: Fix potential memory leak in ``normalizestring()``.

- bpo-33205: Change dict growth function from
  ``round_up_to_power_2(used*2+hashtable_size/2)`` to
  ``round_up_to_power_2(used*3)``.  Previously, dict is shrinked only when
  ``used == 0``. Now dict has more chance to be shrinked.

- bpo-29922: Improved error messages in 'async with' when ``__aenter__()``
  or ``__aexit__()`` return non-awaitable object.

- bpo-33199: Fix ``ma_version_tag`` in dict implementation is uninitialized
  when copying from key-sharing dict.

- bpo-33053: When using the -m switch, sys.path[0] is now explicitly
  expanded as the *starting* working directory, rather than being left as
  the empty path (which allows imports from the current working directory at
  the time of the import)

- bpo-33138: Changed standard error message for non-pickleable and
  non-copyable types. It now says "cannot pickle" instead of "can't pickle"
  or "cannot serialize".

- bpo-33018: Improve consistency of errors raised by ``issubclass()`` when
  called with a non-class and an abstract base class as the first and second
  arguments, respectively. Patch by Josh Bronson.

- bpo-33083: ``math.factorial`` no longer accepts arguments that are not
  int-like. Patch by Pablo Galindo.

- bpo-33041: Added new opcode :opcode:`END_ASYNC_FOR` and fixes the
  following issues:

  * Setting global :exc:`StopAsyncIteration` no longer breaks ``async for``
    loops.
  * Jumping into an ``async for`` loop is now disabled.
  * Jumping out of an ``async for`` loop no longer corrupts the stack.

- bpo-25750: Fix rare Python crash due to bad refcounting in
  ``type_getattro()`` if a descriptor deletes itself from the class. Patch
  by Jeroen Demeyer.

- bpo-33041: Fixed bytecode generation for "async for" with a complex
  target. A StopAsyncIteration raised on assigning or unpacking will be now
  propagated instead of stopping the iteration.

- bpo-33026: Fixed jumping out of "with" block by setting f_lineno.

- bpo-33005: Fix a crash on fork when using a custom memory allocator (ex:
  using PYTHONMALLOC env var). _PyGILState_Reinit() and
  _PyInterpreterState_Enable() now use the default RAW memory allocator to
  allocate a new interpreters mutex on fork.

- bpo-32911: Due to unexpected compatibility issues discovered during
  downstream beta testing, reverted :issue:`29463`. ``docstring`` field is
  removed from Module, ClassDef, FunctionDef, and AsyncFunctionDef ast nodes
  which was added in 3.7a1.  Docstring expression is restored as a first
  statement in their body. Based on patch by Inada Naoki.

- bpo-17288: Prevent jumps from 'return' and 'exception' trace events.

- bpo-32946: Importing names from already imported module with "from ...
  import ..." is now 30% faster if the module is not a package.

- bpo-32932: Make error message more revealing when there are non-str
  objects in ``__all__``.

- bpo-32925: Optimized iterating and containing test for literal lists
  consisting of non-constants: ``x in [a, b]`` and ``for x in [a, b]``. The
  case of all constant elements already was optimized.

- bpo-32889: Update Valgrind suppression list to account for the rename of
  ``Py_ADDRESS_IN_RANG`` to ``address_in_range``.

- bpo-32836: Don't use temporary variables in cases of list/dict/set
  comprehensions

- bpo-31356: Remove the new API added in bpo-31356 (gc.ensure_disabled()
  context manager).

- bpo-32305: For namespace packages, ensure that both ``__file__`` and
  ``__spec__.origin`` are set to None.

- bpo-32303: Make sure ``__spec__.loader`` matches ``__loader__`` for
  namespace packages.

- bpo-32711: Fix the warning messages for Python/ast_unparse.c. Patch by
  Stéphane Wirtel

- bpo-32583: Fix possible crashing in builtin Unicode decoders caused by
  write out-of-bound errors when using customized decode error handlers.

- bpo-32489: A :keyword:`continue` statement is now allowed in the
  :keyword:`finally` clause.

- bpo-17611: Simplified the interpreter loop by moving the logic of
  unrolling the stack of blocks into the compiler. The compiler emits now
  explicit instructions for adjusting the stack of values and calling the
  cleaning up code for :keyword:`break`, :keyword:`continue` and
  :keyword:`return`.

  Removed opcodes :opcode:`BREAK_LOOP`, :opcode:`CONTINUE_LOOP`,
  :opcode:`SETUP_LOOP` and :opcode:`SETUP_EXCEPT`. Added new opcodes
  :opcode:`ROT_FOUR`, :opcode:`BEGIN_FINALLY` and :opcode:`CALL_FINALLY` and
  :opcode:`POP_FINALLY`. Changed the behavior of :opcode:`END_FINALLY` and
  :opcode:`WITH_CLEANUP_START`.

- bpo-32285: New function unicodedata.is_normalized, which can check whether
  a string is in a specific normal form.

- bpo-10544: Yield expressions are now disallowed in comprehensions and
  generator expressions except the expression for the outermost iterable.

- bpo-32117: Iterable unpacking is now allowed without parentheses in yield
  and return statements, e.g. ``yield 1, 2, 3, *rest``. Thanks to David
  Cuthbert for the change and Jordan Chapman for added tests.

- bpo-31902: Fix the ``col_offset`` attribute for ast nodes
  ``ast.AsyncFor``, ``ast.AsyncFunctionDef``, and ``ast.AsyncWith``.
  Previously, ``col_offset`` pointed to the keyword after ``async``.

- bpo-25862: Fix assertion failures in the ``tell()`` method of
  ``io.TextIOWrapper``. Patch by Zackery Spytz.

- bpo-21983: Fix a crash in `ctypes.cast()` in case the type argument is a
  ctypes structured data type. Patch by Eryk Sun and Oren Milman.

- bpo-31577: Fix a crash in `os.utime()` in case of a bad ns argument. Patch
  by Oren Milman.

- bpo-29832: Remove references to 'getsockaddrarg' from various socket error
  messages. Patch by Oren Milman.

Library
-------

- bpo-35845: Add 'order' parameter to memoryview.tobytes().

- bpo-35864: The _asdict() method for collections.namedtuple now returns a
  regular dict instead of an OrderedDict.

- bpo-35537: An ExitStack is now used internally within subprocess.POpen to
  clean up pipe file handles. No behavior change in normal operation. But if
  closing one handle were ever to cause an exception, the others will now be
  closed instead of leaked.  (patch by Giampaolo Rodola)

- bpo-35847: RISC-V needed the CTYPES_PASS_BY_REF_HACK.  Fixes ctypes
  Structure test_pass_by_value.

- bpo-35813: Shared memory submodule added to multiprocessing to avoid need
  for serialization between processes

- bpo-35780: Fix lru_cache() errors arising in recursive, reentrant, or
  multi-threaded code. These errors could result in orphan links and in the
  cache being trapped in a state with fewer than the specified maximum
  number of links. Fix handling of negative maxsize which should have been
  treated as zero. Fix errors in toggling the "full" status flag. Fix
  misordering of links when errors are encountered.  Sync-up the C code and
  pure Python code for the space saving path in functions with a single
  positional argument. In this common case, the space overhead of an lru
  cache entry is reduced by almost half.  Fix counting of cache misses. In
  error cases, the miss count was out of sync with the actual number of
  times the underlying user function was called.

- bpo-35537: :func:`os.posix_spawn` and :func:`os.posix_spawnp` now have a
  *setsid* parameter.

- bpo-23846: :class:`asyncio.ProactorEventLoop` now catches and logs send
  errors when the self-pipe is full.

- bpo-34323: :mod:`asyncio`: Enhance ``IocpProactor.close()`` log: wait 1
  second before the first log, then log every second. Log also the number of
  seconds since ``close()`` was called.

- bpo-35674: Add a new :func:`os.posix_spawnp` function. Patch by Joannah
  Nanjekye.

- bpo-35733: ``ast.Constant(boolean)`` no longer an instance of
  :class:`ast.Num`.  Patch by Anthony Sottile.

- bpo-35726: QueueHandler.prepare() now makes a copy of the record before
  modifying and enqueueing it, to avoid affecting other handlers in the
  chain.

- bpo-35719: Sped up multi-argument :mod:`math` functions atan2(),
  copysign(), remainder() and hypot() by 1.3--2.5 times.

- bpo-35717: Fix KeyError exception raised when using enums and compile.
  Patch contributed by Rémi Lapeyre.

- bpo-35699: Fixed detection of Visual Studio Build Tools 2017 in distutils

- bpo-32710: Fix memory leaks in asyncio ProactorEventLoop on overlapped
  operation failure.

- bpo-35702: The :data:`time.CLOCK_UPTIME_RAW` constant is now available for
  macOS 10.12.

- bpo-32710: Fix a memory leak in asyncio in the ProactorEventLoop when
  ``ReadFile()`` or ``WSASend()`` overlapped operation fail immediately:
  release the internal buffer.

- bpo-35682: Fix ``asyncio.ProactorEventLoop.sendfile()``: don't attempt to
  set the result of an internal future if it's already done.

- bpo-35283: Add a deprecated warning for the
  :meth:`threading.Thread.isAlive` method. Patch by Dong-hee Na.

- bpo-35664: Improve operator.itemgetter() performance by 33% with optimized
  argument handling and with adding a fast path for the common case of a
  single non-negative integer index into a tuple (which is the typical use
  case in the standard library).

- bpo-35643: Fixed a SyntaxWarning: invalid escape sequence in
  Modules/_sha3/cleanup.py. Patch by Mickaël Schoentgen.

- bpo-35619: Improved support of custom data descriptors in :func:`help` and
  :mod:`pydoc`.

- bpo-28503: The `crypt` module now internally uses the `crypt_r()` library
  function instead of `crypt()` when available.

- bpo-35614: Fixed help() on metaclasses. Patch by Sanyam Khurana.

- bpo-35568: Expose ``raise(signum)`` as `raise_signal`

- bpo-35588: The floor division and modulo operations and the :func:`divmod`
  function on :class:`fractions.Fraction` types are 2--4x faster. Patch by
  Stefan Behnel.

- bpo-35585: Speed-up building enums by value, e.g. http.HTTPStatus(200).

- bpo-30561: random.gammavariate(1.0, beta) now computes the same result as
  random.expovariate(1.0 / beta).  This synchronizes the two algorithms and
  eliminates some idiosyncrasies in the old implementation.  It does however
  produce a difference stream of random variables than it used to.

- bpo-35537: The :mod:`subprocess` module can now use the
  :func:`os.posix_spawn` function in some cases for better performance.

- bpo-35526: Delaying the 'joke' of barry_as_FLUFL.mandatory to Python
  version 4.0

- bpo-35523: Remove :mod:`ctypes` callback workaround: no longer create a
  callback at startup. Avoid SELinux alert on ``import ctypes`` and ``import
  uuid``.

- bpo-31784: :func:`uuid.uuid1` now calls :func:`time.time_ns` rather than
  ``int(time.time() * 1e9)``.

- bpo-35513: :class:`~unittest.runner.TextTestRunner` of
  :mod:`unittest.runner` now uses :func:`time.perf_counter` rather than
  :func:`time.time` to measure the execution time of a test:
  :func:`time.time` can go backwards, whereas :func:`time.perf_counter` is
  monotonic.

- bpo-35502: Fixed reference leaks in
  :class:`xml.etree.ElementTree.TreeBuilder` in case of unfinished building
  of the tree (in particular when an error was raised during parsing XML).

- bpo-35348: Make :func:`platform.architecture` parsing of ``file`` command
  output more reliable: add the ``-b`` option to the ``file`` command to
  omit the filename, force the usage of the C locale, and search also the
  "shared object" pattern.

- bpo-35491: :mod:`multiprocessing`: Add ``Pool.__repr__()`` and enhance
  ``BaseProcess.__repr__()`` (add pid and parent pid) to ease debugging.
  Pool state constant values are now strings instead of integers, for
  example ``RUN`` value becomes ``'RUN'`` instead of ``0``.

- bpo-35477: :meth:`multiprocessing.Pool.__enter__` now fails if the pool is
  not running: ``with pool:`` fails if used more than once.

- bpo-31446: Copy command line that was passed to CreateProcessW since this
  function can change the content of the input buffer.

- bpo-35471: Python 2.4 dropped MacOS 9 support. The macpath module was
  deprecated in Python 3.7. The module is now removed.

- bpo-23057: Unblock Proactor event loop when keyboard interrupt is received
  on Windows

- bpo-35052: Fix xml.dom.minidom cloneNode() on a document with an entity:
  pass the correct arguments to the user data handler of an entity.

- bpo-20239: Allow repeated assignment deletion of
  :class:`unittest.mock.Mock` attributes. Patch by Pablo Galindo.

- bpo-17185: Set ``__signature__`` on mock for :mod:`inspect` to get
  signature. Patch by Karthikeyan Singaravelan.

- bpo-35445: Memory errors during creating posix.environ no longer ignored.

- bpo-35415: Validate fileno= argument to socket.socket().

- bpo-35424: :class:`multiprocessing.Pool` destructor now emits
  :exc:`ResourceWarning` if the pool is still running.

- bpo-35330: When a :class:`Mock` instance was used to wrap an object, if
  `side_effect` is used in one of the mocks of it methods, don't call the
  original implementation and return the result of using the side effect the
  same way that it is done with return_value.

- bpo-35346: Drop Mac OS 9 and Rhapsody support from the :mod:`platform`
  module. Rhapsody last release was in 2000. Mac OS 9 last release was in
  2001.

- bpo-10496: :func:`~distutils.utils.check_environ` of
  :mod:`distutils.utils` now catches :exc:`KeyError` on calling
  :func:`pwd.getpwuid`: don't create the ``HOME`` environment variable in
  this case.

- bpo-10496: :func:`posixpath.expanduser` now returns the input *path*
  unchanged if the ``HOME`` environment variable is not set and the current
  user has no home directory (if the current user identifier doesn't exist
  in the password database). This change fix the :mod:`site` module if the
  current user doesn't exist in the password database (if the user has no
  home directory).

- bpo-35389: :func:`platform.libc_ver` now uses
  ``os.confstr('CS_GNU_LIBC_VERSION')`` if available and the *executable*
  parameter is not set.

- bpo-35394: Add empty slots to asyncio abstract protocols.

- bpo-35310: Fix a bug in :func:`select.select` where, in some cases, the
  file descriptor sequences were returned unmodified after a signal
  interruption, even though the file descriptors might not be ready yet.
  :func:`select.select` will now always return empty lists if a timeout has
  occurred.  Patch by Oran Avraham.

- bpo-35380: Enable TCP_NODELAY on Windows for proactor asyncio event loop.

- bpo-35341: Add generic version of ``collections.OrderedDict`` to the
  ``typing`` module. Patch by Ismo Toijala.

- bpo-35371: Fixed possible crash in ``os.utime()`` on Windows when pass
  incorrect arguments.

- bpo-35346: :func:`platform.uname` now redirects ``stderr`` to
  :data:`os.devnull` when running external programs like ``cmd /c ver``.

- bpo-35066: Previously, calling the strftime() method on a datetime object
  with a trailing '%' in the format string would result in an exception.
  However, this only occurred when the datetime C module was being used; the
  python implementation did not match this behavior. Datetime is now PEP-399
  compliant, and will not throw an exception on a trailing '%'.

- bpo-35345: The function `platform.popen` has been removed, it was
  deprecated since Python 3.3: use :func:`os.popen` instead.

- bpo-35344: On macOS, :func:`platform.platform` now uses
  :func:`platform.mac_ver`, if it returns a non-empty release string, to get
  the macOS version rather than the darwin version.

- bpo-35312: Make ``lib2to3.pgen2.parse.ParseError`` round-trip pickle-able.
  Patch by Anthony Sottile.

- bpo-35308: Fix regression in ``webbrowser`` where default browsers may be
  preferred over browsers in the ``BROWSER`` environment variable.

- bpo-24746: Avoid stripping trailing whitespace in doctest fancy diff.
  Original patch by R. David Murray & Jairo Trad. Enhanced by Sanyam
  Khurana.

- bpo-28604: :func:`locale.localeconv` now sets temporarily the ``LC_CTYPE``
  locale to the ``LC_MONETARY`` locale if the two locales are different and
  monetary strings are non-ASCII. This temporary change affects other
  threads.

- bpo-35277: Update ensurepip to install pip 18.1 and setuptools 40.6.2.

- bpo-24209: Adds IPv6 support when invoking http.server directly.

- bpo-35226: Recursively check arguments when testing for equality of
  :class:`unittest.mock.call` objects and add note that tracking of
  parameters used to create ancestors of mocks in ``mock_calls`` is not
  possible.

- bpo-29564: The warnings module now suggests to enable tracemalloc if the
  source is specified, the tracemalloc module is available, but tracemalloc
  is not tracing memory allocations.

- bpo-35189: Modify the following fnctl function to retry if interrupted by
  a signal (EINTR): flock, lockf, fnctl

- bpo-30064: Use add_done_callback() in sock_* asyncio API to unsubscribe
  reader/writer early on calcellation.

- bpo-35186: Removed the "built with" comment added when ``setup.py upload``
  is used with either ``bdist_rpm`` or ``bdist_dumb``.

- bpo-35152: Allow sending more than 2 GB at once on a multiprocessing
  connection on non-Windows systems.

- bpo-35062: Fix incorrect parsing of
  :class:`_io.IncrementalNewlineDecoder`'s *translate* argument.

- bpo-35065: Remove `StreamReaderProtocol._untrack_reader`. The call to
  `_untrack_reader` is currently performed too soon, causing the protocol to
  forget about the reader before `connection_lost` can run and feed the EOF
  to the reader.

- bpo-34160: ElementTree and minidom now preserve the attribute order
  specified by the user.

- bpo-35079: Improve difflib.SequenceManager.get_matching_blocks doc by
  adding 'non-overlapping' and changing '!=' to '<'.

- bpo-33710: Deprecated ``l*gettext()`` functions and methods in the
  :mod:`gettext` module. They return encoded bytes instead of Unicode
  strings and are artifacts from Python 2 times. Also deprecated functions
  and methods related to setting the charset for ``l*gettext()`` functions
  and methods.

- bpo-35017: :meth:`socketserver.BaseServer.serve_forever` now exits
  immediately if it's :meth:`~socketserver.BaseServer.shutdown` method is
  called while it is polling for new events.

- bpo-35024: `importlib` no longer logs `wrote <bytecode path>` redundantly
  after `(created|could not create) <bytecode path>` is already logged.
  Patch by Quentin Agren.

- bpo-35047: ``unittest.mock`` now includes mock calls in exception messages
  if ``assert_not_called``, ``assert_called_once``, or
  ``assert_called_once_with`` fails. Patch by Petter Strandmark.

- bpo-31047: Fix ``ntpath.abspath`` regression where it didn't remove a
  trailing separator on Windows. Patch by Tim Graham.

- bpo-35053: tracemalloc now tries to update the traceback when an object is
  reused from a "free list" (optimization for faster object creation, used
  by the builtin list type for example).

- bpo-31553: Add the --json-lines option to json.tool. Patch by hongweipeng.

- bpo-34794: Fixed a leak in Tkinter when pass the Python wrapper around
  Tcl_Obj back to Tcl/Tk.

- bpo-34909: Enum: fix grandchildren subclassing when parent mixed with
  concrete data types.

- bpo-35022: :class:`unittest.mock.MagicMock` now supports the
  ``__fspath__`` method (from :class:`os.PathLike`).

- bpo-35008: Fixed references leaks when call the ``__setstate__()`` method
  of :class:`xml.etree.ElementTree.Element` in the C implementation for
  already initialized element.

- bpo-23420: Verify the value for the parameter '-s' of the cProfile CLI.
  Patch by Robert Kuska

- bpo-33947: dataclasses now handle recursive reprs without raising
  RecursionError.

- bpo-34890: Make :func:`inspect.iscoroutinefunction`,
  :func:`inspect.isgeneratorfunction` and :func:`inspect.isasyncgenfunction`
  work with :func:`functools.partial`. Patch by Pablo Galindo.

- bpo-34521: Use :func:`socket.CMSG_SPACE` to calculate ancillary data size
  instead of :func:`socket.CMSG_LEN` in
  :func:`multiprocessing.reduction.recvfds` as :rfc:`3542` requires the use
  of the former for portable applications.

- bpo-31522: The `mailbox.mbox.get_string` function *from_* parameter can
  now successfully be set to a non-default value.

- bpo-34970: Protect tasks weak set manipulation in ``asyncio.all_tasks()``

- bpo-34969: gzip: Add --fast, --best on the gzip CLI, these parameters will
  be used for the fast compression method (quick) or the best method
  compress (slower, but smaller file). Also, change the default compression
  level to 6 (tradeoff).

- bpo-16965: The :term:`2to3` :2to3fixer:`execfile` fixer now opens the file
  with mode ``'rb'``.  Patch by Zackery Spytz.

- bpo-34966: :mod:`pydoc` now supports aliases not only to methods defined
  in the end class, but also to inherited methods.  The docstring is not
  duplicated for aliases.

- bpo-34926: :meth:`mimetypes.MimeTypes.guess_type` now accepts
  :term:`path-like object` in addition to url strings. Patch by Mayank
  Asthana.

- bpo-23831: Add ``moveto()`` method to the ``tkinter.Canvas`` widget. Patch
  by Juliette Monsel.

- bpo-34941: Methods ``find()``, ``findtext()`` and ``findall()`` of the
  ``Element`` class in the :mod:`xml.etree.ElementTree` module are now able
  to find children which are instances of ``Element`` subclasses.

- bpo-32680: :class:`smtplib.SMTP` objects now always have a `sock`
  attribute present

- bpo-34769: Fix for async generators not finalizing when event loop is in
  debug mode and garbage collector runs in another thread.

- bpo-34936: Fix ``TclError`` in ``tkinter.Spinbox.selection_element()``.
  Patch by Juliette Monsel.

- bpo-34829: Add methods ``selection_from``, ``selection_range``,
  ``selection_present`` and ``selection_to`` to the ``tkinter.Spinbox`` for
  consistency with the ``tkinter.Entry`` widget. Patch by Juliette Monsel.

- bpo-34911: Added *secure_protocols* argument to
  *http.cookiejar.DefaultCookiePolicy* to allow for tweaking of protocols
  and also to add support by default for *wss*, the secure websocket
  protocol.

- bpo-34922: Fixed integer overflow in the :meth:`~hashlib.shake.digest()`
  and :meth:`~hashlib.shake.hexdigest()` methods for the SHAKE algorithm in
  the :mod:`hashlib` module.

- bpo-34925: 25% speedup in argument parsing for the functions in the bisect
  module.

- bpo-34900: Fixed :meth:`unittest.TestCase.debug` when used to call test
  methods with subtests.  Patch by Bruno Oliveira.

- bpo-34844: logging.Formatter enhancement - Ensure styles and fmt matches
  in logging.Formatter - Added validate method in each format style class:
  StrFormatStyle, PercentStyle, StringTemplateStyle. - This method is called
  in the constructor of logging.Formatter class - Also re-raise the KeyError
  in the format method of each style class, so it would a bit clear that
  it's an error with the invalid format fields.

- bpo-34897: Adjust test.support.missing_compiler_executable check so that a
  nominal command name of "" is ignored. Patch by Michael Felt.

- bpo-34871: Fix inspect module polluted ``sys.modules`` when parsing
  ``__text_signature__`` of callable.

- bpo-34898: Add `mtime` argument to `gzip.compress` for reproducible
  output. Patch by Guo Ci Teo.

- bpo-28441: On Cygwin and MinGW, ensure that ``sys.executable`` always
  includes the full filename in the path, including the ``.exe`` suffix
  (unless it is a symbolic link).

- bpo-34866: Adding ``max_num_fields`` to ``cgi.FieldStorage`` to make DOS
  attacks harder by limiting the number of ``MiniFieldStorage`` objects
  created by ``FieldStorage``.

- bpo-34711: http.server ensures it reports HTTPStatus.NOT_FOUND when the
  local path ends with "/" and is not a directory, even if the underlying OS
  (e.g. AIX) accepts such paths as a valid file reference. Patch by Michael
  Felt.

- bpo-34872: Fix self-cancellation in C implementation of asyncio.Task

- bpo-34849: Don't log waiting for ``selector.select`` in asyncio loop
  iteration. The waiting is pretty normal for any asyncio program, logging
  its time just adds a noise to logs without any useful information
  provided.

- bpo-34022: The :envvar:`SOURCE_DATE_EPOCH` environment variable no longer
  overrides the value of the *invalidation_mode* argument to
  :func:`py_compile.compile`, and determines its default value instead.

- bpo-34819: Use a monotonic clock to compute timeouts in
  :meth:`Executor.map` and :func:`as_completed`, in order to prevent
  timeouts from deviating when the system clock is adjusted.

- bpo-34758: Add .wasm -> application/wasm to list of recognized file types
  and content type headers

- bpo-34789: :func:`xml.sax.make_parser` now accepts any iterable as its
  *parser_list* argument.  Patch by Andrés Delfino.

- bpo-34334: In :class:`QueueHandler`, clear `exc_text` from
  :class:`LogRecord` to prevent traceback from being written twice.

- bpo-34687: On Windows, asyncio now uses ProactorEventLoop, instead of
  SelectorEventLoop, by default.

- bpo-5950: Support reading zip files with archive comments in
  :mod:`zipimport`.

- bpo-32892: The parser now represents all constants as
  :class:`ast.Constant` instead of using specific constant AST types
  (``Num``, ``Str``, ``Bytes``, ``NameConstant`` and ``Ellipsis``). These
  classes are considered deprecated and will be removed in future Python
  versions.

- bpo-34728: Add deprecation warning when `loop` is used in methods:
  `asyncio.sleep`, `asyncio.wait` and `asyncio.wait_for`.

- bpo-34738: ZIP files created by :mod:`distutils` will now include entries
  for directories.

- bpo-34659: Add an optional *initial* argument to itertools.accumulate().

- bpo-29577: Support multiple mixin classes when creating Enums.

- bpo-34670: Add SSLContext.post_handshake_auth and
  SSLSocket.verify_client_post_handshake for TLS 1.3's post handshake
  authentication feature.

- bpo-32718: The Activate.ps1 script from venv works with PowerShell Core
  6.1 and is now available under all operating systems.

- bpo-31177: Fix bug that prevented using :meth:`reset_mock
  <unittest.mock.Mock.reset_mock>` on mock instances with deleted attributes

- bpo-34672: Add a workaround, so the ``'Z'`` :func:`time.strftime`
  specifier on the musl C library can work in some cases.

- bpo-34666: Implement ``asyncio.StreamWriter.awrite`` and
  ``asyncio.StreamWriter.aclose()`` coroutines.  Methods are needed for
  providing a consistent stream API with control flow switched on by
  default.

- bpo-6721: Acquire the logging module's commonly used internal locks while
  fork()ing to avoid deadlocks in the child process.

- bpo-34658: Fix a rare interpreter unhandled exception state SystemError
  only seen when using subprocess with a preexec_fn while an after_parent
  handler has been registered with os.register_at_fork and the fork system
  call fails.

- bpo-34652: Ensure :func:`os.lchmod` is never defined on Linux.

- bpo-34638: Store a weak reference to stream reader to break strong
  references loop between reader and protocol.  It allows to detect and
  close the socket if the stream is deleted (garbage collected) without
  ``close()`` call.

- bpo-34536: `Enum._missing_`:  raise `ValueError` if None returned and
  `TypeError` if non-member is returned.

- bpo-34636: Speed up re scanning of many non-matching characters for \s \w
  and \d within bytes objects. (microoptimization)

- bpo-24412: Add :func:`~unittest.addModuleCleanup()` and
  :meth:`~unittest.TestCase.addClassCleanup()` to unittest to support
  cleanups for :func:`~unittest.setUpModule()` and
  :meth:`~unittest.TestCase.setUpClass()`. Patch by Lisa Roach.

- bpo-34630: Don't log SSL certificate errors in asyncio code (connection
  error logging is skipped already).

- bpo-32490: Prevent filename duplication in :mod:`subprocess` exception
  messages.  Patch by Zackery Spytz.

- bpo-34363: dataclasses.asdict() and .astuple() now handle namedtuples
  correctly.

- bpo-34625: Update vendorized expat library version to 2.2.6.

- bpo-32270: The subprocess module no longer mistakenly closes redirected
  fds even when they were in pass_fds when outside of the default {0, 1, 2}
  set.

- bpo-34622: Create a dedicated ``asyncio.CancelledError``,
  ``asyncio.InvalidStateError`` and ``asyncio.TimeoutError`` exception
  classes.  Inherit them from corresponding exceptions from
  ``concurrent.futures`` package. Extract ``asyncio`` exceptions into a
  separate file.

- bpo-34610: Fixed iterator of :class:`multiprocessing.managers.DictProxy`.

- bpo-34421: Fix distutils logging for non-ASCII strings.  This caused
  installation issues on Windows.

- bpo-34604: Fix possible mojibake in the error message of `pwd.getpwnam`
  and `grp.getgrnam` using string representation because of invisible
  characters or trailing whitespaces. Patch by William Grzybowski.

- bpo-30977: Make uuid.UUID use ``__slots__`` to reduce its memory
  footprint. Based on original patch by Wouter Bolsterlee.

- bpo-34574: OrderedDict iterators are not exhausted during pickling
  anymore. Patch by Sergey Fedoseev.

- bpo-8110: Refactored :mod:`subprocess` to check for Windows-specific
  modules rather than ``sys.platform == 'win32'``.

- bpo-34530: ``distutils.spawn.find_executable()`` now falls back on
  :data:`os.defpath` if the ``PATH`` environment variable is not set.

- bpo-34563: On Windows, fix multiprocessing.Connection for very large read:
  fix _winapi.PeekNamedPipe() and _winapi.ReadFile() for read larger than
  INT_MAX (usually 2^31-1).

- bpo-34558: Correct typo in Lib/ctypes/_aix.py

- bpo-34282: Move ``Enum._convert`` to ``EnumMeta._convert_`` and fix enum
  members getting shadowed by parent attributes.

- bpo-22872: When the queue is closed, :exc:`ValueError` is now raised by
  :meth:`multiprocessing.Queue.put` and :meth:`multiprocessing.Queue.get`
  instead of :exc:`AssertionError` and :exc:`OSError`, respectively. Patch
  by Zackery Spytz.

- bpo-34515: Fix parsing non-ASCII identifiers in
  :mod:`lib2to3.pgen2.tokenize` (PEP 3131).

- bpo-13312: Avoids a possible integer underflow (undefined behavior) in the
  time module's year handling code when passed a very low negative year
  value.

- bpo-34472: Improved compatibility for streamed files in :mod:`zipfile`.
  Previously an optional signature was not being written and certain ZIP
  applications were not supported. Patch by Silas Sewell.

- bpo-34454: Fix the .fromisoformat() methods of datetime types crashing
  when given unicode with non-UTF-8-encodable code points.  Specifically,
  datetime.fromisoformat() now accepts surrogate unicode code points used as
  the separator. Report and tests by Alexey Izbyshev, patch by Paul Ganssle.

- bpo-6700: Fix inspect.getsourcelines for module level frames/tracebacks.
  Patch by Vladimir Matveev.

- bpo-34171: Running the :mod:`trace` module no longer creates the
  ``trace.cover`` file.

- bpo-34441: Fix crash when an ``ABC``-derived class with invalid
  ``__subclasses__`` is passed as the second argument to
  :func:`issubclass()`. Patch by Alexey Izbyshev.

- bpo-34427: Fix infinite loop in ``a.extend(a)`` for ``MutableSequence``
  subclasses.

- bpo-34412: Make :func:`signal.strsignal` work on HP-UX. Patch by Michael
  Osipov.

- bpo-20849: shutil.copytree now accepts a new ``dirs_exist_ok`` keyword
  argument. Patch by Josh Bronson.

- bpo-31715: Associate ``.mjs`` file extension with
  ``application/javascript`` MIME Type.

- bpo-34384: :func:`os.readlink` now accepts :term:`path-like <path-like
  object>` and :class:`bytes` objects on Windows.

- bpo-22602: The UTF-7 decoder now raises :exc:`UnicodeDecodeError` for
  ill-formed sequences starting with "+" (as specified in RFC 2152).  Patch
  by Zackery Spytz.

- bpo-2122: The :meth:`mmap.flush() <mmap.mmap.flush>` method now returns
  ``None`` on success, raises an exception on error under all platforms.

- bpo-34341: Appending to the ZIP archive with the ZIP64 extension no longer
  grows the size of extra fields of existing entries.

- bpo-34333: Fix %-formatting in :meth:`pathlib.PurePath.with_suffix` when
  formatting an error message.

- bpo-18540: The :class:`imaplib.IMAP4` and :class:`imaplib.IMAP4_SSL`
  classes now resolve to the local host IP correctly when the default value
  of *host* parameter (``''``) is used.

- bpo-26502: Implement ``traceback.FrameSummary.__len__()`` method to
  preserve compatibility with the old tuple API.

- bpo-34318: :func:`~unittest.TestCase.assertRaises`,
  :func:`~unittest.TestCase.assertRaisesRegex`,
  :func:`~unittest.TestCase.assertWarns` and
  :func:`~unittest.TestCase.assertWarnsRegex` no longer success if the
  passed callable is None. They no longer ignore unknown keyword arguments
  in the context manager mode. A DeprecationWarning was raised in these
  cases since Python 3.5.

- bpo-9372: Deprecate :meth:`__getitem__` methods of
  :class:`xml.dom.pulldom.DOMEventStream`, :class:`wsgiref.util.FileWrapper`
  and :class:`fileinput.FileInput`.

- bpo-33613: Fix a race condition in ``multiprocessing.semaphore_tracker``
  when the tracker receives SIGINT before it can register signal handlers
  for ignoring it.

- bpo-34248: Report filename in the exception raised when the database file
  cannot be opened by :func:`dbm.gnu.open` and :func:`dbm.ndbm.open` due to
  OS-related error. Patch by Zsolt Cserna.

- bpo-33089: Add math.dist() to compute the Euclidean distance between two
  points.

- bpo-34246: :meth:`smtplib.SMTP.send_message` no longer modifies the
  content of the *mail_options* argument. Patch by Pablo S. Blum de Aguiar.

- bpo-31047: Fix ``ntpath.abspath`` for invalid paths on windows. Patch by
  Franz Woellert.

- bpo-32321: Add pure Python fallback for functools.reduce. Patch by Robert
  Wright.

- bpo-34270: The default asyncio task class now always has a name which can
  be get or set using two new methods (:meth:`~asyncio.Task.get_name()` and
  :meth:`~asyncio.Task.set_name`) and is visible in the :func:`repr` output.
  An initial name can also be set using the new ``name`` keyword argument to
  :func:`asyncio.create_task` or the
  :meth:`~asyncio.AbstractEventLoop.create_task` method of the event loop.
  If no initial name is set, the default Task implementation generates a
  name like ``Task-1`` using a monotonic counter.

- bpo-34263: asyncio's event loop will not pass timeouts longer than one day
  to epoll/select etc.

- bpo-34035: Fix several AttributeError in zipfile seek() methods. Patch by
  Mickaël Schoentgen.

- bpo-32215: Fix performance regression in :mod:`sqlite3` when a DML
  statement appeared in a different line than the rest of the SQL query.

- bpo-34075: Deprecate passing non-ThreadPoolExecutor instances to
  :meth:`AbstractEventLoop.set_default_executor`.

- bpo-34251: Restore ``msilib.Win64`` to preserve backwards compatibility
  since it's already used by :mod:`distutils`' ``bdist_msi`` command.

- bpo-19891: Ignore errors caused by missing / non-writable homedir while
  writing history during exit of an interactive session.  Patch by Anthony
  Sottile.

- bpo-33089: Enhanced math.hypot() to support more than two dimensions.

- bpo-34228: tracemalloc: PYTHONTRACEMALLOC=0 environment variable and -X
  tracemalloc=0 command line option are now allowed to disable explicitly
  tracemalloc at startup.

- bpo-13041: Use :func:`shutil.get_terminal_size` to calculate the terminal
  width correctly in the ``argparse.HelpFormatter`` class.  Initial patch by
  Zbyszek Jędrzejewski-Szmek.

- bpo-34213: Allow frozen dataclasses to have a field named "object".
  Previously this conflicted with an internal use of "object".

- bpo-34052: :meth:`sqlite3.Connection.create_aggregate`,
  :meth:`sqlite3.Connection.create_function`,
  :meth:`sqlite3.Connection.set_authorizer`,
  :meth:`sqlite3.Connection.set_progress_handler` methods raises TypeError
  when unhashable objects are passed as callable. These methods now don't
  pass such objects to SQLite API. Previous behavior could lead to
  segfaults. Patch by Sergey Fedoseev.

- bpo-34197: Attributes *skipinitialspace*, *doublequote* and *strict* of
  the *dialect* attribute of the :mod:`csv` reader are now :class:`bool`
  instances instead of integers 0 or 1.

- bpo-32788: Errors other than :exc:`TypeError` raised in methods
  ``__adapt__()`` and ``__conform__()`` in the :mod:`sqlite3` module are now
  propagated to the user.

- bpo-21446: The :2to3fixer:`reload` fixer now uses :func:`importlib.reload`
  instead of deprecated :func:`imp.reload`.

- bpo-940286: pydoc's ``Helper.showtopic()`` method now prints the cross
  references of a topic correctly.

- bpo-34164: :func:`base64.b32decode` could raise UnboundLocalError or
  OverflowError for incorrect padding.  Now it always raises
  :exc:`base64.Error` in these cases.

- bpo-33729: Fixed issues with arguments parsing in :mod:`hashlib`.

- bpo-34097: ZipFile can zip files older than 1980-01-01 and newer than
  2107-12-31 using a new ``strict_timestamps`` parameter at the cost of
  setting the timestamp to the limit.

- bpo-34108: Remove extraneous CR in 2to3 refactor.

- bpo-34070: Make sure to only check if the handle is a tty, when opening a
  file with ``buffering=-1``.

- bpo-27494: Reverted :issue:`27494`. 2to3 rejects now a trailing comma in
  generator expressions.

- bpo-33967: functools.singledispatch now raises TypeError instead of
  IndexError when no positional arguments are passed.

- bpo-34041: Add the parameter *deterministic* to the
  :meth:`sqlite3.Connection.create_function` method. Patch by Sergey
  Fedoseev.

- bpo-34056: Ensure the loader shim created by ``imp.load_module`` always
  returns bytes from its ``get_data()`` function. This fixes using
  ``imp.load_module`` with :pep:`552` hash-based pycs.

- bpo-34054: The multiprocessing module now uses the monotonic clock
  :func:`time.monotonic` instead of the system clock :func:`time.time` to
  implement timeout.

- bpo-34043: Optimize tarfile uncompress performance about 15% when gzip is
  used.

- bpo-34044: ``subprocess.Popen`` now copies the *startupinfo* argument to
  leave it unchanged: it will modify the copy, so that the same
  ``STARTUPINFO`` object can be used multiple times.

- bpo-34010: Fixed a performance regression for reading streams with
  tarfile. The buffered read should use a list, instead of appending to a
  bytes object.

- bpo-34019: webbrowser: Correct the arguments passed to Opera Browser when
  opening a new URL using the ``webbrowser`` module. Patch by Bumsik Kim.

- bpo-34003: csv.DictReader now creates dicts instead of OrderedDicts. Patch
  by Michael Selik.

- bpo-33978: Closed existing logging handlers before reconfiguration via
  fileConfig and dictConfig. Patch by Karthikeyan Singaravelan.

- bpo-14117: Make minor tweaks to turtledemo. The 'wikipedia' example is now
  'rosette', describing what it draws.  The 'penrose' print output is
  reduced. The'1024' output of 'tree' is eliminated.

- bpo-33974: Fixed passing lists and tuples of strings containing special
  characters ``"``, ``\``, ``{``, ``}`` and ``\n`` as options to
  :mod:`~tkinter.ttk` widgets.

- bpo-27500: Fix getaddrinfo to resolve IPv6 addresses correctly.

- bpo-24567: Improve random.choices() to handle subnormal input weights that
  could occasionally trigger an IndexError.

- bpo-33871: Fixed integer overflow in :func:`os.readv`, :func:`os.writev`,
  :func:`os.preadv` and :func:`os.pwritev` and in :func:`os.sendfile` with
  *headers* or *trailers* arguments (on BSD-based OSes and macOS).

- bpo-25007: Add :func:`copy.copy` and :func:`copy.deepcopy` support to zlib
  compressors and decompressors.  Patch by Zackery Spytz.

- bpo-33929: multiprocessing: Fix a race condition in Popen of
  multiprocessing.popen_spawn_win32. The child process now duplicates the
  read end of pipe instead of "stealing" it. Previously, the read end of
  pipe was "stolen" by the child process, but it leaked a handle if the
  child process had been terminated before it could steal the handle from
  the parent process.

- bpo-33899: Tokenize module now implicitly emits a NEWLINE when provided
  with input that does not have a trailing new line.  This behavior now
  matches what the C tokenizer does internally.  Contributed by Ammar Askar.

- bpo-33897: Added a 'force' keyword argument to logging.basicConfig().

- bpo-33695: :func:`shutil.copytree` uses :func:`os.scandir` function and
  all copy functions depending from it use cached :func:`os.stat` values.
  The speedup for copying a directory with 8000 files is around +9% on
  Linux, +20% on Windows and + 30% on a Windows SMB share. Also the number
  of :func:`os.stat` syscalls is reduced by 38% making
  :func:`shutil.copytree` especially faster on network filesystems.
  (Contributed by Giampaolo Rodola' in :issue:`33695`.)

- bpo-33916: bz2 and lzma: When Decompressor.__init__() is called twice,
  free the old lock to not leak memory.

- bpo-32568: Make select.epoll() and its documentation consistent regarding
  *sizehint* and *flags*.

- bpo-33833: Fixed bug in asyncio where ProactorSocketTransport logs
  AssertionError if force closed during write.

- bpo-33663: Convert content length to string before putting to header.

- bpo-33721: :mod:`os.path` functions that return a boolean result like
  :func:`~os.path.exists`, :func:`~os.path.lexists`, :func:`~os.path.isdir`,
  :func:`~os.path.isfile`, :func:`~os.path.islink`, and
  :func:`~os.path.ismount`, and :mod:`pathlib.Path` methods that return a
  boolean result like :meth:`~pathlib.Path.exists()`,
  :meth:`~pathlib.Path.is_dir()`, :meth:`~pathlib.Path.is_file()`,
  :meth:`~pathlib.Path.is_mount()`, :meth:`~pathlib.Path.is_symlink()`,
  :meth:`~pathlib.Path.is_block_device()`,
  :meth:`~pathlib.Path.is_char_device()`, :meth:`~pathlib.Path.is_fifo()`,
  :meth:`~pathlib.Path.is_socket()` now return ``False`` instead of raising
  :exc:`ValueError` or its subclasses :exc:`UnicodeEncodeError` and
  :exc:`UnicodeDecodeError` for paths that contain characters or bytes
  unrepresentable at the OS level.

- bpo-26544: Fixed implementation of :func:`platform.libc_ver`. It almost
  always returned version '2.9' for glibc.

- bpo-33843: Remove deprecated ``cgi.escape``, ``cgi.parse_qs`` and
  ``cgi.parse_qsl``.

- bpo-33842: Remove ``tarfile.filemode`` which is deprecated since Python
  3.3.

- bpo-30167: Prevent site.main() exception if PYTHONSTARTUP is set. Patch by
  Steve Weber.

- bpo-33805: Improve error message of dataclasses.replace() when an InitVar
  is not specified

- bpo-33687: Fix the call to ``os.chmod()`` for ``uu.decode()`` if a mode is
  given or decoded. Patch by Timo Furrer.

- bpo-33812: Datetime instance d with non-None tzinfo, but with
  d.tzinfo.utcoffset(d) returning None is now treated as naive by the
  astimezone() method.

- bpo-32108: In configparser, don't clear section when it is assigned to
  itself.

- bpo-27397: Make email module properly handle invalid-length base64
  strings.

- bpo-33578: Implement multibyte encoder/decoder state methods

- bpo-30805: Avoid race condition with debug logging

- bpo-33476: Fix _header_value_parser.py when address group is missing final
  ';'. Contributed by Enrique Perez-Terron

- bpo-33694: asyncio: Fix a race condition causing data loss on
  pause_reading()/resume_reading() when using the ProactorEventLoop.

- bpo-32493: Correct test for ``uuid_enc_be`` availability in
  ``configure.ac``. Patch by Michael Felt.

- bpo-33792: Add asyncio.WindowsSelectorEventLoopPolicy and
  asyncio.WindowsProactorEventLoopPolicy.

- bpo-33274: W3C DOM Level 1 specifies return value of
  Element.removeAttributeNode() as "The Attr node that was removed."
  xml.dom.minidom now complies with this requirement.

- bpo-33778: Update ``unicodedata``'s database to Unicode version 11.0.0.

- bpo-33165: Added a stacklevel parameter to logging calls to allow use of
  wrapper/helper functions for logging APIs.

- bpo-33770: improve base64 exception message for encoded inputs of invalid
  length

- bpo-33769: asyncio/start_tls: Fix error message; cancel callbacks in case
  of an unhandled error; mark SSLTransport as closed if it is aborted.

- bpo-33767: The concatenation (``+``) and repetition (``*``) sequence
  operations now raise :exc:`TypeError` instead of :exc:`SystemError` when
  performed on :class:`mmap.mmap` objects.  Patch by Zackery Spytz.

- bpo-33734: asyncio/ssl: Fix AttributeError, increase default handshake
  timeout

- bpo-31014: Fixed creating a controller for :mod:`webbrowser` when a user
  specifies a path to an entry in the BROWSER environment variable.  Based
  on patch by John Still.

- bpo-2504: Add gettext.pgettext() and variants.

- bpo-33197: Add description property for _ParameterKind

- bpo-32751: When cancelling the task due to a timeout,
  :meth:`asyncio.wait_for` will now wait until the cancellation is complete.

- bpo-32684: Fix gather to propagate cancellation of itself even with
  return_exceptions.

- bpo-33654: Support protocol type switching in SSLTransport.set_protocol().

- bpo-33674: Pause the transport as early as possible to further reduce the
  risk of data_received() being called before connection_made().

- bpo-33671: :func:`shutil.copyfile`, :func:`shutil.copy`,
  :func:`shutil.copy2`, :func:`shutil.copytree` and :func:`shutil.move` use
  platform-specific fast-copy syscalls on Linux and macOS in order to copy
  the file more efficiently. On Windows :func:`shutil.copyfile` uses a
  bigger default buffer size (1 MiB instead of 16 KiB) and a
  :func:`memoryview`-based variant of :func:`shutil.copyfileobj` is used.
  The speedup for copying a 512MiB file is about +26% on Linux, +50% on
  macOS and +40% on Windows. Also, much less CPU cycles are consumed.
  (Contributed by Giampaolo Rodola' in :issue:`25427`.)

- bpo-33674: Fix a race condition in SSLProtocol.connection_made() of
  asyncio.sslproto: start immediately the handshake instead of using
  call_soon(). Previously, data_received() could be called before the
  handshake started, causing the handshake to hang or fail.

- bpo-31647: Fixed bug where calling write_eof() on a
  _SelectorSocketTransport after it's already closed raises AttributeError.

- bpo-32610: Make asyncio.all_tasks() return only pending tasks.

- bpo-32410: Avoid blocking on file IO in sendfile fallback code

- bpo-33469: Fix RuntimeError after closing loop that used run_in_executor

- bpo-33672: Fix Task.__repr__ crash with Cython's bogus coroutines

- bpo-33654: Fix transport.set_protocol() to support switching between
  asyncio.Protocol and asyncio.BufferedProtocol.  Fix loop.start_tls() to
  work with asyncio.BufferedProtocols.

- bpo-33652: Pickles of type variables and subscripted generics are now
  future-proof and compatible with older Python versions.

- bpo-32493: Fixed :func:`uuid.uuid1` on FreeBSD.

- bpo-33238: Add ``InvalidStateError`` to :mod:`concurrent.futures`.
  ``Future.set_result`` and ``Future.set_exception`` now raise
  ``InvalidStateError`` if the futures are not pending or running. Patch by
  Jason Haydaman.

- bpo-33618: Finalize and document preliminary and experimental TLS 1.3
  support with OpenSSL 1.1.1

- bpo-33625: Release GIL on `grp.getgrnam`, `grp.getgrgid`, `pwd.getpwnam`
  and `pwd.getpwuid` if reentrant variants of these functions are available.
  Patch by William Grzybowski.

- bpo-33623: Fix possible SIGSGV when asyncio.Future is created in __del__

- bpo-11874: Use a better regex when breaking usage into wrappable parts.
  Avoids bogus assertion errors from custom metavar strings.

- bpo-30877: Fixed a bug in the Python implementation of the JSON decoder
  that prevented the cache of parsed strings from clearing after finishing
  the decoding. Based on patch by c-fos.

- bpo-33604: Remove HMAC default to md5 marked for removal in 3.8 (removal
  originally planned in 3.6, bump to 3.8 in gh-7062).

- bpo-33582: Emit a deprecation warning for inspect.formatargspec

- bpo-21145: Add ``functools.cached_property`` decorator, for computed
  properties cached for the life of the instance.

- bpo-33570: Change TLS 1.3 cipher suite settings for compatibility with
  OpenSSL 1.1.1-pre6 and newer. OpenSSL 1.1.1 will have TLS 1.3 ciphers
  enabled by default.

- bpo-28556: Do not simplify arguments to `typing.Union`. Now
  `Union[Manager, Employee]` is not simplified to `Employee` at runtime.
  Such simplification previously caused several bugs and limited
  possibilities for introspection.

- bpo-12486: :func:`tokenize.generate_tokens` is now documented as a public
  API to tokenize unicode strings. It was previously present but
  undocumented.

- bpo-33540: Add a new ``block_on_close`` class attribute to
  ``ForkingMixIn`` and ``ThreadingMixIn`` classes of :mod:`socketserver`.

- bpo-33548: tempfile._candidate_tempdir_list should consider common TEMP
  locations

- bpo-33109: argparse subparsers are once again not required by default,
  reverting the change in behavior introduced by bpo-26510 in 3.7.0a2.

- bpo-33541: Remove unused private method ``_strptime.LocaleTime.__pad``
  (a.k.a. ``_LocaleTime__pad``).

- bpo-33536: dataclasses.make_dataclass now checks for invalid field names
  and duplicate fields. Also, added a check for invalid field
  specifications.

- bpo-33542: Prevent ``uuid.get_node`` from using a DUID instead of a MAC on
  Windows. Patch by Zvi Effron

- bpo-26819: Fix race condition with `ReadTransport.resume_reading` in
  Windows proactor event loop.

- Fix failure in `typing.get_type_hints()` when ClassVar was provided as a
  string forward reference.

- bpo-33516: :class:`unittest.mock.MagicMock` now supports the ``__round__``
  magic method.

- bpo-28612: Added support for Site Maps to urllib's ``RobotFileParser`` as
  :meth:`RobotFileParser.site_maps()
  <urllib.robotparser.RobotFileParser.site_maps>`. Patch by Lady Red, based
  on patch by Peter Wirtz.

- bpo-28167: Remove platform.linux_distribution, which was deprecated since
  3.5.

- bpo-33504: Switch the default dictionary implementation for
  :mod:`configparser` from :class:`collections.OrderedDict` to the standard
  :class:`dict` type.

- bpo-33505: Optimize asyncio.ensure_future() by reordering if checks: 1.17x
  faster.

- bpo-33497: Add errors param to cgi.parse_multipart and make an encoding in
  FieldStorage use the given errors (needed for Twisted).  Patch by Amber
  Brown.

- bpo-29235: The :class:`cProfile.Profile` class can now be used as a
  context manager. Patch by Scott Sanderson.

- bpo-33495: Change dataclasses.Fields repr to use the repr of each of its
  members, instead of str.  This makes it more clear what each field
  actually represents.  This is especially true for the 'type' member.

- bpo-26103: Correct ``inspect.isdatadescriptor`` to look for ``__set__`` or
  ``__delete__``.  Patch by Aaron Hall.

- bpo-29209: Removed the ``doctype()`` method and the *html* parameter of
  the constructor of :class:`~xml.etree.ElementTree.XMLParser`.  The
  ``doctype()`` method defined in a subclass will no longer be called.
  Deprecated methods ``getchildren()`` and ``getiterator()`` in the
  :mod:`~xml.etree.ElementTree` module emit now a :exc:`DeprecationWarning`
  instead of :exc:`PendingDeprecationWarning`.

- bpo-33453: Fix dataclasses to work if using literal string type
  annotations or if using PEP 563 "Postponed Evaluation of Annotations".
  Only specific string prefixes are detected for both ClassVar ("ClassVar"
  and "typing.ClassVar") and InitVar ("InitVar" and "dataclasses.InitVar").

- bpo-28556: Minor fixes in typing module: add annotations to
  ``NamedTuple.__new__``, pass ``*args`` and ``**kwds`` in
  ``Generic.__new__``.  Original PRs by Paulius Šarka and Chad Dombrova.

- bpo-33365: Print the header values besides the header keys instead just
  the header keys if *debuglevel* is set to >0 in :mod:`http.client`. Patch
  by Marco Strigl.

- bpo-20087: Updated alias mapping with glibc 2.27 supported locales.

- bpo-33422: Fix trailing quotation marks getting deleted when looking up
  byte/string literals on pydoc. Patch by Andrés Delfino.

- bpo-28167: The function ``platform.linux_distribution`` and
  ``platform.dist`` now trigger a ``DeprecationWarning`` and have been
  marked for removal in Python 3.8

- bpo-33281: Fix ctypes.util.find_library regression on macOS.

- bpo-33311: Text and html output generated by cgitb does not display
  parentheses if the current call is done directly in the module. Patch by
  Stéphane Blondon.

- bpo-27300: The file classes in *tempfile* now accept an *errors* parameter
  that complements the already existing *encoding*.  Patch by Stephan Hohe.

- bpo-32933: :func:`unittest.mock.mock_open` now supports iteration over the
  file contents. Patch by Tony Flury.

- bpo-33217: Raise :exc:`TypeError` when looking up non-Enum objects in Enum
  classes and Enum members.

- bpo-33197: Update error message when constructing invalid
  inspect.Parameters Patch by Dong-hee Na.

- bpo-33383: Fixed crash in the get() method of the :mod:`dbm.ndbm` database
  object when it is called with a single argument.

- bpo-33375: The warnings module now finds the Python file associated with a
  warning from the code object, rather than the frame's global namespace.
  This is consistent with how tracebacks and pdb find filenames, and should
  work better for dynamically executed code.

- bpo-33336: ``imaplib`` now allows ``MOVE`` command in ``IMAP4.uid()`` (RFC
  6851: IMAP MOVE Extension) and potentially as a name of supported method
  of ``IMAP4`` object.

- bpo-32455: Added *jump* parameter to :func:`dis.stack_effect`.

- bpo-27485: Rename and deprecate undocumented functions in
  :func:`urllib.parse`.

- bpo-33332: Add ``signal.valid_signals()`` to expose the POSIX sigfillset()
  functionality.

- bpo-33251: `ConfigParser.items()` was fixed so that key-value pairs passed
  in via `vars` are not included in the resulting output.

- bpo-33329: Fix multiprocessing regression on newer glibcs

- bpo-33334: :func:`dis.stack_effect` now supports all defined opcodes
  including NOP and EXTENDED_ARG.

- bpo-991266: Fix quoting of the ``Comment`` attribute of
  :class:`http.cookies.SimpleCookie`.

- bpo-33131: Upgrade bundled version of pip to 10.0.1.

- bpo-33308: Fixed a crash in the :mod:`parser` module when converting an ST
  object to a tree of tuples or lists with ``line_info=False`` and
  ``col_info=True``.

- bpo-23403: lib2to3 now uses pickle protocol 4 for pre-computed grammars.

- bpo-33266: lib2to3 now recognizes ``rf'...'`` strings.

- bpo-11594: Ensure line-endings are respected when using lib2to3.

- bpo-33254: Have :func:`importlib.resources.contents` and
  :meth:`importlib.abc.ResourceReader.contents` return an :term:`iterable`
  instead of an :term:`iterator`.

- bpo-33265: ``contextlib.ExitStack`` and ``contextlib.AsyncExitStack`` now
  use a method instead of a wrapper function for exit callbacks.

- bpo-33263: Fix FD leak in `_SelectorSocketTransport`  Patch by Vlad
  Starostin.

- bpo-33256: Fix display of ``<module>`` call in the html produced by
  ``cgitb.html()``. Patch by Stéphane Blondon.

- bpo-33144: ``random.Random()`` and its subclassing mechanism got optimized
  to check only once at class/subclass instantiation time whether its
  ``getrandbits()`` method can be relied on by other methods, including
  ``randrange()``, for the generation of arbitrarily large random integers.
  Patch by Wolfgang Maier.

- bpo-33185: Fixed regression when running pydoc with the :option:`-m`
  switch. (The regression was introduced in 3.7.0b3 by the resolution of
  :issue:`33053`)

  This fix also changed pydoc to add ``os.getcwd()`` to :data:`sys.path`
  when necessary, rather than adding ``"."``.

- bpo-29613: Added support for the ``SameSite`` cookie flag to the
  ``http.cookies`` module.

- bpo-33169: Delete entries of ``None`` in :data:`sys.path_importer_cache`
  when :meth:`importlib.machinery.invalidate_caches` is called.

- bpo-33203: ``random.Random.choice()`` now raises ``IndexError`` for empty
  sequences consistently even when called from subclasses without a
  ``getrandbits()`` implementation.

- bpo-33224: Update difflib.mdiff() for :pep:`479`.  Convert an uncaught
  StopIteration in a generator into a return-statement.

- bpo-33209: End framing at the end of C implementation of
  :func:`pickle.Pickler.dump`.

- bpo-32861: The urllib.robotparser's ``__str__`` representation now
  includes wildcard entries and the "Crawl-delay" and "Request-rate" fields.
  Also removes extra newlines that were being appended to the end of the
  string. Patch by Michael Lazar.

- bpo-23403: ``DEFAULT_PROTOCOL`` in :mod:`pickle` was bumped to 4. Protocol
  4 is described in :pep:`3154` and available since Python 3.4. It offers
  better performance and smaller size compared to protocol 3 introduced in
  Python 3.0.

- bpo-20104: Improved error handling and fixed a reference leak in
  :func:`os.posix_spawn()`.

- bpo-33106: Deleting a key from a read-only dbm database raises module
  specific error instead of KeyError.

- bpo-33175: In dataclasses, Field.__set_name__ now looks up the
  __set_name__ special method on the class, not the instance, of the default
  value.

- bpo-32380: Create functools.singledispatchmethod to support generic single
  dispatch on descriptors and methods.

- bpo-33141: Have Field objects pass through __set_name__ to their default
  values, if they have their own __set_name__.

- bpo-33096: Allow ttk.Treeview.insert to insert iid that has a false
  boolean value. Note iid=0 and iid=False would be same. Patch by Garvit
  Khatri.

- bpo-32873: Treat type variables and special typing forms as immutable by
  copy and pickle.  This fixes several minor issues and inconsistencies, and
  improves backwards compatibility with Python 3.6.

- bpo-33134: When computing dataclass's __hash__, use the lookup table to
  contain the function which returns the __hash__ value.  This is an
  improvement over looking up a string, and then testing that string to see
  what to do.

- bpo-33127: The ssl module now compiles with LibreSSL 2.7.1.

- bpo-32505: Raise TypeError if a member variable of a dataclass is of type
  Field, but doesn't have a type annotation.

- bpo-33078: Fix the failure on OSX caused by the tests relying on
  sem_getvalue

- bpo-33116: Add 'Field' to dataclasses.__all__.

- bpo-32896: Fix an error where subclassing a dataclass with a field that
  uses a default_factory would generate an incorrect class.

- bpo-33100: Dataclasses: If a field has a default value that's a
  MemberDescriptorType, then it's from that field being in __slots__, not an
  actual default value.

- bpo-32953: If a non-dataclass inherits from a frozen dataclass, allow
  attributes to be added to the derived class.  Only attributes from the
  frozen dataclass cannot be assigned to.  Require all dataclasses in a
  hierarchy to be either all frozen or all non-frozen.

- bpo-33097: Raise RuntimeError when ``executor.submit`` is called during
  interpreter shutdown.

- bpo-32968: Modulo and floor division involving Fraction and float should
  return float.

- bpo-33061: Add missing ``NoReturn`` to ``__all__`` in typing.py

- bpo-33078: Fix the size handling in multiprocessing.Queue when a pickling
  error occurs.

- bpo-33064: lib2to3 now properly supports trailing commas after ``*args``
  and ``**kwargs`` in function signatures.

- bpo-33056: FIX properly close leaking fds in
  concurrent.futures.ProcessPoolExecutor.

- bpo-33021: Release the GIL during fstat() calls, avoiding hang of all
  threads when calling mmap.mmap(), os.urandom(), and random.seed().  Patch
  by Nir Soffer.

- bpo-31804: Avoid failing in multiprocessing.Process if the standard
  streams are closed or None at exit.

- bpo-33034: Providing an explicit error message when casting the port
  property to anything that is not an integer value using ``urlparse()`` and
  ``urlsplit()``. Patch by Matt Eaton.

- bpo-30249: Improve struct.unpack_from() exception messages for problems
  with the buffer size and offset.

- bpo-33037: Skip sending/receiving data after SSL transport closing.

- bpo-27683: Fix a regression in :mod:`ipaddress` that result of
  :meth:`hosts` is empty when the network is constructed by a tuple
  containing an integer mask and only 1 bit left for addresses.

- bpo-22674: Add the strsignal() function in the signal module that returns
  the system description of the given signal, as returned by strsignal(3).

- bpo-32999: Fix C implementation of ``ABC.__subclasscheck__(cls,
  subclass)`` crashed when ``subclass`` is not a type object.

- bpo-33009: Fix inspect.signature() for single-parameter partialmethods.

- bpo-32969: Expose several missing constants in zlib and fix corresponding
  documentation.

- bpo-32056: Improved exceptions raised for invalid number of channels and
  sample width when read an audio file in modules :mod:`aifc`, :mod:`wave`
  and :mod:`sunau`.

- bpo-32970: Improved disassembly of the MAKE_FUNCTION instruction.

- bpo-32844: Fix wrong redirection of a low descriptor (0 or 1) to stderr in
  subprocess if another low descriptor is closed.

- bpo-32960: For dataclasses, disallow inheriting frozen from non-frozen
  classes, and also disallow inheriting non-frozen from frozen classes. This
  restriction will be relaxed at a future date.

- bpo-32713: Fixed tarfile.itn handling of out-of-bounds float values. Patch
  by Joffrey Fuhrer.

- bpo-32257: The ssl module now contains OP_NO_RENEGOTIATION constant,
  available with OpenSSL 1.1.0h or 1.1.1.

- bpo-32951: Direct instantiation of SSLSocket and SSLObject objects is now
  prohibited. The constructors were never documented, tested, or designed as
  public constructors. Users were suppose to use ssl.wrap_socket() or
  SSLContext.

- bpo-32929: Remove the tri-state parameter "hash", and add the boolean
  "unsafe_hash". If unsafe_hash is True, add a __hash__ function, but if a
  __hash__ exists, raise TypeError.  If unsafe_hash is False, add a __hash__
  based on the values of eq= and frozen=.  The unsafe_hash=False behavior is
  the same as the old hash=None behavior.  unsafe_hash=False is the default,
  just as hash=None used to be.

- bpo-32947: Add OP_ENABLE_MIDDLEBOX_COMPAT and test workaround for TLSv1.3
  for future compatibility with OpenSSL 1.1.1.

- bpo-32146: Document the interaction between frozen executables and the
  spawn and forkserver start methods in multiprocessing.

- bpo-30622: The ssl module now detects missing NPN support in LibreSSL.

- bpo-32922: dbm.open() now encodes filename with the filesystem encoding
  rather than default encoding.

- bpo-32759: Free unused arenas in multiprocessing.heap.

- bpo-32859: In ``os.dup2``, don't check every call whether the ``dup3``
  syscall exists or not.

- bpo-32556: nt._getfinalpathname, nt._getvolumepathname and
  nt._getdiskusage now correctly convert from bytes.

- bpo-21060: Rewrite confusing message from setup.py upload from "No dist
  file created in earlier command" to the more helpful "Must create and
  upload files in one command".

- bpo-32857: In :mod:`tkinter`, ``after_cancel(None)`` now raises a
  :exc:`ValueError` instead of canceling the first scheduled function.
  Patch by Cheryl Sabella.

- bpo-32852: Make sure sys.argv remains as a list when running trace.

- bpo-31333: ``_abc`` module is added.  It is a speedup module with C
  implementations for various functions and methods in ``abc``.  Creating an
  ABC subclass and calling ``isinstance`` or ``issubclass`` with an ABC
  subclass are up to 1.5x faster. In addition, this makes Python start-up up
  to 10% faster.

  Note that the new implementation hides internal registry and caches,
  previously accessible via private attributes ``_abc_registry``,
  ``_abc_cache``, and ``_abc_negative_cache``.  There are three debugging
  helper methods that can be used instead ``_dump_registry``,
  ``_abc_registry_clear``, and ``_abc_caches_clear``.

- bpo-32841: Fixed `asyncio.Condition` issue which silently ignored
  cancellation after notifying and cancelling a conditional lock. Patch by
  Bar Harel.

- bpo-32819: ssl.match_hostname() has been simplified and no longer depends
  on re and ipaddress module for wildcard and IP addresses. Error reporting
  for invalid wildcards has been improved.

- bpo-19675: ``multiprocessing.Pool`` no longer leaks processes if its
  initialization fails.

- bpo-32394: socket: Remove
  TCP_FASTOPEN,TCP_KEEPCNT,TCP_KEEPIDLE,TCP_KEEPINTVL flags on older version
  Windows during run-time.

- bpo-31787: Fixed refleaks of ``__init__()`` methods in various modules.
  (Contributed by Oren Milman)

- bpo-30157: Fixed guessing quote and delimiter in csv.Sniffer.sniff() when
  only the last field is quoted.  Patch by Jake Davis.

- bpo-30688: Added support of ``\N{name}`` escapes in regular expressions.
  Based on patch by Jonathan Eunice.

- bpo-32792: collections.ChainMap() preserves the order of the underlying
  mappings.

- bpo-32775: :func:`fnmatch.translate()` no longer produces patterns which
  contain set operations. Sets starting with '[' or containing '--', '&&',
  '~~' or '||' will be interpreted differently in regular expressions in
  future versions. Currently they emit warnings. fnmatch.translate() now
  avoids producing patterns containing such sets by accident.

- bpo-32622: Implement native fast sendfile for Windows proactor event loop.

- bpo-32777: Fix a rare but potential pre-exec child process deadlock in
  subprocess on POSIX systems when marking file descriptors inheritable on
  exec in the child process.  This bug appears to have been introduced in
  3.4.

- bpo-32647: The ctypes module used to depend on indirect linking for
  dlopen. The shared extension is now explicitly linked against libdl on
  platforms with dl.

- bpo-32749: A :mod:`dbm.dumb` database opened with flags 'r' is now
  read-only. :func:`dbm.dumb.open` with flags 'r' and 'w' no longer creates
  a database if it does not exist.

- bpo-32741: Implement ``asyncio.TimerHandle.when()`` method.

- bpo-32691: Use mod_spec.parent when running modules with pdb

- bpo-32734: Fixed ``asyncio.Lock()`` safety issue which allowed acquiring
  and locking the same lock multiple times, without it being free. Patch by
  Bar Harel.

- bpo-32727: Do not include name field in SMTP envelope from address. Patch
  by Stéphane Wirtel

- bpo-31453: Add TLSVersion constants and SSLContext.maximum_version /
  minimum_version attributes. The new API wraps OpenSSL 1.1
  https://www.openssl.org/docs/man1.1.0/ssl/SSL_CTX_set_min_proto_version.html
  feature.

- bpo-24334: Internal implementation details of ssl module were cleaned up.
  The SSLSocket has one less layer of indirection. Owner and session
  information are now handled by the SSLSocket and SSLObject constructor.
  Channel binding implementation has been simplified.

- bpo-31848: Fix the error handling in Aifc_read.initfp() when the SSND
  chunk is not found. Patch by Zackery Spytz.

- bpo-32585: Add Ttk spinbox widget to :mod:`tkinter.ttk`.  Patch by Alan D
  Moore.

- bpo-32512: :mod:`profile` CLI accepts `-m module_name` as an alternative
  to script path.

- bpo-8525: help() on a type now displays builtin subclasses. This is
  intended primarily to help with notification of more specific exception
  subclasses.

  Patch by Sanyam Khurana.

- bpo-31639: http.server now exposes a ThreadingHTTPServer class and uses it
  when the module is run with ``-m`` to cope with web browsers pre-opening
  sockets.

- bpo-29877: compileall: import ProcessPoolExecutor only when needed,
  preventing hangs on low resource platforms

- bpo-32221: Various functions returning tuple containing IPv6 addresses now
  omit ``%scope`` part since the same information is already encoded in
  *scopeid* tuple item. Especially this speeds up :func:`socket.recvfrom`
  when it receives multicast packet since useless resolving of network
  interface name is omitted.

- bpo-32147: :func:`binascii.unhexlify` is now up to 2 times faster. Patch
  by Sergey Fedoseev.

- bpo-30693: The TarFile class now recurses directories in a reproducible
  way.

- bpo-30693: The ZipFile class now recurses directories in a reproducible
  way.

- bpo-31680: Added :data:`curses.ncurses_version`.

- bpo-31908: Fix output of cover files for ``trace`` module command-line
  tool. Previously emitted cover files only when ``--missing`` option was
  used. Patch by Michael Selik.

- bpo-31608: Raise a ``TypeError`` instead of crashing if a
  ``collections.deque`` subclass returns a non-deque from ``__new__``. Patch
  by Oren Milman.

- bpo-31425: Add support for sockets of the AF_QIPCRTR address family,
  supported by the Linux kernel. This is used to communicate with services,
  such as GPS or radio, running on Qualcomm devices. Patch by Bjorn
  Andersson.

- bpo-22005: Implemented unpickling instances of
  :class:`~datetime.datetime`, :class:`~datetime.date` and
  :class:`~datetime.time` pickled by Python 2. ``encoding='latin1'`` should
  be used for successful decoding.

- bpo-27645: :class:`sqlite3.Connection` now exposes a
  :class:`~sqlite3.Connection.backup` method, if the underlying SQLite
  library is at version 3.6.11 or higher.  Patch by Lele Gaifax.

- bpo-16865: Support arrays >=2GiB in :mod:`ctypes`.  Patch by Segev Finer.

- bpo-31508: Removed support of arguments in
  `tkinter.ttk.Treeview.selection`. It was deprecated in 3.6.  Use
  specialized methods like `selection_set` for changing the selection.

- bpo-29456: Fix bugs in hangul normalization: u1176, u11a7 and u11c3

Documentation
-------------

- bpo-21257: Document :func:`http.client.parse_headers`.

- bpo-34764: Improve example of iter() with 2nd sentinel argument.

- bpo-35564: Explicitly set master_doc variable in conf.py for compliance
  with Sphinx 2.0

- bpo-35511: Specified that profile.Profile class doesn't not support enable
  or disable methods. Also, elaborated that Profile object as a context
  manager is only supported in cProfile module.

- bpo-10536: Enhance the gettext docs. Patch by Éric Araujo

- bpo-35089: Remove mention of ``typing.io`` and ``typing.re``. Their types
  should be imported from ``typing`` directly.

- bpo-35038: Fix the documentation about an unexisting `f_restricted`
  attribute in the frame object. Patch by Stéphane Wirtel

- bpo-35042: Replace PEP XYZ by the pep role and allow to use the direct
  links to the PEPs.

- bpo-35044: Fix the documentation with the role ``exc`` for the
  appropriated exception. Patch by Stéphane Wirtel

- bpo-35035: Rename documentation for :mod:`email.utils` to
  ``email.utils.rst``.

- bpo-34967: Use app.add_object_type() instead of the deprecated Sphinx
  function app.description_unit()

- bpo-34913: Add documentation about the new command line interface of the
  gzip module.

- bpo-32174: chm document displays non-ASCII charaters properly on some MBCS
  Windows systems.

- bpo-11233: Create availability directive for documentation.  Original
  patch by Georg Brandl.

- bpo-34790: Document how passing coroutines to asyncio.wait() can be
  confusing.

- bpo-34552: Make clear that ``==`` operator sometimes is equivalent to
  `is`. The ``<``, ``<=``, ``>`` and ``>=`` operators are only defined where
  they make sense.

- bpo-28617: Fixed info in the stdtypes docs concerning the types that
  support membership tests.

- bpo-20177: Migrate datetime.date.fromtimestamp to Argument Clinic. Patch
  by Tim Hoffmann.

- bpo-34065: Fix wrongly written basicConfig documentation markup syntax

- bpo-33460: replaced ellipsis with correct error codes in tutorial chapter
  3.

- bpo-33847: Add '@' operator entry to index.

- bpo-33409: Clarified the relationship between :pep:`538`'s
  PYTHONCOERCECLOCALE and PEP 540's PYTHONUTF8 mode.

- bpo-33197: Add versionadded tag to the documentation of
  ParameterKind.description

- bpo-17045: Improve the C-API doc for PyTypeObject.  This includes adding
  several quick-reference tables and a lot of missing slot/typedef entries.
  The existing entries were also cleaned up with a slightly more consistent
  format.

- bpo-33736: Improve the documentation of :func:`asyncio.open_connection`,
  :func:`asyncio.start_server` and their UNIX socket counterparts.

- bpo-23859: Document that `asyncio.wait()` does not cancel its futures on
  timeout.

- bpo-32436: Document :pep:`567` changes to asyncio.

- bpo-33604: Update HMAC md5 default to a DeprecationWarning, bump removal
  to 3.8.

- bpo-33594: Document ``getargspec``, ``from_function`` and ``from_builtin``
  as deprecated in their respective docstring, and include version since
  deprecation in DeprecationWarning message.

- bpo-33503: Fix broken pypi link

- bpo-33421: Add missing documentation for ``typing.AsyncContextManager``.

- bpo-33487: BZ2file now emit a DeprecationWarning when buffering=None is
  passed, the deprecation message and documentation also now explicitly
  state it is deprecated since 3.0.

- bpo-33378: Add Korean language switcher for https://docs.python.org/3/

- bpo-33276: Clarify that the ``__path__`` attribute on modules cannot be
  just any value.

- bpo-33201: Modernize documentation for writing C extension types.

- bpo-33195: Deprecate ``Py_UNICODE`` usage in ``c-api/arg`` document.
  ``Py_UNICODE`` related APIs are deprecated since Python 3.3, but it is
  missed in the document.

- bpo-33126: Document PyBuffer_ToContiguous().

- bpo-27212: Modify documentation for the :func:`islice` recipe to consume
  initial values up to the start index.

- bpo-28247: Update :mod:`zipapp` documentation to describe how to make
  standalone applications.

- bpo-18802: Documentation changes for ipaddress.  Patch by Jon Foster and
  Berker Peksag.

- bpo-27428: Update documentation to clarify that ``WindowsRegistryFinder``
  implements ``MetaPathFinder``. (Patch by Himanshu Lakhara)

- bpo-28124: The ssl module function ssl.wrap_socket() has been
  de-emphasized and deprecated in favor of the more secure and efficient
  SSLContext.wrap_socket() method.

- bpo-17232: Clarify docs for -O and -OO.  Patch by Terry Reedy.

- bpo-32436: Add documentation for the contextvars module (PEP 567).

- bpo-32800: Update link to w3c doc for xml default namespaces.

- bpo-11015: Update :mod:`test.support` documentation.

- bpo-32613: Update the faq/windows.html to use the py command from PEP 397
  instead of python.

- bpo-8722: Document :meth:`__getattr__` behavior when property :meth:`get`
  method raises :exc:`AttributeError`.

- bpo-32614: Modify RE examples in documentation to use raw strings to
  prevent :exc:`DeprecationWarning` and add text to REGEX HOWTO to highlight
  the deprecation.

- bpo-20709: Remove the paragraph where we explain that os.utime() does not
  support a directory as path under Windows. Patch by Jan-Philip Gehrcke

- bpo-32722: Remove the bad example in the tutorial of the Generator
  Expression. Patch by Stéphane Wirtel

- bpo-31972: Improve docstrings for `pathlib.PurePath` subclasses.

- bpo-30607: Use the externalized ``python-docs-theme`` package when
  building the documentation.

- bpo-8243: Add a note about curses.addch and curses.addstr exception
  behavior when writing outside a window, or pad.

- bpo-32337: Update documentation related with ``dict`` order.

- bpo-25041: Document ``AF_PACKET`` in the :mod:`socket` module.

- bpo-31432: Clarify meaning of CERT_NONE, CERT_OPTIONAL, and CERT_REQUIRED
  flags for ssl.SSLContext.verify_mode.

Tests
-----

- bpo-35772: Fix sparse file tests of test_tarfile on ppc64 with the tmpfs
  filesystem. Fix the function testing if the filesystem supports sparse
  files: create a file which contains data and "holes", instead of creating
  a file which contains no data. tmpfs effective block size is a page size
  (tmpfs lives in the page cache). RHEL uses 64 KiB pages on aarch64, ppc64,
  ppc64le, only s390x and x86_64 use 4 KiB pages, whereas the test punch
  holes of 4 KiB.

- bpo-35045: Make ssl tests less strict and also accept TLSv1 as system
  default. The changes unbreaks test_min_max_version on Fedora 29.

- bpo-32710: ``test_asyncio/test_sendfile.py`` now resets the event loop
  policy using :func:`tearDownModule` as done in other tests, to prevent a
  warning when running tests on Windows.

- bpo-33717: test.pythoninfo now logs information of all clocks, not only
  time.time() and time.perf_counter().

- bpo-35488: Add a test to pathlib's Path.match() to verify it does not
  support glob-style ** recursive pattern matching.

- bpo-31731: Fix a race condition in ``check_interrupted_write()`` of
  test_io: create directly the thread with SIGALRM signal blocked, rather
  than blocking the signal later from the thread. Previously, it was
  possible that the thread gets the signal before the signal is blocked.

- bpo-35424: Fix test_multiprocessing_main_handling: use
  :class:`multiprocessing.Pool` with a context manager and then explicitly
  join the pool.

- bpo-35519: Rename :mod:`test.bisect` module to :mod:`test.bisect_cmd` to
  avoid conflict with :mod:`bisect` module when running directly a test like
  ``./python Lib/test/test_xmlrpc.py``.

- bpo-35513: Replace :func:`time.time` with :func:`time.monotonic` in tests
  to measure time delta.

- bpo-34279: :func:`test.support.run_unittest` no longer raise
  :exc:`TestDidNotRun` if the test result contains skipped tests. The
  exception is now only raised if no test have been run and no test have
  been skipped.

- bpo-35412: Add testcase to ``test_future4``: check unicode literal.

- bpo-26704: Added test demonstrating double-patching of an instance method.
  Patch by Anthony Sottile.

- bpo-33725: test_multiprocessing_fork may crash on recent versions of
  macOS.  Until the issue is resolved, skip the test on macOS.

- bpo-35352: Modify test_asyncio to use the certificate set from the test
  directory.

- bpo-35317: Fix ``mktime()`` overflow error in ``test_email``: run
  ``test_localtime_daylight_true_dst_true()`` and
  ``test_localtime_daylight_false_dst_true()`` with a specific timezone.

- bpo-21263: After several reports that test_gdb does not work properly on
  macOS and since gdb is not shipped by default anymore, test_gdb is now
  skipped on macOS when LLVM Clang has been used to compile Python. Patch by
  Lysandros Nikolaou

- bpo-34279: regrtest issue a warning when no tests have been executed in a
  particular test file. Also, a new final result state is issued if no test
  have been executed across all test files. Patch by Pablo Galindo.

- bpo-34962: make docstest in Doc now passes., and is enforced in CI

- bpo-23596: Use argparse for the command line of the gzip module. Patch by
  Antony Lee

- bpo-34537: Fix ``test_gdb.test_strings()`` when ``LC_ALL=C`` and GDB was
  compiled with Python 3.6 or earlier.

- bpo-34587: test_socket: Remove RDSTest.testCongestion(). The test tries to
  fill the receiver's socket buffer and expects an error. But the RDS
  protocol doesn't require that. Moreover, the Linux implementation of RDS
  expects that the producer of the messages reduces its rate, it's not the
  role of the receiver to trigger an error. The test fails on Fedora 28 by
  design, so just remove it.

- bpo-34661: Fix test_shutil if unzip doesn't support -t.

- bpo-34200: Fixed non-deterministic flakiness of test_pkg by not using the
  scary test.support.module_cleanup() logic to save and restore sys.modules
  contents between test cases.

- bpo-34569: The experimental PEP 554 data channels now correctly pass
  negative PyLong objects between subinterpreters on 32-bit systems. Patch
  by Michael Felt.

- bpo-34594: Fix usage of hardcoded ``errno`` values in the tests.

- bpo-34579: Fix test_embed for AIX Patch by Michael Felt

- bpo-34542: Use 3072 RSA keys and SHA-256 signature for test certs and
  keys.

- bpo-11193: Remove special condition for AIX in
  `test_subprocess.test_undecodable_env`

- bpo-34347: Fix `test_utf8_mode.test_cmd_line` for AIX

- bpo-34490: On AIX with AF_UNIX family sockets getsockname() does not
  provide 'sockname', so skip calls to transport.get_extra_info('sockname')

- bpo-34391: Fix ftplib test for TLS 1.3 by reading from data socket.

- bpo-11192: Fix `test_socket` on AIX 6.1 and later IPv6 zone id supports
  only supported by inet_pton6_zone() Switch to runtime-based
  platform.system() to establish current platform  rather than build-time
  based sys.platform()

- bpo-34399: Update all RSA keys and DH params to use at least 2048 bits.

- bpo-34373: Fix ``test_mktime`` and ``test_pthread_getcpuclickid`` tests
  for AIX Add range checking for ``_PyTime_localtime`` for AIX Patch by
  Michael Felt

- bpo-11191: Skip the distutils test 'test_search_cpp' when using XLC as
  compiler patch by aixtools (Michael Felt)

- Improved an error message when mock assert_has_calls fails.

- bpo-33746: Fix test_unittest when run in verbose mode.

- bpo-33901: Fix test_dbm_gnu on macOS with gdbm 1.15: add a larger value to
  make sure that the file size changes.

- bpo-33873: Fix a bug in ``regrtest`` that caused an extra test to run if
  --huntrleaks/-R was used. Exit with error in case that invalid parameters
  are specified to --huntrleaks/-R (at least one warmup run and one
  repetition must be used).

- bpo-33562: Check that a global asyncio event loop policy is not left
  behind by any tests.

- bpo-33655: Ignore test_posix_fallocate failures on BSD platforms that
  might be due to running on ZFS.

- bpo-32962: Fixed test_gdb when Python is compiled with flags -mcet
  -fcf-protection -O0.

- bpo-33358: Fix ``test_embed.test_pre_initialization_sys_options()`` when
  the interpreter is built with ``--enable-shared``.

- bpo-32872: Avoid regrtest compatibility issue with namespace packages.

- bpo-32517: Fix failing ``test_asyncio`` on macOS 10.12.2+ due to transport
  of ``KqueueSelector`` loop was not being closed.

- bpo-32663: Making sure the `SMTPUTF8SimTests` class of tests gets run in
  test_smtplib.py.

- bpo-27643: Test_C test case needs "signed short" bitfields, but the IBM
  XLC compiler (on AIX) does not support this Skip the code and test when
  AIX and XLC are used

  Applicable to Python2-2.7 and later

- bpo-19417: Add test_bdb.py.

- bpo-31809: Add tests to verify connection with secp ECDH curves.

Build
-----

- bpo-34691: The _contextvars module is now built into the core Python
  library on Windows.

- bpo-35683: Improved Azure Pipelines build steps and now verifying layouts
  correctly

- bpo-35642: Remove asynciomodule.c from pythoncore.vcxproj

- bpo-35550: Fix incorrect Solaris #ifdef checks to look for __sun && __SVR4
  instead of sun when compiling.

- bpo-35499: ``make profile-opt`` no longer replaces ``CFLAGS_NODIST`` with
  ``CFLAGS``. It now adds profile-guided optimization (PGO) flags to
  ``CFLAGS_NODIST``: existing ``CFLAGS_NODIST`` flags are kept.

- bpo-35257: Avoid leaking the linker flags from Link Time Optimizations
  (LTO) into distutils when compiling C extensions.

- bpo-35351: When building Python with clang and LTO, LTO flags are no
  longer passed into CFLAGS to build third-party C extensions through
  distutils.

- bpo-35139: Fix a compiler error when statically linking `pyexpat` in
  `Modules/Setup`.

- bpo-35059: PCbuild: Set InlineFunctionExpansion to OnlyExplicitInline
  ("/Ob1" option) in pyproject.props in Debug mode to expand functions
  marked as inline. This change should make Python compiled in Debug mode a
  little bit faster on Windows.

- bpo-35011: Restores the use of pyexpatns.h to isolate our embedded copy of
  the expat C library so that its symbols do not conflict at link or dynamic
  loading time with an embedding application or other extension modules with
  their own version of libexpat.

- bpo-28015: Have --with-lto works correctly with clang.

- bpo-34765: Update the outdated install-sh file to the latest revision from
  automake v1.16.1

- bpo-34585: Check for floating-point byte order in configure.ac using
  compilation tests instead of executing code, so that these checks work in
  cross-compiled builds.

- bpo-34710: Fixed SSL module build with OpenSSL & pedantic CFLAGS.

- bpo-34582: Add JUnit XML output for regression tests and update Azure
  DevOps builds.

- bpo-34081: Make Sphinx warnings as errors in the Docs Makefile.

- bpo-34555: Fix for case where it was not possible to have both
  ``HAVE_LINUX_VM_SOCKETS_H`` and ``HAVE_SOCKADDR_ALG`` be undefined.

- bpo-33015: Fix an undefined behaviour in the pthread implementation of
  :c:func:`PyThread_start_new_thread`: add a function wrapper to always
  return ``NULL``.

- bpo-34245: The Python shared library is now installed with write
  permission (mode 0755), which is the standard way of installing such
  libraries.

- bpo-34121: Fix detection of C11 atomic support on clang.

- bpo-32430: Rename Modules/Setup.dist to Modules/Setup, and remove the
  necessity to copy the former manually to the latter when updating the
  local source tree.

- bpo-30345: Add -g to LDFLAGS when compiling with LTO to get debug symbols.

- bpo-5755: Move ``-Wstrict-prototypes`` option to ``CFLAGS_NODIST`` from
  ``OPT``. This option emitted annoying warnings when building extension
  modules written in C++.

- bpo-33614: Ensures module definition files for the stable ABI on Windows
  are correctly regenerated.

- bpo-33648: The --with-c-locale-warning configuration flag has been
  removed. It has had no effect for about a year.

- bpo-33522: Enable CI builds on Visual Studio Team Services at
  https://python.visualstudio.com/cpython

- bpo-33512: configure's check for "long double" has been simplified

- bpo-33483: C compiler is now correctly detected from the standard
  environment variables. --without-gcc and --with-icc options have been
  removed.

- bpo-33394: Enable the verbose build for extension modules, when GNU make
  is passed macros on the command line.

- bpo-33393: Update config.guess and config.sub files.

- bpo-33377: Add new triplets for mips r6 and riscv variants (used in
  extension suffixes).

- bpo-32232: By default, modules configured in `Modules/Setup` are no longer
  built with `-DPy_BUILD_CORE`. Instead, modules that specifically need that
  preprocessor definition include it in their individual entries.

- bpo-33182: The embedding tests can once again be built with clang 6.0

- bpo-33163: Upgrade pip to 9.0.3 and setuptools to v39.0.1.

- bpo-33012: gcc 8 has added a new warning heuristic to detect invalid
  function casts and a stock python build seems to hit that warning quite
  often.  The most common is the cast of a METH_NOARGS function (that uses
  just one argument) to a PyCFunction. Fix this by adding a dummy argument
  to all functions that implement METH_NOARGS.

- bpo-32898: Fix the python debug build when using COUNT_ALLOCS.

- bpo-29442: Replace optparse with argparse in setup.py

Windows
-------

- bpo-35890: Fix API calling consistency of GetVersionEx and wcstok.

- bpo-32560: The ``py`` launcher now forwards its ``STARTUPINFO`` structure
  to child processes.

- bpo-35854: Fix EnvBuilder and --symlinks in venv on Windows

- bpo-35811: Avoid propagating venv settings when launching via py.exe

- bpo-35797: Fix default executable used by the multiprocessing module

- bpo-35758: Allow building on ARM with MSVC.

- bpo-29734: Fix handle leaks in os.stat on Windows.

- bpo-35596: Use unchecked PYCs for the embeddable distro to avoid zipimport
  restrictions.

- bpo-35596: Fix vcruntime140.dll being added to embeddable distro multiple
  times.

- bpo-35402: Update Windows build to use Tcl and Tk 8.6.9

- bpo-35401: Updates Windows build to OpenSSL 1.1.0j

- bpo-34977: venv on Windows will now use a python.exe redirector rather
  than copying the actual binaries from the base environment.

- bpo-34977: Adds support for building a Windows App Store package

- bpo-35067: Remove _distutils_findvs module and use vswhere.exe instead.

- bpo-32557: Allow shutil.disk_usage to take a file path on Windows

- bpo-34770: Fix a possible null pointer dereference in pyshellext.cpp.

- bpo-34603: Fix returning structs from functions produced by MSVC

- bpo-34581: Guard MSVC-specific code in socketmodule.c with ``#ifdef
  _MSC_VER``.

- bpo-34532: Fixes exit code of list version arguments for py.exe.

- bpo-34062: Fixed the '--list' and '--list-paths' arguments for the py.exe
  launcher

- bpo-34225: Ensure INCLUDE and LIB directories do not end with a backslash.

- bpo-34011: A suite of code has been changed which copied across DLLs and
  init.tcl from the running Python location into a venv being created. These
  copies are needed only when running from a Python source build, and the
  copying code is now only run when that is the case, rather than whenever a
  venv is created.

- bpo-34006: Revert line length limit for Windows help docs. The line-length
  limit is not needed because the pages appear in a separate app rather than
  on a browser tab.  It can also interact badly with the DPI setting.

- bpo-31546: Restore running PyOS_InputHook while waiting for user input at
  the prompt. The restores integration of interactive GUI windows (such as
  Matplotlib figures) with the prompt on Windows.

- bpo-30237: Output error when ReadConsole is canceled by
  CancelSynchronousIo instead of crashing.

- bpo-33895: GIL is released while calling functions that acquire Windows
  loader lock.

- bpo-33720: Reduces maximum marshal recursion depth on release builds.

- bpo-29097: Fix bug where :meth:`datetime.fromtimestamp` erroneously throws
  an :exc:`OSError` on Windows for values between 0 and 86400. Patch by
  Ammar Askar.

- bpo-33316: PyThread_release_lock always fails

- bpo-33184: Update Windows installer to use OpenSSL 1.1.0h.

- bpo-32890: Fix usage of GetLastError() instead of errno in os.execve() and
  os.truncate().

- bpo-33016: Fix potential use of uninitialized memory in
  nt._getfinalpathname

- bpo-32903: Fix a memory leak in os.chdir() on Windows if the current
  directory is set to a UNC path.

- bpo-32901: Update Tcl and Tk versions to 8.6.8

- bpo-31966: Fixed WindowsConsoleIO.write() for writing empty data.

- bpo-32409: Ensures activate.bat can handle Unicode contents.

- bpo-32457: Improves handling of denormalized executable path when
  launching Python.

- bpo-32370: Use the correct encoding for ipconfig output in the uuid
  module. Patch by Segev Finer.

- bpo-29248: Fix :func:`os.readlink` on Windows, which was mistakenly
  treating the ``PrintNameOffset`` field of the reparse data buffer as a
  number of characters instead of bytes. Patch by Craig Holmquist and SSE4.

- bpo-1104: Correctly handle string length in
  ``msilib.SummaryInfo.GetProperty()`` to prevent it from truncating the
  last character.

macOS
-----

- bpo-35401: Update macOS installer to use OpenSSL 1.1.0j.

- bpo-35025: Properly guard the use of the ``CLOCK_GETTIME`` et al. macros
  in ``timemodule`` on macOS.

- bpo-24658: On macOS, fix reading from and writing into a file with a size
  larger than 2 GiB.

- bpo-34405: Update to OpenSSL 1.1.0i for macOS installer builds.

- bpo-33635: In macOS stat on some file descriptors (/dev/fd/3 f.e) will
  result in bad file descriptor OSError. Guard against this exception was
  added in is_dir, is_file and similar methods. DirEntry.is_dir can also
  throw this exception so _RecursiveWildcardSelector._iterate_directories
  was also extended with the same error ignoring pattern.

- bpo-13631: The .editrc file in user's home directory is now processed
  correctly during the readline initialization through editline emulation on
  macOS.

- bpo-33184: Update macOS installer build to use OpenSSL 1.1.0h.

- bpo-32726: Build and link with private copy of Tcl/Tk 8.6 for the macOS
  10.6+ installer. The 10.9+ installer variant already does this.  This
  means that the Python 3.7 provided by the python.org macOS installers no
  longer need or use any external versions of Tcl/Tk, either system-provided
  or user-installed, such as ActiveTcl.

- bpo-32901: Update macOS 10.9+ installer to Tcl/Tk 8.6.8.

- bpo-31903: In :mod:`_scproxy`, drop the GIL when calling into
  ``SystemConfiguration`` to avoid deadlocks.

IDLE
----

- bpo-35770: IDLE macosx deletes Options => Configure IDLE. It previously
  deleted Window => Zoom Height by mistake. (Zoom Height is now on the
  Options menu).  On Mac, the settings dialog is accessed via Preferences on
  the IDLE menu.

- bpo-35769: Change IDLE's new file name from 'Untitled' to 'untitled'

- bpo-35660: Fix imports in idlelib.window.

- bpo-35641: Proper format `calltip` when the function has no docstring.

- bpo-33987: Use ttk Frame for ttk widgets.

- bpo-34055: Fix erroneous 'smart' indents and newlines in IDLE Shell.

- bpo-35591: Find Selection now works when selection not found.

- bpo-35196: Speed up squeezer line counting.

- bpo-35598: Update config_key: use PEP 8 names and ttk widgets, make some
  objects global, and add tests.

- bpo-28097: Add Previous/Next History entries to Shell menu.

- bpo-35208: Squeezer now properly counts wrapped lines before newlines.

- bpo-35555: Gray out Code Context menu entry when it's not applicable.

- bpo-35521: Document the IDLE editor code context feature. Add some
  internal references within the IDLE doc.

- bpo-22703: The Code Context menu label now toggles between Show/Hide Code
  Context. The Zoom Height menu now toggles between Zoom/Restore Height.
  Zoom Height has moved from the Window menu to the Options menu.

- bpo-35213: Where appropriate, use 'macOS' in idlelib.

- bpo-34864: On macOS, warn if the system preference "Prefer tabs when
  opening documents" is set to "Always".

- bpo-34864: Document two IDLE on MacOS issues. The System Preferences Dock
  "prefer tabs always" setting disables some IDLE features.  Menus are a bit
  different than as described for Windows and Linux.

- bpo-35202: Remove unused imports from lib/idlelib

- bpo-33000: Document that IDLE's shell has no line limit. A program that
  runs indefinitely can overfill memory.

- bpo-23220: Explain how IDLE's Shell displays output.

- bpo-35099: Improve the doc about IDLE running user code.   The section is
  renamed from "IDLE -- console differences" is renamed "Running user code".
  It mostly covers the implications of using custom sys.stdxxx objects.

- bpo-35097: Add IDLE doc subsection explaining editor windows. Topics
  include opening, title and status bar, .py* extension, and running.

- bpo-35093: Document the IDLE document viewer in the IDLE doc. Add a
  paragraph in "Help and preferences", "Help sources" subsection.

- bpo-35088: Update idlelib.help.copy_string docstring. We now use git and
  backporting instead of hg and forward merging.

- bpo-35087: Update idlelib help files for the current doc build. The main
  change is the elimination of chapter-section numbers.

- bpo-34548: Use configured color theme for read-only text views.

- bpo-1529353: Enable "squeezing" of long outputs in the shell, to avoid
  performance degradation and to clean up the history without losing it.
  Squeezed outputs may be copied, viewed in a separate window, and
  "unsqueezed".

- bpo-34047: Fixed mousewheel scrolling direction on macOS.

- bpo-34275: Make IDLE calltips always visible on Mac. Some MacOS-tk
  combinations need .update_idletasks(). Patch by Kevin Walzer.

- bpo-34120: Fix unresponsiveness after closing certain windows and dialogs.

- bpo-33975: Avoid small type when running htests. Since part of the purpose
  of human-viewed tests is to determine that widgets look right, it is
  important that they look the same for testing as when running IDLE.

- bpo-33905: Add test for idlelib.stackview.StackBrowser.

- bpo-33924: Change mainmenu.menudefs key 'windows' to 'window'. Every other
  menudef key is lowercase version of main menu entry.

- bpo-33906: Rename idlelib.windows as window Match Window on the main menu
  and remove last plural module name.

- bpo-33917: Fix and document idlelib/idle_test/template.py. The revised
  file compiles, runs, and tests OK.  idle_test/README.txt explains how to
  use it to create new IDLE test files.

- bpo-33904: IDLE: In rstrip, rename class RstripExtension as Rstrip

- bpo-33907: For consistency and clarity, rename an IDLE module and classes.
  Module calltips and its class CallTips are now calltip and Calltip. In
  module calltip_w, class CallTip is now CalltipWindow.

- bpo-33856: Add "help" in the welcome message of IDLE

- bpo-33839: IDLE: refactor ToolTip and CallTip and add documentation and
  tests

- bpo-33855: Minimally test all IDLE modules. Add missing files, import
  module, instantiate classes, and check coverage. Check existing files.

- bpo-33656: On Windows, add API call saying that tk scales for DPI. On
  Windows 8.1+ or 10, with DPI compatibility properties of the Python binary
  unchanged, and a monitor resolution greater than 96 DPI, this should make
  text and lines sharper.  It should otherwise have no effect.

- bpo-33768: Clicking on a context line moves that line to the top of the
  editor window.

- bpo-33763: IDLE: Use read-only text widget for code context instead of
  label widget.

- bpo-33664: Scroll IDLE editor text by lines. Previously, the mouse wheel
  and scrollbar slider moved text by a fixed number of pixels, resulting in
  partial lines at the top of the editor box.  The change also applies to
  the shell and grep output windows, but not to read-only text views.

- bpo-33679: Enable theme-specific color configuration for Code Context. Use
  the Highlights tab to see the setting for built-in themes or add settings
  to custom themes.

- bpo-33642: Display up to maxlines non-blank lines for Code Context. If
  there is no current context, show a single blank line.

- bpo-33628: IDLE: Cleanup codecontext.py and its test.

- bpo-33564: IDLE's code context now recognizes async as a block opener.

- bpo-21474: Update word/identifier definition from ascii to unicode. In
  text and entry boxes, this affects selection by double-click, movement
  left/right by control-left/right, and deletion left/right by
  control-BACKSPACE/DEL.

- bpo-33204: IDLE: consistently color invalid string prefixes. A 'u' string
  prefix cannot be paired with either 'r' or 'f'. Consistently color as much
  of the prefix, starting at the right, as is valid. Revise and extend
  colorizer test.

- bpo-32984: Set ``__file__`` while running a startup file.  Like Python,
  IDLE optionally runs one startup file in the Shell window before
  presenting the first interactive input prompt.  For IDLE, ``-s`` runs a
  file named in environmental variable  :envvar:`IDLESTARTUP` or
  :envvar:`PYTHONSTARTUP`; ``-r file`` runs ``file``.  Python sets
  ``__file__`` to the startup file name before running the file and unsets
  it before the first prompt.  IDLE now does the same when run normally,
  without the ``-n`` option.

- bpo-32940: Simplify and rename StringTranslatePseudoMapping in pyparse.

- bpo-32916: Change ``str`` to ``code`` in pyparse.

- bpo-32905: Remove unused code in pyparse module.

- bpo-32874: Add tests for pyparse.

- bpo-32837: Using the system and place-dependent default encoding for
  open() is a bad idea for IDLE's system and location-independent files.

- bpo-32826: Add "encoding=utf-8" to open() in IDLE's test_help_about. GUI
  test test_file_buttons() only looks at initial ascii-only lines, but
  failed on systems where open() defaults to 'ascii' because readline()
  internally reads and decodes far enough ahead to encounter a non-ascii
  character in CREDITS.txt.

- bpo-32831: Add docstrings and tests for codecontext.

- bpo-32765: Update configdialog General tab docstring to add new widgets to
  the widget list.

Tools/Demos
-----------

- bpo-35884: Add a benchmark script for timing various ways to access
  variables: ``Tools/scripts/var_access_benchmark.py``.

- bpo-34989: python-gdb.py now handles errors on computing the line number
  of a Python frame.

- bpo-20260: Argument Clinic now has non-bitwise unsigned int converters.

- bpo-32962: python-gdb now catches ``UnicodeDecodeError`` exceptions when
  calling ``string()``.

- bpo-32962: python-gdb now catches ValueError on read_var(): when Python
  has no debug symbols for example.

- bpo-33189: :program:`pygettext.py` now recognizes only literal strings as
  docstrings and translatable strings, and rejects bytes literals and
  f-string expressions.

- bpo-31920: Fixed handling directories as arguments in the ``pygettext``
  script. Based on patch by Oleg Krasnikov.

- bpo-29673: Fix pystackv and pystack gdbinit macros.

- bpo-25427: Remove the pyvenv script in favor of ``python3 -m venv`` in
  order to lower confusion as to what Python interpreter a virtual
  environment will be created for.

- bpo-32885: Add an ``-n`` flag for ``Tools/scripts/pathfix.py`` to disable
  automatic backup creation (files with ``~`` suffix).

- bpo-32222: Fix pygettext not extracting docstrings for functions with type
  annotated arguments. Patch by Toby Harradine.

- bpo-31583: Fix 2to3 for using with --add-suffix option but without
  --output-dir option for relative path to files in current directory.

C API
-----

- bpo-35713: The :c:func:`PyByteArray_Init` and :c:func:`PyByteArray_Fini`
  functions have been removed. They did nothing since Python 2.7.4 and
  Python 3.2.0, were excluded from the limited API (stable ABI), and were
  not documented.

- bpo-33817: Fixed :c:func:`_PyBytes_Resize` for empty bytes objects.

- bpo-35322: Fix memory leak in :c:func:`PyUnicode_EncodeLocale` and
  :c:func:`PyUnicode_EncodeFSDefault` on error handling.

- bpo-35059: The following C macros have been converted to static inline
  functions: :c:func:`Py_INCREF`, :c:func:`Py_DECREF`, :c:func:`Py_XINCREF`,
  :c:func:`Py_XDECREF`, :c:func:`PyObject_INIT`,
  :c:func:`PyObject_INIT_VAR`.

- bpo-35296: ``make install`` now also installs the internal API:
  ``Include/internal/*.h`` header files.

- bpo-35081: Internal APIs surrounded by ``#ifdef Py_BUILD_CORE`` have been
  moved from ``Include/*.h`` headers to new header files
  ``Include/internal/pycore_*.h``.

- bpo-35259: Conditionally declare :c:func:`Py_FinalizeEx()` (new in 3.6)
  based on Py_LIMITED_API. Patch by Arthur Neufeld.

- bpo-35081: The :c:func:`_PyObject_GC_TRACK` and
  :c:func:`_PyObject_GC_UNTRACK` macros have been removed from the public C
  API.

- bpo-35134: Creation of a new ``Include/cpython/`` subdirectory.

- bpo-34725: Adds _Py_SetProgramFullPath so embedders may override
  sys.executable

- bpo-34910: Ensure that :c:func:`PyObject_Print` always returns ``-1`` on
  error.  Patch by Zackery Spytz.

- bpo-34523: Py_DecodeLocale() and Py_EncodeLocale() now use the UTF-8
  encoding on Windows if Py_LegacyWindowsFSEncodingFlag is zero.

- bpo-34193: Fix pluralization in TypeError messages in getargs.c and
  typeobject.c: '1 argument' instead of '1 arguments' and '1 element'
  instead of '1 elements'.

- bpo-34127: Return grammatically correct error message based on argument
  count. Patch by Karthikeyan Singaravelan.

- bpo-23927: Fixed :exc:`SystemError` in
  :c:func:`PyArg_ParseTupleAndKeywords` when the ``w*`` format unit is used
  for optional parameter.

- bpo-32455: Added :c:func:`PyCompile_OpcodeStackEffectWithJump`.

- bpo-34008: Py_Main() can again be called after Py_Initialize(), as in
  Python 3.6.

- bpo-32500: Fixed error messages for :c:func:`PySequence_Size`,
  :c:func:`PySequence_GetItem`, :c:func:`PySequence_SetItem` and
  :c:func:`PySequence_DelItem` called with a mapping and
  :c:func:`PyMapping_Size` called with a sequence.

- bpo-33818: :c:func:`PyExceptionClass_Name` will now return ``const char
  *`` instead of ``char *``.

- bpo-33042: Embedding applications may once again call
  PySys_ResetWarnOptions, PySys_AddWarnOption, and PySys_AddXOption prior to
  calling Py_Initialize.

- bpo-32374: Document that m_traverse for multi-phase initialized modules
  can be called with m_state=NULL, and add a sanity check

- bpo-30863: :c:func:`PyUnicode_AsWideChar` and
  :c:func:`PyUnicode_AsWideCharString` no longer cache the ``wchar_t*``
  representation of string objects.


What's New in Python 3.7.0 final?
=================================

*Release date: 2018-06-27*

Library
-------

- bpo-33851: Fix :func:`ast.get_docstring` for a node that lacks a
  docstring.

C API
-----

- bpo-33932: Calling Py_Initialize() twice does nothing, instead of failing
  with a fatal error: restore the Python 3.6 behaviour.


What's New in Python 3.7.0 release candidate 1?
===============================================

*Release date: 2018-06-12*

Core and Builtins
-----------------

- bpo-33803: Fix a crash in hamt.c caused by enabling GC tracking for an
  object that hadn't all of its fields set to NULL.

- bpo-33706: Fix a crash in Python initialization when parsing the command
  line options. Thanks Christoph Gohlke for the bug report and the fix!

- bpo-30654: Fixed reset of the SIGINT handler to SIG_DFL on interpreter
  shutdown even when there was a custom handler set previously. Patch by
  Philipp Kerling.

- bpo-31849: Fix signed/unsigned comparison warning in pyhash.c.

Library
-------

- bpo-30167: Prevent site.main() exception if PYTHONSTARTUP is set. Patch by
  Steve Weber.

- bpo-33812: Datetime instance d with non-None tzinfo, but with
  d.tzinfo.utcoffset(d) returning None is now treated as naive by the
  astimezone() method.

- bpo-30805: Avoid race condition with debug logging

- bpo-33694: asyncio: Fix a race condition causing data loss on
  pause_reading()/resume_reading() when using the ProactorEventLoop.

- bpo-32493: Correct test for ``uuid_enc_be`` availability in
  ``configure.ac``. Patch by Michael Felt.

- bpo-33792: Add asyncio.WindowsSelectorEventLoopPolicy and
  asyncio.WindowsProactorEventLoopPolicy.

- bpo-33778: Update ``unicodedata``'s database to Unicode version 11.0.0.

- bpo-33770: improve base64 exception message for encoded inputs of invalid
  length

- bpo-33769: asyncio/start_tls: Fix error message; cancel callbacks in case
  of an unhandled error; mark SSLTransport as closed if it is aborted.

- bpo-33767: The concatenation (``+``) and repetition (``*``) sequence
  operations now raise :exc:`TypeError` instead of :exc:`SystemError` when
  performed on :class:`mmap.mmap` objects.  Patch by Zackery Spytz.

- bpo-33734: asyncio/ssl: Fix AttributeError, increase default handshake
  timeout

- bpo-11874: Use a better regex when breaking usage into wrappable parts.
  Avoids bogus assertion errors from custom metavar strings.

- bpo-33582: Emit a deprecation warning for inspect.formatargspec

Documentation
-------------

- bpo-33409: Clarified the relationship between :pep:`538`'s
  PYTHONCOERCECLOCALE and PEP 540's PYTHONUTF8 mode.

- bpo-33736: Improve the documentation of :func:`asyncio.open_connection`,
  :func:`asyncio.start_server` and their UNIX socket counterparts.

- bpo-31432: Clarify meaning of CERT_NONE, CERT_OPTIONAL, and CERT_REQUIRED
  flags for ssl.SSLContext.verify_mode.

Build
-----

- bpo-5755: Move ``-Wstrict-prototypes`` option to ``CFLAGS_NODIST`` from
  ``OPT``. This option emitted annoying warnings when building extension
  modules written in C++.

Windows
-------

- bpo-33720: Reduces maximum marshal recursion depth on release builds.

IDLE
----

- bpo-33656: On Windows, add API call saying that tk scales for DPI. On
  Windows 8.1+ or 10, with DPI compatibility properties of the Python binary
  unchanged, and a monitor resolution greater than 96 DPI, this should make
  text and lines sharper.  It should otherwise have no effect.

- bpo-33768: Clicking on a context line moves that line to the top of the
  editor window.

- bpo-33763: IDLE: Use read-only text widget for code context instead of
  label widget.

- bpo-33664: Scroll IDLE editor text by lines. Previously, the mouse wheel
  and scrollbar slider moved text by a fixed number of pixels, resulting in
  partial lines at the top of the editor box.  The change also applies to
  the shell and grep output windows, but not to read-only text views.

- bpo-33679: Enable theme-specific color configuration for Code Context. Use
  the Highlights tab to see the setting for built-in themes or add settings
  to custom themes.

- bpo-33642: Display up to maxlines non-blank lines for Code Context. If
  there is no current context, show a single blank line.


What's New in Python 3.7.0 beta 5?
==================================

*Release date: 2018-05-30*

Core and Builtins
-----------------

- bpo-33622: Fixed a leak when the garbage collector fails to add an object
  with the ``__del__`` method or referenced by it into the
  :data:`gc.garbage` list. :c:func:`PyGC_Collect` can now be called when an
  exception is set and preserves it.

- bpo-33509: Fix module_globals parameter of warnings.warn_explicit(): don't
  crash if module_globals is not a dict.

- bpo-20104: The new `os.posix_spawn` added in 3.7.0b1 was removed as we are
  still working on what the API should look like.  Expect this in 3.8
  instead.

- bpo-33475: Fixed miscellaneous bugs in converting annotations to strings
  and optimized parentheses in the string representation.

- bpo-33391: Fix a leak in set_symmetric_difference().

- bpo-28055: Fix unaligned accesses in siphash24(). Patch by Rolf Eike Beer.

- bpo-32911: Due to unexpected compatibility issues discovered during
  downstream beta testing, reverted :issue:`29463`. ``docstring`` field is
  removed from Module, ClassDef, FunctionDef, and AsyncFunctionDef ast nodes
  which was added in 3.7a1.  Docstring expression is restored as a first
  statement in their body. Based on patch by Inada Naoki.

- bpo-21983: Fix a crash in `ctypes.cast()` in case the type argument is a
  ctypes structured data type. Patch by Eryk Sun and Oren Milman.

Library
-------

- bpo-32751: When cancelling the task due to a timeout,
  :meth:`asyncio.wait_for` will now wait until the cancellation is complete.

- bpo-32684: Fix gather to propagate cancellation of itself even with
  return_exceptions.

- bpo-33654: Support protocol type switching in SSLTransport.set_protocol().

- bpo-33674: Pause the transport as early as possible to further reduce the
  risk of data_received() being called before connection_made().

- bpo-33674: Fix a race condition in SSLProtocol.connection_made() of
  asyncio.sslproto: start immediately the handshake instead of using
  call_soon(). Previously, data_received() could be called before the
  handshake started, causing the handshake to hang or fail.

- bpo-31647: Fixed bug where calling write_eof() on a
  _SelectorSocketTransport after it's already closed raises AttributeError.

- bpo-32610: Make asyncio.all_tasks() return only pending tasks.

- bpo-32410: Avoid blocking on file IO in sendfile fallback code

- bpo-33469: Fix RuntimeError after closing loop that used run_in_executor

- bpo-33672: Fix Task.__repr__ crash with Cython's bogus coroutines

- bpo-33654: Fix transport.set_protocol() to support switching between
  asyncio.Protocol and asyncio.BufferedProtocol.  Fix loop.start_tls() to
  work with asyncio.BufferedProtocols.

- bpo-33652: Pickles of type variables and subscripted generics are now
  future-proof and compatible with older Python versions.

- bpo-32493: Fixed :func:`uuid.uuid1` on FreeBSD.

- bpo-33618: Finalize and document preliminary and experimental TLS 1.3
  support with OpenSSL 1.1.1

- bpo-33623: Fix possible SIGSGV when asyncio.Future is created in __del__

- bpo-30877: Fixed a bug in the Python implementation of the JSON decoder
  that prevented the cache of parsed strings from clearing after finishing
  the decoding. Based on patch by c-fos.

- bpo-33570: Change TLS 1.3 cipher suite settings for compatibility with
  OpenSSL 1.1.1-pre6 and newer. OpenSSL 1.1.1 will have TLS 1.3 ciphers
  enabled by default.

- bpo-28556: Do not simplify arguments to `typing.Union`. Now
  `Union[Manager, Employee]` is not simplified to `Employee` at runtime.
  Such simplification previously caused several bugs and limited
  possibilities for introspection.

- bpo-33540: Add a new ``block_on_close`` class attribute to
  ``ForkingMixIn`` and ``ThreadingMixIn`` classes of :mod:`socketserver`.

- bpo-33548: tempfile._candidate_tempdir_list should consider common TEMP
  locations

- bpo-33109: argparse subparsers are once again not required by default,
  reverting the change in behavior introduced by bpo-26510 in 3.7.0a2.

- bpo-33536: dataclasses.make_dataclass now checks for invalid field names
  and duplicate fields. Also, added a check for invalid field
  specifications.

- bpo-33542: Prevent ``uuid.get_node`` from using a DUID instead of a MAC on
  Windows. Patch by Zvi Effron

- bpo-26819: Fix race condition with `ReadTransport.resume_reading` in
  Windows proactor event loop.

- Fix failure in `typing.get_type_hints()` when ClassVar was provided as a
  string forward reference.

- bpo-33505: Optimize asyncio.ensure_future() by reordering if checks: 1.17x
  faster.

- bpo-33497: Add errors param to cgi.parse_multipart and make an encoding in
  FieldStorage use the given errors (needed for Twisted).  Patch by Amber
  Brown.

- bpo-33495: Change dataclasses.Fields repr to use the repr of each of its
  members, instead of str.  This makes it more clear what each field
  actually represents.  This is especially true for the 'type' member.

- bpo-33453: Fix dataclasses to work if using literal string type
  annotations or if using PEP 563 "Postponed Evaluation of Annotations".
  Only specific string prefixes are detected for both ClassVar ("ClassVar"
  and "typing.ClassVar") and InitVar ("InitVar" and "dataclasses.InitVar").

- bpo-28556: Minor fixes in typing module: add annotations to
  ``NamedTuple.__new__``, pass ``*args`` and ``**kwds`` in
  ``Generic.__new__``.  Original PRs by Paulius Šarka and Chad Dombrova.

- bpo-20087: Updated alias mapping with glibc 2.27 supported locales.

- bpo-33422: Fix trailing quotation marks getting deleted when looking up
  byte/string literals on pydoc. Patch by Andrés Delfino.

- bpo-28167: The function ``platform.linux_distribution`` and
  ``platform.dist`` now trigger a ``DeprecationWarning`` and have been
  marked for removal in Python 3.8

- bpo-33197: Update error message when constructing invalid
  inspect.Parameters Patch by Dong-hee Na.

- bpo-33263: Fix FD leak in `_SelectorSocketTransport`  Patch by Vlad
  Starostin.

- bpo-32861: The urllib.robotparser's ``__str__`` representation now
  includes wildcard entries and the "Crawl-delay" and "Request-rate" fields.
  Patch by Michael Lazar.

- bpo-32257: The ssl module now contains OP_NO_RENEGOTIATION constant,
  available with OpenSSL 1.1.0h or 1.1.1.

- bpo-16865: Support arrays >=2GiB in :mod:`ctypes`.  Patch by Segev Finer.

Documentation
-------------

- bpo-23859: Document that `asyncio.wait()` does not cancel its futures on
  timeout.

- bpo-32436: Document :pep:`567` changes to asyncio.

- bpo-33604: Update HMAC md5 default to a DeprecationWarning, bump removal
  to 3.8.

- bpo-33503: Fix broken pypi link

- bpo-33421: Add missing documentation for ``typing.AsyncContextManager``.

Tests
-----

- bpo-33655: Ignore test_posix_fallocate failures on BSD platforms that
  might be due to running on ZFS.

- bpo-32604: Remove the _xxsubinterpreters module (meant for testing) and
  associated helpers.  This module was originally added recently in 3.7b1.

Build
-----

- bpo-33614: Ensures module definition files for the stable ABI on Windows
  are correctly regenerated.

- bpo-33522: Enable CI builds on Visual Studio Team Services at
  https://python.visualstudio.com/cpython

- bpo-33012: Add ``-Wno-cast-function-type`` for gcc 8 for silencing
  warnings about function casts like casting to PyCFunction in method
  definition lists.

macOS
-----

- bpo-13631: The .editrc file in user's home directory is now processed
  correctly during the readline initialization through editline emulation on
  macOS.

IDLE
----

- bpo-33628: IDLE: Cleanup codecontext.py and its test.

- bpo-33564: IDLE's code context now recognizes async as a block opener.

- bpo-32831: Add docstrings and tests for codecontext.


What's New in Python 3.7.0 beta 4?
==================================

*Release date: 2018-05-02*

Core and Builtins
-----------------

- bpo-33363: Raise a SyntaxError for ``async with`` and ``async for``
  statements outside of async functions.

- bpo-33128: Fix a bug that causes PathFinder to appear twice on
  sys.meta_path. Patch by Pablo Galindo Salgado.

- bpo-33312: Fixed clang ubsan (undefined behavior sanitizer) warnings in
  dictobject.c by adjusting how the internal struct _dictkeysobject shared
  keys structure is declared.

- bpo-33231: Fix potential memory leak in ``normalizestring()``.

- bpo-33205: Change dict growth function from
  ``round_up_to_power_2(used*2+hashtable_size/2)`` to
  ``round_up_to_power_2(used*3)``.  Previously, dict is shrinked only when
  ``used == 0``. Now dict has more chance to be shrinked.

- bpo-29922: Improved error messages in 'async with' when ``__aenter__()``
  or ``__aexit__()`` return non-awaitable object.

- bpo-33199: Fix ``ma_version_tag`` in dict implementation is uninitialized
  when copying from key-sharing dict.

Library
-------

- bpo-33281: Fix ctypes.util.find_library regression on macOS.

- bpo-33383: Fixed crash in the get() method of the :mod:`dbm.ndbm` database
  object when it is called with a single argument.

- bpo-33329: Fix multiprocessing regression on newer glibcs

- bpo-991266: Fix quoting of the ``Comment`` attribute of
  :class:`http.cookies.SimpleCookie`.

- bpo-33131: Upgrade bundled version of pip to 10.0.1.

- bpo-33308: Fixed a crash in the :mod:`parser` module when converting an ST
  object to a tree of tuples or lists with ``line_info=False`` and
  ``col_info=True``.

- bpo-33266: lib2to3 now recognizes ``rf'...'`` strings.

- bpo-11594: Ensure line-endings are respected when using lib2to3.

- bpo-33254: Have :func:`importlib.resources.contents` and
  :meth:`importlib.abc.ResourceReader.contents` return an :term:`iterable`
  instead of an :term:`iterator`.

- bpo-33256: Fix display of ``<module>`` call in the html produced by
  ``cgitb.html()``. Patch by Stéphane Blondon.

- bpo-33185: Fixed regression when running pydoc with the :option:`-m`
  switch. (The regression was introduced in 3.7.0b3 by the resolution of
  :issue:`33053`) This fix also changed pydoc to add ``os.getcwd()`` to
  :data:`sys.path` when necessary, rather than adding ``"."``.

- bpo-33169: Delete entries of ``None`` in :data:`sys.path_importer_cache`
  when :meth:`importlib.machinery.invalidate_caches` is called.

- bpo-33217: Deprecate looking up non-Enum objects in Enum classes and Enum
  members (will raise :exc:`TypeError` in 3.8+).

- bpo-33203: ``random.Random.choice()`` now raises ``IndexError`` for empty
  sequences consistently even when called from subclasses without a
  ``getrandbits()`` implementation.

- bpo-33224: Update difflib.mdiff() for :pep:`479`.  Convert an uncaught
  StopIteration in a generator into a return-statement.

- bpo-33209: End framing at the end of C implementation of
  :func:`pickle.Pickler.dump`.

- bpo-20104: Improved error handling and fixed a reference leak in
  :func:`os.posix_spawn()`.

- bpo-33175: In dataclasses, Field.__set_name__ now looks up the
  __set_name__ special method on the class, not the instance, of the default
  value.

- bpo-33097: Raise RuntimeError when ``executor.submit`` is called during
  interpreter shutdown.

- bpo-31908: Fix output of cover files for ``trace`` module command-line
  tool. Previously emitted cover files only when ``--missing`` option was
  used. Patch by Michael Selik.

Documentation
-------------

- bpo-33378: Add Korean language switcher for https://docs.python.org/3/

- bpo-33276: Clarify that the ``__path__`` attribute on modules cannot be
  just any value.

- bpo-33201: Modernize documentation for writing C extension types.

- bpo-33195: Deprecate ``Py_UNICODE`` usage in ``c-api/arg`` document.
  ``Py_UNICODE`` related APIs are deprecated since Python 3.3, but it is
  missed in the document.

- bpo-8243: Add a note about curses.addch and curses.addstr exception
  behavior when writing outside a window, or pad.

- bpo-32337: Update documentation related with ``dict`` order.

Tests
-----

- bpo-33358: Fix ``test_embed.test_pre_initialization_sys_options()`` when
  the interpreter is built with ``--enable-shared``.

Build
-----

- bpo-33394: Enable the verbose build for extension modules, when GNU make
  is passed macros on the command line.

- bpo-33393: Update config.guess and config.sub files.

- bpo-33377: Add new triplets for mips r6 and riscv variants (used in
  extension suffixes).

- bpo-32232: By default, modules configured in `Modules/Setup` are no longer
  built with `-DPy_BUILD_CORE`. Instead, modules that specifically need that
  preprocessor definition include it in their individual entries.

- bpo-33182: The embedding tests can once again be built with clang 6.0

Windows
-------

- bpo-33184: Update Windows installer to use OpenSSL 1.1.0h.

macOS
-----

- bpo-33184: Update macOS installer build to use OpenSSL 1.1.0h.

IDLE
----

- bpo-21474: Update word/identifier definition from ascii to unicode. In
  text and entry boxes, this affects selection by double-click, movement
  left/right by control-left/right, and deletion left/right by
  control-BACKSPACE/DEL.

- bpo-33204: IDLE: consistently color invalid string prefixes. A 'u' string
  prefix cannot be paired with either 'r' or 'f'. Consistently color as much
  of the prefix, starting at the right, as is valid. Revise and extend
  colorizer test.

Tools/Demos
-----------

- bpo-33189: :program:`pygettext.py` now recognizes only literal strings as
  docstrings and translatable strings, and rejects bytes literals and
  f-string expressions.

- bpo-31920: Fixed handling directories as arguments in the ``pygettext``
  script. Based on patch by Oleg Krasnikov.

- bpo-29673: Fix pystackv and pystack gdbinit macros.

- bpo-31583: Fix 2to3 for using with --add-suffix option but without
  --output-dir option for relative path to files in current directory.


What's New in Python 3.7.0 beta 3?
==================================

*Release date: 2018-03-29*

Security
--------

- bpo-33136: Harden ssl module against LibreSSL CVE-2018-8970.
  X509_VERIFY_PARAM_set1_host() is called with an explicit namelen. A new
  test ensures that NULL bytes are not allowed.

- bpo-33001: Minimal fix to prevent buffer overrun in os.symlink on Windows

- bpo-32981: Regexes in difflib and poplib were vulnerable to catastrophic
  backtracking. These regexes formed potential DOS vectors (REDOS). They
  have been refactored. This resolves CVE-2018-1060 and CVE-2018-1061. Patch
  by Jamie Davis.

Core and Builtins
-----------------

- bpo-33053: When using the -m switch, sys.path[0] is now explicitly
  expanded as the *starting* working directory, rather than being left as
  the empty path (which allows imports from the current working directory at
  the time of the import)

- bpo-33018: Improve consistency of errors raised by ``issubclass()`` when
  called with a non-class and an abstract base class as the first and second
  arguments, respectively. Patch by Josh Bronson.

- bpo-33041: Fixed jumping when the function contains an ``async for`` loop.

- bpo-33026: Fixed jumping out of "with" block by setting f_lineno.

- bpo-33005: Fix a crash on fork when using a custom memory allocator (ex:
  using PYTHONMALLOC env var). _PyGILState_Reinit() and
  _PyInterpreterState_Enable() now use the default RAW memory allocator to
  allocate a new interpreters mutex on fork.

- bpo-17288: Prevent jumps from 'return' and 'exception' trace events.

- bpo-32836: Don't use temporary variables in cases of list/dict/set
  comprehensions

Library
-------

- bpo-33141: Have Field objects pass through __set_name__ to their default
  values, if they have their own __set_name__.

- bpo-33096: Allow ttk.Treeview.insert to insert iid that has a false
  boolean value. Note iid=0 and iid=False would be same. Patch by Garvit
  Khatri.

- bpo-32873: Treat type variables and special typing forms as immutable by
  copy and pickle.  This fixes several minor issues and inconsistencies, and
  improves backwards compatibility with Python 3.6.

- bpo-33134: When computing dataclass's __hash__, use the lookup table to
  contain the function which returns the __hash__ value.  This is an
  improvement over looking up a string, and then testing that string to see
  what to do.

- bpo-33127: The ssl module now compiles with LibreSSL 2.7.1.

- bpo-32505: Raise TypeError if a member variable of a dataclass is of type
  Field, but doesn't have a type annotation.

- bpo-33078: Fix the failure on OSX caused by the tests relying on
  sem_getvalue

- bpo-33116: Add 'Field' to dataclasses.__all__.

- bpo-32896: Fix an error where subclassing a dataclass with a field that
  uses a default_factory would generate an incorrect class.

- bpo-33100: Dataclasses: If a field has a default value that's a
  MemberDescriptorType, then it's from that field being in __slots__, not an
  actual default value.

- bpo-32953: If a non-dataclass inherits from a frozen dataclass, allow
  attributes to be added to the derived class.  Only attributes from the
  frozen dataclass cannot be assigned to.  Require all dataclasses in a
  hierarchy to be either all frozen or all non-frozen.

- bpo-33061: Add missing ``NoReturn`` to ``__all__`` in typing.py

- bpo-33078: Fix the size handling in multiprocessing.Queue when a pickling
  error occurs.

- bpo-33064: lib2to3 now properly supports trailing commas after ``*args``
  and ``**kwargs`` in function signatures.

- bpo-33056: FIX properly close leaking fds in
  concurrent.futures.ProcessPoolExecutor.

- bpo-33021: Release the GIL during fstat() calls, avoiding hang of all
  threads when calling mmap.mmap(), os.urandom(), and random.seed().  Patch
  by Nir Soffer.

- bpo-31804: Avoid failing in multiprocessing.Process if the standard
  streams are closed or None at exit.

- bpo-33037: Skip sending/receiving data after SSL transport closing.

- bpo-27683: Fix a regression in :mod:`ipaddress` that result of
  :meth:`hosts` is empty when the network is constructed by a tuple
  containing an integer mask and only 1 bit left for addresses.

- bpo-32999: Fix C implementation of ``ABC.__subclasscheck__(cls,
  subclass)`` crashed when ``subclass`` is not a type object.

- bpo-33009: Fix inspect.signature() for single-parameter partialmethods.

- bpo-32969: Expose several missing constants in zlib and fix corresponding
  documentation.

- bpo-32056: Improved exceptions raised for invalid number of channels and
  sample width when read an audio file in modules :mod:`aifc`, :mod:`wave`
  and :mod:`sunau`.

- bpo-32844: Fix wrong redirection of a low descriptor (0 or 1) to stderr in
  subprocess if another low descriptor is closed.

- bpo-32857: In :mod:`tkinter`, ``after_cancel(None)`` now raises a
  :exc:`ValueError` instead of canceling the first scheduled function.
  Patch by Cheryl Sabella.

- bpo-31639: http.server now exposes a ThreadedHTTPServer class and uses it
  when the module is run with ``-m`` to cope with web browsers pre-opening
  sockets.

- bpo-27645: :class:`sqlite3.Connection` now exposes a
  :class:`~sqlite3.Connection.backup` method, if the underlying SQLite
  library is at version 3.6.11 or higher.  Patch by Lele Gaifax.

Documentation
-------------

- bpo-33126: Document PyBuffer_ToContiguous().

- bpo-27212: Modify documentation for the :func:`islice` recipe to consume
  initial values up to the start index.

- bpo-28247: Update :mod:`zipapp` documentation to describe how to make
  standalone applications.

- bpo-18802: Documentation changes for ipaddress.  Patch by Jon Foster and
  Berker Peksag.

- bpo-27428: Update documentation to clarify that ``WindowsRegistryFinder``
  implements ``MetaPathFinder``. (Patch by Himanshu Lakhara)

Tests
-----

- bpo-32872: Avoid regrtest compatibility issue with namespace packages.

- bpo-32517: Fix failing ``test_asyncio`` on macOS 10.12.2+ due to transport
  of ``KqueueSelector`` loop was not being closed.

- bpo-19417: Add test_bdb.py.

Build
-----

- bpo-33163: Upgrade pip to 9.0.3 and setuptools to v39.0.1.

Windows
-------

- bpo-33016: Fix potential use of uninitialized memory in
  nt._getfinalpathname

- bpo-32903: Fix a memory leak in os.chdir() on Windows if the current
  directory is set to a UNC path.

macOS
-----

- bpo-32726: Build and link with private copy of Tcl/Tk 8.6 for the macOS
  10.6+ installer. The 10.9+ installer variant already does this.  This
  means that the Python 3.7 provided by the python.org macOS installers no
  longer need or use any external versions of Tcl/Tk, either system-provided
  or user-installed, such as ActiveTcl.

IDLE
----

- bpo-32984: Set ``__file__`` while running a startup file.  Like Python,
  IDLE optionally runs one startup file in the Shell window before
  presenting the first interactive input prompt.  For IDLE, ``-s`` runs a
  file named in environmental variable  :envvar:`IDLESTARTUP` or
  :envvar:`PYTHONSTARTUP`; ``-r file`` runs ``file``.  Python sets
  ``__file__`` to the startup file name before running the file and unsets
  it before the first prompt.  IDLE now does the same when run normally,
  without the ``-n`` option.

- bpo-32940: Simplify and rename StringTranslatePseudoMapping in pyparse.

Tools/Demos
-----------

- bpo-32885: Add an ``-n`` flag for ``Tools/scripts/pathfix.py`` to disable
  automatic backup creation (files with ``~`` suffix).

C API
-----

- bpo-33042: Embedding applications may once again call
  PySys_ResetWarnOptions, PySys_AddWarnOption, and PySys_AddXOption prior to
  calling Py_Initialize.

- bpo-32374: Document that m_traverse for multi-phase initialized modules
  can be called with m_state=NULL, and add a sanity check


What's New in Python 3.7.0 beta 2?
==================================

*Release date: 2018-02-27*

Security
--------

- bpo-28414: The ssl module now allows users to perform their own IDN
  en/decoding when using SNI.

Core and Builtins
-----------------

- bpo-32889: Update Valgrind suppression list to account for the rename of
  ``Py_ADDRESS_IN_RANG`` to ``address_in_range``.

- bpo-31356: Remove the new API added in bpo-31356 (gc.ensure_disabled()
  context manager).

- bpo-32305: For namespace packages, ensure that both ``__file__`` and
  ``__spec__.origin`` are set to None.

- bpo-32303: Make sure ``__spec__.loader`` matches ``__loader__`` for
  namespace packages.

- bpo-32711: Fix the warning messages for Python/ast_unparse.c. Patch by
  Stéphane Wirtel

- bpo-32583: Fix possible crashing in builtin Unicode decoders caused by
  write out-of-bound errors when using customized decode error handlers.

Library
-------

- bpo-32960: For dataclasses, disallow inheriting frozen from non-frozen
  classes, and also disallow inheriting non-frozen from frozen classes. This
  restriction will be relaxed at a future date.

- bpo-32713: Fixed tarfile.itn handling of out-of-bounds float values. Patch
  by Joffrey Fuhrer.

- bpo-32951: Direct instantiation of SSLSocket and SSLObject objects is now
  prohibited. The constructors were never documented, tested, or designed as
  public constructors. Users were suppose to use ssl.wrap_socket() or
  SSLContext.

- bpo-32929: Remove the tri-state parameter "hash", and add the boolean
  "unsafe_hash". If unsafe_hash is True, add a __hash__ function, but if a
  __hash__ exists, raise TypeError.  If unsafe_hash is False, add a __hash__
  based on the values of eq= and frozen=.  The unsafe_hash=False behavior is
  the same as the old hash=None behavior.  unsafe_hash=False is the default,
  just as hash=None used to be.

- bpo-32947: Add OP_ENABLE_MIDDLEBOX_COMPAT and test workaround for TLSv1.3
  for future compatibility with OpenSSL 1.1.1.

- bpo-30622: The ssl module now detects missing NPN support in LibreSSL.

- bpo-32922: dbm.open() now encodes filename with the filesystem encoding
  rather than default encoding.

- bpo-32859: In ``os.dup2``, don't check every call whether the ``dup3``
  syscall exists or not.

- bpo-32556: nt._getfinalpathname, nt._getvolumepathname and
  nt._getdiskusage now correctly convert from bytes.

- bpo-25988: Emit a :exc:`DeprecationWarning` when using or importing an ABC
  directly from :mod:`collections` rather than from :mod:`collections.abc`.

- bpo-21060: Rewrite confusing message from setup.py upload from "No dist
  file created in earlier command" to the more helpful "Must create and
  upload files in one command".

- bpo-32852: Make sure sys.argv remains as a list when running trace.

- bpo-31333: ``_abc`` module is added.  It is a speedup module with C
  implementations for various functions and methods in ``abc``.  Creating an
  ABC subclass and calling ``isinstance`` or ``issubclass`` with an ABC
  subclass are up to 1.5x faster. In addition, this makes Python start-up up
  to 10% faster. Note that the new implementation hides internal registry
  and caches, previously accessible via private attributes
  ``_abc_registry``, ``_abc_cache``, and ``_abc_negative_cache``.  There are
  three debugging helper methods that can be used instead
  ``_dump_registry``, ``_abc_registry_clear``, and ``_abc_caches_clear``.

- bpo-32841: Fixed `asyncio.Condition` issue which silently ignored
  cancellation after notifying and cancelling a conditional lock. Patch by
  Bar Harel.

- bpo-32819: ssl.match_hostname() has been simplified and no longer depends
  on re and ipaddress module for wildcard and IP addresses. Error reporting
  for invalid wildcards has been improved.

- bpo-32394: socket: Remove
  TCP_FASTOPEN,TCP_KEEPCNT,TCP_KEEPIDLE,TCP_KEEPINTVL flags on older version
  Windows during run-time.

- bpo-31787: Fixed refleaks of ``__init__()`` methods in various modules.
  (Contributed by Oren Milman)

- bpo-30157: Fixed guessing quote and delimiter in csv.Sniffer.sniff() when
  only the last field is quoted.  Patch by Jake Davis.

- bpo-32792: collections.ChainMap() preserves the order of the underlying
  mappings.

- bpo-32775: :func:`fnmatch.translate()` no longer produces patterns which
  contain set operations. Sets starting with '[' or containing '--', '&&',
  '~~' or '||' will be interpreted differently in regular expressions in
  future versions. Currently they emit warnings. fnmatch.translate() now
  avoids producing patterns containing such sets by accident.

- bpo-32622: Implement native fast sendfile for Windows proactor event loop.

- bpo-32777: Fix a rare but potential pre-exec child process deadlock in
  subprocess on POSIX systems when marking file descriptors inheritable on
  exec in the child process.  This bug appears to have been introduced in
  3.4.

- bpo-32647: The ctypes module used to depend on indirect linking for
  dlopen. The shared extension is now explicitly linked against libdl on
  platforms with dl.

- bpo-32741: Implement ``asyncio.TimerHandle.when()`` method.

- bpo-32691: Use mod_spec.parent when running modules with pdb

- bpo-32734: Fixed ``asyncio.Lock()`` safety issue which allowed acquiring
  and locking the same lock multiple times, without it being free. Patch by
  Bar Harel.

- bpo-32727: Do not include name field in SMTP envelope from address. Patch
  by Stéphane Wirtel

- bpo-31453: Add TLSVersion constants and SSLContext.maximum_version /
  minimum_version attributes. The new API wraps OpenSSL 1.1
  https://www.openssl.org/docs/man1.1.0/ssl/SSL_CTX_set_min_proto_version.html
  feature.

- bpo-24334: Internal implementation details of ssl module were cleaned up.
  The SSLSocket has one less layer of indirection. Owner and session
  information are now handled by the SSLSocket and SSLObject constructor.
  Channel binding implementation has been simplified.

- bpo-31848: Fix the error handling in Aifc_read.initfp() when the SSND
  chunk is not found. Patch by Zackery Spytz.

- bpo-32585: Add Ttk spinbox widget to :mod:`tkinter.ttk`.  Patch by Alan D
  Moore.

- bpo-32221: Various functions returning tuple containing IPv6 addresses now
  omit ``%scope`` part since the same information is already encoded in
  *scopeid* tuple item. Especially this speeds up :func:`socket.recvfrom`
  when it receives multicast packet since useless resolving of network
  interface name is omitted.

- bpo-30693: The TarFile class now recurses directories in a reproducible
  way.

- bpo-30693: The ZipFile class now recurses directories in a reproducible
  way.

Documentation
-------------

- bpo-28124: The ssl module function ssl.wrap_socket() has been
  de-emphasized and deprecated in favor of the more secure and efficient
  SSLContext.wrap_socket() method.

- bpo-17232: Clarify docs for -O and -OO.  Patch by Terry Reedy.

- bpo-32436: Add documentation for the contextvars module (PEP 567).

- bpo-32800: Update link to w3c doc for xml default namespaces.

- bpo-11015: Update :mod:`test.support` documentation.

- bpo-8722: Document :meth:`__getattr__` behavior when property :meth:`get`
  method raises :exc:`AttributeError`.

- bpo-32614: Modify RE examples in documentation to use raw strings to
  prevent :exc:`DeprecationWarning` and add text to REGEX HOWTO to highlight
  the deprecation.

- bpo-31972: Improve docstrings for `pathlib.PurePath` subclasses.

Tests
-----

- bpo-31809: Add tests to verify connection with secp ECDH curves.

Build
-----

- bpo-32898: Fix the python debug build when using COUNT_ALLOCS.

Windows
-------

- bpo-32901: Update Tcl and Tk versions to 8.6.8

- bpo-31966: Fixed WindowsConsoleIO.write() for writing empty data.

- bpo-32409: Ensures activate.bat can handle Unicode contents.

- bpo-32457: Improves handling of denormalized executable path when
  launching Python.

- bpo-32370: Use the correct encoding for ipconfig output in the uuid
  module. Patch by Segev Finer.

- bpo-29248: Fix :func:`os.readlink` on Windows, which was mistakenly
  treating the ``PrintNameOffset`` field of the reparse data buffer as a
  number of characters instead of bytes. Patch by Craig Holmquist and SSE4.

macOS
-----

- bpo-32901: Update macOS 10.9+ installer to Tcl/Tk 8.6.8.

IDLE
----

- bpo-32916: Change ``str`` to ``code`` in pyparse.

- bpo-32905: Remove unused code in pyparse module.

- bpo-32874: Add tests for pyparse.

- bpo-32837: Using the system and place-dependent default encoding for
  open() is a bad idea for IDLE's system and location-independent files.

- bpo-32826: Add "encoding=utf-8" to open() in IDLE's test_help_about. GUI
  test test_file_buttons() only looks at initial ascii-only lines, but
  failed on systems where open() defaults to 'ascii' because readline()
  internally reads and decodes far enough ahead to encounter a non-ascii
  character in CREDITS.txt.

- bpo-32765: Update configdialog General tab docstring to add new widgets to
  the widget list.

Tools/Demos
-----------

- bpo-32222: Fix pygettext not extracting docstrings for functions with type
  annotated arguments. Patch by Toby Harradine.


What's New in Python 3.7.0 beta 1?
==================================

*Release date: 2018-01-30*

Core and Builtins
-----------------

- bpo-32703: Fix coroutine's ResourceWarning when there's an active error
  set when it's being finalized.

- bpo-32650: Pdb and other debuggers dependent on bdb.py will correctly step
  over (next command) native coroutines. Patch by Pablo Galindo.

- bpo-28685: Optimize list.sort() and sorted() by using type specialized
  comparisons when possible.

- bpo-32685: Improve suggestion when the Python 2 form of print statement is
  either present on the same line as the header of a compound statement or
  else terminated by a semi-colon instead of a newline. Patch by Nitish
  Chandra.

- bpo-32697: Python now explicitly preserves the definition order of
  keyword-only parameters.  It's always preserved their order, but this
  behavior was never guaranteed before; this behavior is now guaranteed and
  tested.

- bpo-32690: The locals() dictionary now displays in the lexical order that
  variables were defined.  Previously, the order was reversed.

- bpo-32677: Add ``.isascii()`` method to ``str``, ``bytes`` and
  ``bytearray``. It can be used to test that string contains only ASCII
  characters.

- bpo-32670: Enforce :pep:`479` for all code. This means that manually
  raising a StopIteration exception from a generator is prohibited for all
  code, regardless of whether 'from __future__ import generator_stop' was
  used or not.

- bpo-32591: Added built-in support for tracking the origin of coroutine
  objects; see sys.set_coroutine_origin_tracking_depth and
  CoroutineType.cr_origin. This replaces the asyncio debug mode's use of
  coroutine wrapping for native coroutine objects.

- bpo-31368: Expose preadv and pwritev system calls in the os module. Patch
  by Pablo Galindo

- bpo-32544: ``hasattr(obj, name)`` and ``getattr(obj, name, default)`` are
  about 4 times faster than before when ``name`` is not found and ``obj``
  doesn't override ``__getattr__`` or ``__getattribute__``.

- bpo-26163: Improved frozenset() hash to create more distinct hash values
  when faced with datasets containing many similar values.

- bpo-32550: Remove the STORE_ANNOTATION bytecode.

- bpo-20104: Expose posix_spawn as a low level API in the os module.
  (removed before 3.7.0rc1)

- bpo-24340: Fixed estimation of the code stack size.

- bpo-32436: Implement :pep:`567` Context Variables.

- bpo-18533: ``repr()`` on a dict containing its own ``values()`` or
  ``items()`` no longer raises ``RecursionError``; OrderedDict similarly.
  Instead, use ``...``, as for other recursive structures.  Patch by Ben
  North.

- bpo-20891: Py_Initialize() now creates the GIL. The GIL is no longer
  created "on demand" to fix a race condition when PyGILState_Ensure() is
  called in a non-Python thread.

- bpo-32028: Leading whitespace is now correctly ignored when generating
  suggestions for converting Py2 print statements to Py3 builtin print
  function calls. Patch by Sanyam Khurana.

- bpo-31179: Make dict.copy() up to 5.5 times faster.

- bpo-31113: Get rid of recursion in the compiler for normal control flow.

Library
-------

- bpo-25988: Deprecate exposing the contents of collections.abc in the
  regular collections module.

- bpo-31429: The default cipher suite selection of the ssl module now uses a
  blacklist approach rather than a hard-coded whitelist. Python no longer
  re-enables ciphers that have been blocked by OpenSSL security update.
  Default cipher suite selection can be configured on compile time.

- bpo-30306: contextlib.contextmanager now releases the arguments passed to
  the underlying generator as soon as the context manager is entered.
  Previously it would keep them alive for as long as the context manager was
  alive, even when not being used as a function decorator. Patch by Martin
  Teichmann.

- bpo-21417: Added support for setting the compression level for
  zipfile.ZipFile.

- bpo-32251: Implement asyncio.BufferedProtocol (provisional API).

- bpo-32513: In dataclasses, allow easier overriding of dunder methods
  without specifying decorator parameters.

- bpo-32660: :mod:`termios` makes available ``FIONREAD``, ``FIONCLEX``,
  ``FIOCLEX``, ``FIOASYNC`` and ``FIONBIO`` also under Solaris/derivatives.

- bpo-27931: Fix email address header parsing error when the username is an
  empty quoted string. Patch by Xiang Zhang.

- bpo-32659: Under Solaris and derivatives, :class:`os.stat_result` provides
  a st_fstype attribute.

- bpo-32662: Implement Server.start_serving(), Server.serve_forever(), and
  Server.is_serving() methods.  Add 'start_serving' keyword parameter to
  loop.create_server() and loop.create_unix_server().

- bpo-32391: Implement :meth:`asyncio.StreamWriter.wait_closed` and
  :meth:`asyncio.StreamWriter.is_closing` methods

- bpo-32643: Make Task._step, Task._wakeup and Future._schedule_callbacks
  methods private.

- bpo-32630: Refactor decimal module to use contextvars to store decimal
  context.

- bpo-32622: Add :meth:`asyncio.AbstractEventLoop.sendfile` method.

- bpo-32304: distutils' upload command no longer corrupts tar files ending
  with a CR byte, and no longer tries to convert CR to CRLF in any of the
  upload text fields.

- bpo-32502: uuid.uuid1 no longer raises an exception if a 64-bit hardware
  address is encountered.

- bpo-32596: ``concurrent.futures`` imports ``ThreadPoolExecutor`` and
  ``ProcessPoolExecutor`` lazily (using :pep:`562`). It makes ``import
  asyncio`` about 15% faster because asyncio uses only
  ``ThreadPoolExecutor`` by default.

- bpo-31801: Add ``_ignore_`` to ``Enum`` so temporary variables can be used
  during class construction without being turned into members.

- bpo-32576: Use queue.SimpleQueue() in places where it can be invoked from
  a weakref callback.

- bpo-32574: Fix memory leak in asyncio.Queue, when the queue has limited
  size and it is full, the cancelation of queue.put() can cause a memory
  leak. Patch by: José Melero.

- bpo-32521: The nis module is now compatible with new libnsl and headers
  location.

- bpo-32467: collections.abc.ValuesView now inherits from
  collections.abc.Collection.

- bpo-32473: Improve ABCMeta._dump_registry() output readability

- bpo-32102: New argument ``capture_output`` for subprocess.run

- bpo-32521: glibc has removed Sun RPC. Use replacement libtirpc headers and
  library in nis module.

- bpo-32493: UUID module fixes build for FreeBSD/OpenBSD

- bpo-32503: Pickling with protocol 4 no longer creates too small frames.

- bpo-29237: Create enum for pstats sorting options

- bpo-32454: Add close(fd) function to the socket module.

- bpo-25942: The subprocess module is now more graceful when handling a
  Ctrl-C KeyboardInterrupt during subprocess.call, subprocess.run, or a
  Popen context manager.  It now waits a short amount of time for the child
  (presumed to have also gotten the SIGINT) to exit, before continuing the
  KeyboardInterrupt exception handling.  This still includes a SIGKILL in
  the call() and run() APIs, but at least the child had a chance first.

- bpo-32433: The hmac module now has hmac.digest(), which provides an
  optimized HMAC digest.

- bpo-28134: Sockets now auto-detect family, type and protocol from file
  descriptor by default.

- bpo-32404: Fix bug where :meth:`datetime.datetime.fromtimestamp` did not
  call __new__ in :class:`datetime.datetime` subclasses.

- bpo-32403: Improved speed of :class:`datetime.date` and
  :class:`datetime.datetime` alternate constructors.

- bpo-32228: Ensure that ``truncate()`` preserves the file position (as
  reported by ``tell()``) after writes longer than the buffer size.

- bpo-32410: Implement ``loop.sock_sendfile`` for asyncio event loop.

- bpo-22908: Added seek and tell to the ZipExtFile class. This only works if
  the file object used to open the zipfile is seekable.

- bpo-32373: Add socket.getblocking() method.

- bpo-32248: Add :mod:`importlib.resources` and
  :class:`importlib.abc.ResourceReader` as the unified API for reading
  resources contained within packages.  Loaders wishing to support resource
  reading must implement the :meth:`get_resource_reader()` method.
  File-based and zipimport-based loaders both implement these APIs.
  :class:`importlib.abc.ResourceLoader` is deprecated in favor of these new
  APIs.

- bpo-32320: collections.namedtuple() now supports default values.

- bpo-29302: Add contextlib.AsyncExitStack. Patch by Alexander Mohr and Ilya
  Kulakov.

- bpo-31961: *Removed in Python 3.7.0b2.* The *args* argument of
  subprocess.Popen can now be a :term:`path-like object`. If *args* is given
  as a sequence, it's first element can now be a :term:`path-like object` as
  well.

- bpo-31900: The :func:`locale.localeconv` function now sets temporarily the
  ``LC_CTYPE`` locale to the ``LC_NUMERIC`` locale to decode
  ``decimal_point`` and ``thousands_sep`` byte strings if they are non-ASCII
  or longer than 1 byte, and the ``LC_NUMERIC`` locale is different than the
  ``LC_CTYPE`` locale. This temporary change affects other threads. Same
  change for the :meth:`str.format` method when formatting a number
  (:class:`int`, :class:`float`, :class:`float` and subclasses) with the
  ``n`` type (ex: ``'{:n}'.format(1234)``).

- bpo-31853: Use super().method instead of socket.method in SSLSocket.  They
  were there most likely for legacy reasons.

- bpo-31399: The ssl module now uses OpenSSL's X509_VERIFY_PARAM_set1_host()
  and X509_VERIFY_PARAM_set1_ip() API to verify hostname and IP addresses.
  Subject common name fallback can be disabled with
  SSLContext.hostname_checks_common_name.

- bpo-14976: Add a queue.SimpleQueue class, an unbounded FIFO queue with a
  reentrant C implementation of put().

Documentation
-------------

- bpo-32724: Add references to some commands in the documentation of Pdb.
  Patch by Stéphane Wirtel

- bpo-32649: Complete the C API documentation, profiling and tracing part
  with the newly added per-opcode events.

- bpo-17799: Explain real behaviour of sys.settrace and sys.setprofile and
  their C-API counterparts regarding which type of events are received in
  each function. Patch by Pablo Galindo Salgado.

Tests
-----

- bpo-32721: Fix test_hashlib to not fail if the _md5 module is not built.

- bpo-28414: Add test cases for IDNA 2003 and 2008 host names. IDNA 2003
  internationalized host names are working since bpo-31399 has landed. IDNA
  2008 are still broken.

- bpo-32604: Add a new "_xxsubinterpreters" extension module that exposes
  the existing subinterpreter C-API and a new cross-interpreter data sharing
  mechanism. The module is primarily intended for more thorough testing of
  the existing subinterpreter support. Note that the _xxsubinterpreters
  module has been removed in 3.7.0rc1.

- bpo-32602: Add test certs and test for ECDSA cert and EC/RSA dual mode.

- bpo-32549: On Travis CI, Python now Compiles and uses a local copy of
  OpenSSL 1.1.0g for testing.

Build
-----

- bpo-32635: Fix segfault of the crypt module when libxcrypt is provided
  instead of libcrypt at the system.

- bpo-32598: Use autoconf to detect OpenSSL libs, headers and supported
  features. The ax_check_openssl M4 macro uses pkg-config to locate OpenSSL
  and falls back to manual search.

- bpo-32593: Drop support of FreeBSD 9 and older.

- bpo-29708: If the :envvar:`SOURCE_DATE_EPOCH` environment variable is set,
  :mod:`py_compile` will always create hash-based ``.pyc`` files.

Windows
-------

- bpo-32588: Create standalone _distutils_findvs module and add missing
  _queue module to installer.

- bpo-29911: Ensure separate Modify and Uninstall buttons are displayed.

- bpo-32507: Use app-local UCRT install rather than the proper update for
  old versions of Windows.

macOS
-----

- bpo-32726: Provide an additional, more modern macOS installer variant that
  supports macOS 10.9+ systems in 64-bit mode only.  Upgrade the supplied
  third-party libraries to OpenSSL 1.1.0g and to SQLite 3.22.0.  The 10.9+
  installer now links with and supplies its own copy of Tcl/Tk 8.6.

- bpo-28440: No longer add /Library/Python/3.x/site-packages to sys.path for
  macOS framework builds to avoid future conflicts.

C API
-----

- bpo-32681: Fix uninitialized variable 'res' in the C implementation of
  os.dup2. Patch by Stéphane Wirtel

- bpo-10381: Add C API access to the ``datetime.timezone`` constructor and
  ``datetime.timzone.UTC`` singleton.


What's New in Python 3.7.0 alpha 4?
===================================

*Release date: 2018-01-08*

Core and Builtins
-----------------

- bpo-31975: The default warning filter list now starts with a
  "default::DeprecationWarning:__main__" entry, so deprecation warnings are
  once again shown by default in single-file scripts and at the interactive
  prompt.

- bpo-32226: ``__class_getitem__`` is now an automatic class method.

- bpo-32399: Add AIX uuid library support for RFC4122 using uuid_create() in
  libc.a

- bpo-32390: Fix the compilation failure on AIX after the f_fsid field has
  been added to the object returned by os.statvfs() (issue #32143). Original
  patch by Michael Felt.

- bpo-32379: Make MRO computation faster when a class inherits from a single
  base.

- bpo-32259: The error message of a TypeError raised when unpack
  non-iterable is now more specific.

- bpo-27169: The ``__debug__`` constant is now optimized out at compile
  time. This fixes also bpo-22091.

- bpo-32329: The :option:`-R` option now turns on hash randomization when
  the :envvar:`PYTHONHASHSEED` environment variable is set to ``0``.
  Previously, the option was ignored. Moreover,
  ``sys.flags.hash_randomization`` is now properly set to 0 when hash
  randomization is turned off by ``PYTHONHASHSEED=0``.

- bpo-30416: The optimizer is now protected from spending much time doing
  complex calculations and consuming much memory for creating large
  constants in constant folding. Increased limits for constants that can be
  produced in constant folding.

- bpo-32282: Fix an unnecessary ifdef in the include of VersionHelpers.h in
  socketmodule on Windows.

- bpo-30579: Implement TracebackType.__new__ to allow Python-level creation
  of traceback objects, and make TracebackType.tb_next mutable.

- bpo-32260: Don't byte swap the input keys to the SipHash algorithm on
  big-endian platforms. This should ensure siphash gives consistent results
  across platforms.

- bpo-31506: Improve the error message logic for object.__new__ and
  object.__init__. Patch by Sanyam Khurana.

- bpo-20361: ``-b`` and ``-bb`` now inject ``'default::BytesWarning'`` and
  ``error::BytesWarning`` entries into ``sys.warnoptions``, ensuring that
  they take precedence over any other warning filters configured via the
  ``-W`` option or the ``PYTHONWARNINGS`` environment variable.

- bpo-32230: `-X dev` now injects a ``'default'`` entry into
  sys.warnoptions, ensuring that it behaves identically to actually passing
  ``-Wdefault`` at the command line.

- bpo-29240: Add a new UTF-8 mode: implementation of the :pep:`540`.

- bpo-32226: :pep:`560`: Add support for ``__mro_entries__`` and
  ``__class_getitem__``. Implemented by Ivan Levkivskyi.

- bpo-32225: :pep:`562`: Add support for module ``__getattr__`` and
  ``__dir__``. Implemented by Ivan Levkivskyi.

- bpo-31901: The `atexit` module now has its callback stored per
  interpreter.

- bpo-31650: Implement :pep:`552` (Deterministic pycs). Python now supports
  invalidating bytecode cache files bashed on a source content hash rather
  than source last-modified time.

- bpo-29469: Move constant folding from bytecode layer to AST layer.
  Original patch by Eugene Toder.

Library
-------

- bpo-32506: Now that dict is defined as keeping insertion order, drop
  OrderedDict and just use plain dict.

- bpo-32279: Add params to dataclasses.make_dataclasses(): init, repr, eq,
  order, hash, and frozen.  Pass them through to dataclass().

- bpo-32278: Make type information optional on dataclasses.make_dataclass().
  If omitted, the string 'typing.Any' is used.

- bpo-32499: Add dataclasses.is_dataclass(obj), which returns True if obj is
  a dataclass or an instance of one.

- bpo-32468: Improve frame repr() to mention filename, code name and current
  line number.

- bpo-23749: asyncio: Implement loop.start_tls()

- bpo-32441: Return the new file descriptor (i.e., the second argument) from
  ``os.dup2``. Previously, ``None`` was always returned.

- bpo-32422: ``functools.lru_cache`` uses less memory (3 words for each
  cached key) and takes about 1/3 time for cyclic GC.

- bpo-31721: Prevent Python crash from happening when Future._log_traceback
  is set to True manually.  Now it can only be set to False, or a ValueError
  is raised.

- bpo-32415: asyncio: Add Task.get_loop() and Future.get_loop()

- bpo-26133: Don't unsubscribe signals in asyncio UNIX event loop on
  interpreter shutdown.

- bpo-32363: Make asyncio.Task.set_exception() and set_result() raise
  NotImplementedError. Task._step() and Future.__await__() raise proper
  exceptions when they are in an invalid state, instead of raising an
  AssertionError.

- bpo-32357: Optimize asyncio.iscoroutine() and loop.create_task() for
  non-native coroutines (e.g. async/await compiled with Cython).
  'loop.create_task(python_coroutine)' used to be 20% faster than
  'loop.create_task(cython_coroutine)'.  Now, the latter is as fast.

- bpo-32356: asyncio.transport.resume_reading() and pause_reading() are now
  idempotent. New transport.is_reading() method is added.

- bpo-32355: Optimize asyncio.gather(); now up to 15% faster.

- bpo-32351: Use fastpath in asyncio.sleep if delay<0 (2x boost)

- bpo-32348: Optimize asyncio.Future schedule/add/remove callback.  The
  optimization shows 3-6% performance improvements of async/await code.

- bpo-32331: Fix socket.settimeout() and socket.setblocking() to keep
  socket.type as is. Fix socket.socket() constructor to reset any bit flags
  applied to socket's type.  This change only affects OSes that have
  SOCK_NONBLOCK and/or SOCK_CLOEXEC.

- bpo-32248: Add :class:`importlib.abc.ResourceReader` as an ABC for loaders
  to provide a unified API for reading resources contained within packages.
  Also add :mod:`importlib.resources` as the port of
  ``importlib_resources``.

- bpo-32311: Implement asyncio.create_task(coro) shortcut

- bpo-32327: Convert asyncio functions that were documented as coroutines to
  coroutines. Affected functions: loop.sock_sendall, loop.sock_recv,
  loop.sock_accept, loop.getaddrinfo, loop.getnameinfo.

- bpo-32323: :func:`urllib.parse.urlsplit()` does not convert zone-id
  (scope) to lower case for scoped IPv6 addresses in hostnames now.

- bpo-32302: Fix bdist_wininst of distutils for CRT v142: it binary
  compatible with CRT v140.

- bpo-29711: Fix ``stop_serving`` in asyncio proactor loop kill all
  listening servers

- bpo-32308: :func:`re.sub()` now replaces empty matches adjacent to a
  previous non-empty match.

- bpo-29970: Abort asyncio SSLProtocol connection if handshake not complete
  within 10s

- bpo-32314: Implement asyncio.run().

- bpo-17852: Revert incorrect fix based on misunderstanding of
  _Py_PyAtExit() semantics.

- bpo-32296: Implement asyncio._get_running_loop() and get_event_loop() in
  C. This makes them 4x faster.

- bpo-32250: Implement ``asyncio.current_task()`` and
  ``asyncio.all_tasks()``. Add helpers intended to be used by alternative
  task implementations: ``asyncio._register_task``, ``asyncio._enter_task``,
  ``asyncio._leave_task`` and ``asyncio._unregister_task``. Deprecate
  ``asyncio.Task.current_task()`` and ``asyncio.Task.all_tasks()``.

- bpo-32255: A single empty field is now always quoted when written into a
  CSV file. This allows to distinguish an empty row from a row consisting of
  a single empty field. Patch by Licht Takeuchi.

- bpo-32277: Raise ``NotImplementedError`` instead of ``SystemError`` on
  platforms where ``chmod(..., follow_symlinks=False)`` is not supported.
  Patch by Anthony Sottile.

- bpo-30050: New argument warn_on_full_buffer to signal.set_wakeup_fd lets
  you control whether Python prints a warning on stderr when the wakeup fd
  buffer overflows.

- bpo-29137: The ``fpectl`` library has been removed. It was never enabled
  by default, never worked correctly on x86-64, and it changed the Python
  ABI in ways that caused unexpected breakage of C extensions.

- bpo-32273: Move asyncio.test_utils to test.test_asyncio.

- bpo-32272: Remove asyncio.async() function.

- bpo-32269: Add asyncio.get_running_loop() function.

- bpo-32265: All class and static methods of builtin types now are correctly
  classified by inspect.classify_class_attrs() and grouped in pydoc ouput.
  Added types.ClassMethodDescriptorType for unbound class methods of builtin
  types.

- bpo-32253: Deprecate ``yield from lock``, ``await lock``, ``with (yield
  from lock)`` and ``with await lock`` for asyncio synchronization
  primitives.

- bpo-22589: Changed MIME type of .bmp from 'image/x-ms-bmp' to 'image/bmp'

- bpo-32193: Convert asyncio to use *async/await* syntax. Old styled ``yield
  from`` is still supported too.

- bpo-32206: Add support to run modules with pdb

- bpo-32227: ``functools.singledispatch`` now supports registering
  implementations using type annotations.

- bpo-15873: Added new alternate constructors
  :meth:`datetime.datetime.fromisoformat`,
  :meth:`datetime.time.fromisoformat` and
  :meth:`datetime.date.fromisoformat` as the inverse operation of each
  classes's respective ``isoformat`` methods.

- bpo-32199: The getnode() ip getter now uses 'ip link' instead of 'ip link
  list'.

- bpo-32143: os.statvfs() includes the f_fsid field from statvfs(2)

- bpo-26439: Fix ctypes.util.find_library() for AIX by implementing
  ctypes._aix.find_library() Patch by: Michael Felt

- bpo-31993: The pickler now uses less memory when serializing large bytes
  and str objects into a file.  Pickles created with protocol 4 will require
  less memory for unpickling large bytes and str objects.

- bpo-27456: Ensure TCP_NODELAY is set on Linux. Tests by Victor Stinner.

- bpo-31778: ast.literal_eval() is now more strict. Addition and subtraction
  of arbitrary numbers no longer allowed.

- bpo-31802: Importing native path module (``posixpath``, ``ntpath``) now
  works even if the ``os`` module still is not imported.

- bpo-30241: Add contextlib.AbstractAsyncContextManager. Patch by Jelle
  Zijlstra.

- bpo-31699: Fix deadlocks in
  :class:`concurrent.futures.ProcessPoolExecutor` when task arguments or
  results cause pickling or unpickling errors. This should make sure that
  calls to the :class:`ProcessPoolExecutor` API always eventually return.

- bpo-15216: ``TextIOWrapper.reconfigure()`` supports changing *encoding*,
  *errors*, and *newline*.

Documentation
-------------

- bpo-32418: Add get_loop() method to Server and AbstractServer classes.

Tests
-----

- bpo-32252: Fix faulthandler_suppress_crash_report() used to prevent core
  dump files when testing crashes. getrlimit() returns zero on success.

- bpo-32002: Adjust C locale coercion testing for the empty locale and POSIX
  locale cases to more readily adjust to platform dependent behaviour.

Windows
-------

- bpo-19764: Implement support for `subprocess.Popen(close_fds=True)` on
  Windows. Patch by Segev Finer.

Tools/Demos
-----------

- bpo-24960: 2to3 and lib2to3 can now read pickled grammar files using
  pkgutil.get_data() rather than probing the filesystem. This lets 2to3 and
  lib2to3 work when run from a zipfile.

C API
-----

- bpo-32030: Py_Initialize() doesn't reset the memory allocators to default
  if the ``PYTHONMALLOC`` environment variable is not set.

- bpo-29084: Undocumented C API for OrderedDict has been excluded from the
  limited C API. It was added by mistake and actually never worked in the
  limited C API.

- bpo-32264: Moved the pygetopt.h header into internal/, since it has no
  public APIs.

- bpo-32241: :c:func:`Py_SetProgramName` and :c:func:`Py_SetPythonHome` now
  take the ``const wchar *`` arguments instead of ``wchar *``.


What's New in Python 3.7.0 alpha 3?
===================================

*Release date: 2017-12-05*

Core and Builtins
-----------------

- bpo-32176: co_flags.CO_NOFREE is now always set correctly by the code
  object constructor based on freevars and cellvars, rather than needing to
  be set correctly by the caller. This ensures it will be cleared
  automatically when additional cell references are injected into a modified
  code object and function.

- bpo-10544: Yield expressions are now deprecated in comprehensions and
  generator expressions. They are still permitted in the definition of the
  outermost iterable, as that is evaluated directly in the enclosing scope.

- bpo-32137: The repr of deeply nested dict now raises a RecursionError
  instead of crashing due to a stack overflow.

- bpo-32096: Revert memory allocator changes in the C API: move structures
  back from _PyRuntime to Objects/obmalloc.c. The memory allocators are once
  again initialized statically, and so PyMem_RawMalloc() and
  Py_DecodeLocale() can be called before _PyRuntime_Initialize().

- bpo-32043: Add a new "developer mode": new "-X dev" command line option to
  enable debug checks at runtime.

- bpo-32023: SyntaxError is now correctly raised when a generator expression
  without parenthesis is used instead of an inheritance list in a class
  definition. The duplication of the parentheses can be omitted only on
  calls.

- bpo-32012: SyntaxError is now correctly raised when a generator expression
  without parenthesis is passed as an argument, but followed by a trailing
  comma. A generator expression always needs to be directly inside a set of
  parentheses and cannot have a comma on either side.

- bpo-28180: A new internal ``_Py_SetLocaleFromEnv(category)`` helper
  function has been added in order to improve the consistency of behaviour
  across different ``libc`` implementations (e.g. Android doesn't support
  setting the locale from the environment by default).

- bpo-31949: Fixed several issues in printing tracebacks
  (PyTraceBack_Print()). Setting sys.tracebacklimit to 0 or less now
  suppresses printing tracebacks. Setting sys.tracebacklimit to None now
  causes using the default limit. Setting sys.tracebacklimit to an integer
  larger than LONG_MAX now means using the limit LONG_MAX rather than the
  default limit. Fixed integer overflows in the case of more than 2**31
  traceback items on Windows. Fixed output errors handling.

- bpo-30696: Fix the interactive interpreter looping endlessly when no
  memory.

- bpo-20047: Bytearray methods partition() and rpartition() now accept only
  bytes-like objects as separator, as documented.  In particular they now
  raise TypeError rather of returning a bogus result when an integer is
  passed as a separator.

- bpo-21720: BytesWarning no longer emitted when the *fromlist* argument of
  ``__import__()`` or the ``__all__`` attribute of the module contain bytes
  instances.

- bpo-31845: Environment variables are once more read correctly at
  interpreter startup.

- bpo-28936: Ensure that lexically first syntax error involving a parameter
  and ``global`` or ``nonlocal`` is detected first at a given scope. Patch
  by Ivan Levkivskyi.

- bpo-31825: Fixed OverflowError in the 'unicode-escape' codec and in
  codecs.escape_decode() when decode an escaped non-ascii byte.

- bpo-31618: The per-frame tracing logic added in 3.7a1 has been altered so
  that ``frame->f_lineno`` is updated before either ``"line"`` or
  ``"opcode"`` events are emitted. Previously, opcode events were emitted
  first, and therefore would occasionally see stale line numbers on the
  frame. The behavior of this feature has changed slightly as a result: when
  both ``f_trace_lines`` and ``f_trace_opcodes`` are enabled, line events
  now occur first.

- bpo-28603: Print the full context/cause chain of exceptions on interpreter
  exit, even if an exception in the chain is unhashable or compares equal to
  later ones. Patch by Zane Bitter.

- bpo-31786: Fix timeout rounding in the select module to round correctly
  negative timeouts between -1.0 and 0.0. The functions now block waiting
  for events as expected. Previously, the call was incorrectly non-blocking.
  Patch by Pablo Galindo.

- bpo-31781: Prevent crashes when calling methods of an uninitialized
  ``zipimport.zipimporter`` object. Patch by Oren Milman.

- bpo-30399: Standard repr() of BaseException with a single argument no
  longer contains redundant trailing comma.

- bpo-31626: Fixed a bug in debug memory allocator.  There was a write to
  freed memory after shrinking a memory block.

- bpo-30817: `PyErr_PrintEx()` clears now the ignored exception that may be
  raised by `_PySys_SetObjectId()`, for example when no memory.

Library
-------

- bpo-28556: Two minor fixes for ``typing`` module: allow shallow copying
  instances of generic classes, improve interaction of ``__init_subclass__``
  with generics. Original PRs by Ivan Levkivskyi.

- bpo-32214: PEP 557, Data Classes. Provides a decorator which adds
  boilerplate methods to classes which use type annotations so specify
  fields.

- bpo-27240: The header folding algorithm for the new email policies has
  been rewritten, which also fixes bpo-30788, bpo-31831, and bpo-32182.  In
  particular, RFC2231 folding is now done correctly.

- bpo-32186: io.FileIO.readall() and io.FileIO.read() now release the GIL
  when getting the file size. Fixed hang of all threads with inaccessible
  NFS server. Patch by Nir Soffer.

- bpo-321010: Add :attr:`sys.flags.dev_mode` flag

- bpo-32154: The ``asyncio.windows_utils.socketpair()`` function has been
  removed: use directly :func:`socket.socketpair` which is available on all
  platforms since Python 3.5 (before, it wasn't available on Windows).
  ``asyncio.windows_utils.socketpair()`` was just an alias to
  ``socket.socketpair`` on Python 3.5 and newer.

- bpo-32089: warnings: In development (-X dev) and debug mode (pydebug
  build), use the "default" action for ResourceWarning, rather than the
  "always" action, in the default warnings filters.

- bpo-32107: ``uuid.getnode()`` now preferentially returns universally
  administered MAC addresses if available, over locally administered MAC
  addresses.  This makes a better guarantee for global uniqueness of UUIDs
  returned from ``uuid.uuid1()``.  If only locally administered MAC
  addresses are available, the first such one found is returned.

- bpo-23033: Wildcard is now supported in hostname when it is one and only
  character in the left most segment of hostname in second argument of
  :meth:`ssl.match_hostname`.  Patch by Mandeep Singh.

- bpo-12239: Make :meth:`msilib.SummaryInformation.GetProperty` return
  ``None`` when the value of property is ``VT_EMPTY``.  Initial patch by
  Mark Mc Mahon.

- bpo-28334: Use :func:`os.path.expanduser` to find the ``~/.netrc`` file in
  :class:`netrc.netrc`.  If it does not exist, :exc:`FileNotFoundError` is
  raised.  Patch by Dimitri Merejkowsky.

- bpo-32121: Made ``tracemalloc.Traceback`` behave more like the traceback
  module, sorting the frames from oldest to most recent.
  ``Traceback.format()`` now accepts negative *limit*, truncating the result
  to the ``abs(limit)`` oldest frames. To get the old behaviour, one can use
  the new *most_recent_first* argument to ``Traceback.format()``. (Patch by
  Jesse Bakker.)

- bpo-31325: Fix wrong usage of :func:`collections.namedtuple` in the
  :meth:`RobotFileParser.parse() <urllib.robotparser.RobotFileParser.parse>`
  method. Initial patch by Robin Wellner.

- bpo-12382: :func:`msilib.OpenDatabase` now raises a better exception
  message when it couldn't open or create an MSI file.  Initial patch by
  William Tisäter.

- bpo-19610: ``setup()`` now warns about invalid types for some fields. The
  ``distutils.dist.Distribution`` class now warns when ``classifiers``,
  ``keywords`` and ``platforms`` fields are not specified as a list or a
  string.

- bpo-32071: Added the ``-k`` command-line option to ``python -m unittest``
  to run only tests that match the given pattern(s).

- bpo-10049: Added *nullcontext* no-op context manager to contextlib. This
  provides a simpler and faster alternative to ExitStack() when handling
  optional context managers.

- bpo-28684: The new test.support.skip_unless_bind_unix_socket() decorator
  is used here to skip asyncio tests that fail because the platform lacks a
  functional bind() function for unix domain sockets (as it is the case for
  non root users on the recent Android versions that run now SELinux in
  enforcing mode).

- bpo-32110: ``codecs.StreamReader.read(n)`` now returns not more than *n*
  characters/bytes for non-negative *n*. This makes it compatible with
  ``read()`` methods of other file-like objects.

- bpo-27535: The warnings module doesn't leak memory anymore in the hidden
  warnings registry for the "ignore" action of warnings filters.
  warn_explicit() function doesn't add the warning key to the registry
  anymore for the "ignore" action.

- bpo-32088: warnings:  When Python is build is debug mode (``Py_DEBUG``),
  :exc:`DeprecationWarning`, :exc:`PendingDeprecationWarning` and
  :exc:`ImportWarning` warnings are now displayed by default.

- bpo-1647489: Fixed searching regular expression patterns that could match
  an empty string. Non-empty string can now be correctly found after
  matching an empty string.

- bpo-25054: Added support of splitting on a pattern that could match an
  empty string.

- bpo-32072: Fixed issues with binary plists: Fixed saving bytearrays.
  Identical objects will be saved only once. Equal references will be load
  as identical objects. Added support for saving and loading recursive data
  structures.

- bpo-32069: Drop legacy SSL transport from asyncio, ssl.MemoryBIO is always
  used anyway.

- bpo-32066: asyncio: Support pathlib.Path in create_unix_connection; sock
  arg should be optional

- bpo-32046: Updates 2to3 to convert from operator.isCallable(obj) to
  callable(obj). Patch by Dong-hee Na.

- bpo-32018: inspect.signature should follow :pep:`8`, if the parameter has
  an annotation and a default value. Patch by Dong-hee Na.

- bpo-32025: Add time.thread_time() and time.thread_time_ns()

- bpo-32037: Integers that fit in a signed 32-bit integer will be now
  pickled with protocol 0 using the INT opcode.  This will decrease the size
  of a pickle, speed up pickling and unpickling, and make these integers be
  unpickled as int instances in Python 2.

- bpo-32034: Make asyncio.IncompleteReadError and LimitOverrunError
  pickleable.

- bpo-32015: Fixed the looping of asyncio in the case of reconnection the
  socket during waiting async read/write from/to the socket.

- bpo-32011: Restored support of loading marshal files with the TYPE_INT64
  code. These files can be produced in Python 2.7.

- bpo-28369: Enhance add_reader/writer check that socket is not used by some
  transport. Before, only cases when add_reader/writer were called with an
  int FD were supported.  Now the check is implemented correctly for all
  file-like objects.

- bpo-31976: Fix race condition when flushing a file is slow, which can
  cause a segfault if closing the file from another thread.

- bpo-31985: Formally deprecated aifc.openfp, sunau.openfp, and wave.openfp.
  Since change 7bc817d5ba917528e8bd07ec461c635291e7b06a in 1993, openfp in
  each of the three modules had been pointing to that module's open function
  as a matter of backwards compatibility, though it had been both untested
  and undocumented.

- bpo-21862: cProfile command line now accepts `-m module_name` as an
  alternative to script path. Patch by Sanyam Khurana.

- bpo-31970: Reduce performance overhead of asyncio debug mode.

- bpo-31843: *database* argument of sqlite3.connect() now accepts a
  :term:`path-like object`, instead of just a string.

- bpo-31945: Add Configurable *blocksize* to ``HTTPConnection`` and
  ``HTTPSConnection`` for improved upload throughput.  Patch by Nir Soffer.

- bpo-31943: Add a ``cancelled()`` method to :class:`asyncio.Handle`.  Patch
  by Marat Sharafutdinov.

- bpo-9678: Fixed determining the MAC address in the uuid module: Using
  ifconfig on NetBSD and OpenBSD. Using arp on Linux, FreeBSD, NetBSD and
  OpenBSD. Based on patch by Takayuki Shimizukawa.

- bpo-30057: Fix potential missed signal in signal.signal().

- bpo-31933: Fix Blake2 params leaf_size and node_offset on big endian
  platforms. Patch by Jack O'Connor.

- bpo-21423: Add an initializer argument to {Process,Thread}PoolExecutor

- bpo-31927: Fixed compilation of the socket module on NetBSD 8.  Fixed
  assertion failure or reading arbitrary data when parse a AF_BLUETOOTH
  address on NetBSD and DragonFly BSD.

- bpo-27666: Fixed stack corruption in curses.box() and curses.ungetmouse()
  when the size of types chtype or mmask_t is less than the size of C long.
  curses.box() now accepts characters as arguments.  Based on patch by Steve
  Fink.

- bpo-31917: Add 3 new clock identifiers: :data:`time.CLOCK_BOOTTIME`,
  :data:`time.CLOCK_PROF` and :data:`time.CLOCK_UPTIME`.

- bpo-31897: plistlib now catches more errors when read binary plists and
  raises InvalidFileException instead of unexpected exceptions.

- bpo-25720: Fix the method for checking pad state of curses WINDOW. Patch
  by Masayuki Yamamoto.

- bpo-31893: Fixed the layout of the kqueue_event structure on OpenBSD and
  NetBSD. Fixed the comparison of the kqueue_event objects.

- bpo-31891: Fixed building the curses module on NetBSD.

- bpo-31884: added required constants to subprocess module for setting
  priority on windows

- bpo-28281: Remove year (1-9999) limits on the Calendar.weekday() function.
  Patch by Mark Gollahon.

- bpo-31702: crypt.mksalt() now allows to specify the number of rounds for
  SHA-256 and SHA-512 hashing.

- bpo-30639: :func:`inspect.getfile` no longer computes the repr of unknown
  objects to display in an error message, to protect against badly behaved
  custom reprs.

- bpo-30768: Fix the pthread+semaphore implementation of
  PyThread_acquire_lock_timed() when called with timeout > 0 and
  intr_flag=0: recompute the timeout if sem_timedwait() is interrupted by a
  signal (EINTR). See also the :pep:`475`.

- bpo-31854: Add ``mmap.ACCESS_DEFAULT`` constant.

- bpo-31834: Use optimized code for BLAKE2 only with SSSE3+. The pure SSE2
  implementation is slower than the pure C reference implementation.

- bpo-28292: Calendar.itermonthdates() will now consistently raise an
  exception when a date falls outside of the 0001-01-01 through 9999-12-31
  range.  To support applications that cannot tolerate such exceptions, the
  new methods itermonthdays3() and itermonthdays4() are added.  The new
  methods return tuples and are not restricted by the range supported by
  datetime.date.

- bpo-28564: The shutil.rmtree() function has been sped up to 20--40%. This
  was done using the os.scandir() function.

- bpo-28416: Instances of pickle.Pickler subclass with the persistent_id()
  method and pickle.Unpickler subclass with the persistent_load() method no
  longer create reference cycles.

- bpo-31653: Don't release the GIL if we can acquire a multiprocessing
  semaphore immediately.

- bpo-28326: Fix multiprocessing.Process when stdout and/or stderr is closed
  or None.

- bpo-20825: Add `subnet_of` and `superset_of` containment tests to
  :class:`ipaddress.IPv6Network` and :class:`ipaddress.IPv4Network`. Patch
  by Michel Albert and Cheryl Sabella.

- bpo-31827: Remove the os.stat_float_times() function. It was introduced in
  Python 2.3 for backward compatibility with Python 2.2, and was deprecated
  since Python 3.1.

- bpo-31756: Add a ``subprocess.Popen(text=False)`` keyword argument to
  `subprocess` functions to be more explicit about when the library should
  attempt to decode outputs into text. Patch by Andrew Clegg.

- bpo-31819: Add AbstractEventLoop.sock_recv_into().

- bpo-31457: If nested log adapters are used, the inner ``process()``
  methods are no longer omitted.

- bpo-31457: The ``manager`` property on LoggerAdapter objects is now
  properly settable.

- bpo-31806: Fix timeout rounding in time.sleep(), threading.Lock.acquire()
  and socket.socket.settimeout() to round correctly negative timeouts
  between -1.0 and 0.0. The functions now block waiting for events as
  expected. Previously, the call was incorrectly non-blocking. Patch by
  Pablo Galindo.

- bpo-31803: time.clock() and time.get_clock_info('clock') now emit a
  DeprecationWarning warning.

- bpo-31800: Extended support for parsing UTC offsets. strptime '%z' can now
  parse the output generated by datetime.isoformat, including seconds and
  microseconds.

- bpo-28603: traceback: Fix a TypeError that occurred during printing of
  exception tracebacks when either the current exception or an exception in
  its context/cause chain is unhashable. Patch by Zane Bitter.

- bpo-30541: Add new function to seal a mock and prevent the automatically
  creation of child mocks. Patch by Mario Corchero.

- bpo-31784: Implement the :pep:`564`, add new 6 new functions with
  nanosecond resolution to the :mod:`time` module:
  :func:`~time.clock_gettime_ns`, :func:`~time.clock_settime_ns`,
  :func:`~time.monotonic_ns`, :func:`~time.perf_counter_ns`,
  :func:`~time.process_time_ns`, :func:`~time.time_ns`.

- bpo-30143: 2to3 now generates a code that uses abstract collection classes
  from collections.abc rather than collections.

- bpo-31770: Prevent a crash when calling the ``__init__()`` method of a
  ``sqlite3.Cursor`` object more than once. Patch by Oren Milman.

- bpo-31764: Prevent a crash in ``sqlite3.Cursor.close()`` in case the
  ``Cursor`` object is uninitialized. Patch by Oren Milman.

- bpo-31752: Fix possible crash in timedelta constructor called with custom
  integers.

- bpo-31620: an empty asyncio.Queue now doesn't leak memory when queue.get
  pollers timeout

- bpo-31690: Allow the flags re.ASCII, re.LOCALE, and re.UNICODE to be used
  as group flags for regular expressions.

- bpo-30349: FutureWarning is now emitted if a regular expression contains
  character set constructs that will change semantically in the future
  (nested sets and set operations).

- bpo-31664: Added support for the Blowfish hashing in the crypt module.

- bpo-31632: Fix method set_protocol() of class _SSLProtocolTransport in
  asyncio module. This method was previously modifying a wrong reference to
  the protocol.

- bpo-15037: Added a workaround for getkey() in curses for ncurses 5.7 and
  earlier.

- bpo-31307: Allow use of bytes objects for arguments to
  :meth:`configparser.ConfigParser.read`. Patch by Vincent Michel.

- bpo-31334: Fix ``poll.poll([timeout])`` in the ``select`` module for
  arbitrary negative timeouts on all OSes where it can only be a
  non-negative integer or -1. Patch by Riccardo Coccioli.

- bpo-31310: multiprocessing's semaphore tracker should be launched again if
  crashed.

- bpo-31308: Make multiprocessing's forkserver process immune to Ctrl-C and
  other user interruptions. If it crashes, restart it when necessary.

- bpo-31245: Added support for AF_UNIX socket in asyncio
  `create_datagram_endpoint`.

- bpo-30553: Add HTTP/2 status code 421 (Misdirected Request) to
  :class:`http.HTTPStatus`. Patch by Vitor Pereira.

Documentation
-------------

- bpo-32105: Added asyncio.BaseEventLoop.connect_accepted_socket
  versionadded marker.

Tests
-----

- bpo-31380: Skip test_httpservers test_undecodable_file on macOS: fails on
  APFS.

- bpo-31705: Skip test_socket.test_sha256() on Linux kernel older than 4.5.
  The test fails with ENOKEY on kernel 3.10 (on ppc64le). A fix was merged
  into the kernel 4.5.

- bpo-32138: Skip on Android test_faulthandler tests that raise SIGSEGV and
  remove the test.support.requires_android_level decorator.

- bpo-32136: The runtime embedding tests have been split out from
  ``Lib/test/test_capi.py`` into a new ``Lib/test/test_embed.py`` file.

- bpo-28668: test.support.requires_multiprocessing_queue is removed. Skip
  tests with test.support.import_module('multiprocessing.synchronize')
  instead when the semaphore implementation is broken or missing.

- bpo-32126: Skip test_get_event_loop_new_process in
  test.test_asyncio.test_events when sem_open() is not functional.

- bpo-31174: Fix test_tools.test_unparse: DirectoryTestCase now stores the
  names sample to always test the same files. It prevents false alarms when
  hunting reference leaks.

Build
-----

- bpo-28538: Revert the previous changes, the if_nameindex structure is
  defined by Unified Headers.

- bpo-28762: Revert the last commit, the F_LOCK macro is defined by Android
  Unified Headers.

- bpo-29040: Support building Android with Unified Headers. The first NDK
  release to support Unified Headers is android-ndk-r14.

- bpo-32059: ``detect_modules()`` in ``setup.py`` now also searches the
  sysroot paths when cross-compiling.

- bpo-31957: Fixes Windows SDK version detection when building for Windows.

- bpo-31609: Fixes quotes in PCbuild/clean.bat

- bpo-31934: Abort the build when building out of a not clean source tree.

- bpo-31926: Fixed Argument Clinic sometimes causing compilation errors when
  there was more than one function and/or method in a .c file with the same
  name.

- bpo-28791: Update Windows builds to use SQLite 3.21.0.

- bpo-28791: Update OS X installer to use SQLite 3.21.0.

- bpo-28643: Record profile-opt build progress with stamp files.

- bpo-31866: Finish removing support for AtheOS.

Windows
-------

- bpo-1102: Return ``None`` when ``View.Fetch()`` returns
  ``ERROR_NO_MORE_ITEMS`` instead of raising ``MSIError``. Initial patch by
  Anthony Tuininga.

- bpo-31944: Fixes Modify button in Apps and Features dialog.

- bpo-20486: Implement the ``Database.Close()`` method to help closing MSI
  database objects.

- bpo-31857: Make the behavior of USE_STACKCHECK deterministic in a
  multi-threaded environment.

macOS
-----

- bpo-31392: Update macOS installer to use OpenSSL 1.0.2m

IDLE
----

- bpo-32207: Improve tk event exception tracebacks in IDLE. When tk event
  handling is driven by IDLE's run loop, a confusing and distracting
  queue.EMPTY traceback context is no longer added to tk event exception
  tracebacks.  The traceback is now the same as when event handling is
  driven by user code.  Patch based on a suggestion by Serhiy Storchaka.

- bpo-32164: Delete unused file idlelib/tabbedpages.py. Use of TabbedPageSet
  in configdialog was replaced by ttk.Notebook.

- bpo-32100: IDLE: Fix old and new bugs in pathbrowser; improve tests. Patch
  mostly by Cheryl Sabella.

- bpo-31858: IDLE -- Restrict shell prompt manipulation to the shell. Editor
  and output windows only see an empty last prompt line.  This simplifies
  the code and fixes a minor bug when newline is inserted. Sys.ps1, if
  present, is read on Shell start-up, but is not set or changed.

- bpo-31860: The font sample in the IDLE configuration dialog is now
  editable. Changes persist while IDLE remains open

- bpo-31836: Test_code_module now passes if run after test_idle, which sets
  ps1. The code module uses sys.ps1 if present or sets it to '>>> ' if not.
  Test_code_module now properly tests both behaviors.  Ditto for ps2.

- bpo-28603: Fix a TypeError that caused a shell restart when printing a
  traceback that includes an exception that is unhashable. Patch by Zane
  Bitter.

- bpo-13802: Use non-Latin characters in the IDLE's Font settings sample.
  Even if one selects a font that defines a limited subset of the unicode
  Basic Multilingual Plane, tcl/tk will use other fonts that define a
  character. The expanded example give users of non-Latin characters a
  better idea of what they might see in IDLE's shell and editors. To make
  room for the expanded sample, frames on the Font tab are re-arranged.  The
  Font/Tabs help explains a bit about the additions.

Tools/Demos
-----------

- bpo-32159: Remove CVS and Subversion tools: remove svneol.py and
  treesync.py scripts. CPython migrated from CVS to Subversion, to
  Mercurial, and then to Git. CVS and Subversion are no longer used to
  develop CPython.

- bpo-30722: Make redemo work with Python 3.6 and newer versions. Also,
  remove the ``LOCALE`` option since it doesn't work with string patterns in
  Python 3. Patch by Christoph Sarnowski.

C API
-----

- bpo-20891: Fix PyGILState_Ensure(). When PyGILState_Ensure() is called in
  a non-Python thread before PyEval_InitThreads(), only call
  PyEval_InitThreads() after calling PyThreadState_New() to fix a crash.

- bpo-32125: The ``Py_UseClassExceptionsFlag`` flag has been removed. It was
  deprecated and wasn't used anymore since Python 2.0.

- bpo-25612: Move the current exception state from the frame object to the
  co-routine. This simplifies the interpreter and fixes a couple of obscure
  bugs caused by having swap exception state when entering or exiting a
  generator.

- bpo-23699: Add Py_RETURN_RICHCOMPARE macro to reduce boilerplate code in
  rich comparison functions.

- bpo-30697: The `PyExc_RecursionErrorInst` singleton is removed and
  `PyErr_NormalizeException()` does not use it anymore. This singleton is
  persistent and its members being never cleared may cause a segfault during
  finalization of the interpreter. See also issue #22898.


What's New in Python 3.7.0 alpha 2?
===================================

*Release date: 2017-10-16*

Core and Builtins
-----------------

- bpo-31558: ``gc.freeze()`` is a new API that allows for moving all objects
  currently tracked by the garbage collector to a permanent generation,
  effectively removing them from future collection events. This can be used
  to protect those objects from having their PyGC_Head mutated. In effect,
  this enables great copy-on-write stability at fork().

- bpo-31642: Restored blocking "from package import module" by setting
  sys.modules["package.module"] to None.

- bpo-31708: Allow use of asynchronous generator expressions in synchronous
  functions.

- bpo-31709: Drop support of asynchronous __aiter__.

- bpo-30404: The -u option now makes the stdout and stderr streams
  unbuffered rather than line-buffered.

- bpo-31619: Fixed a ValueError when convert a string with large number of
  underscores to integer with binary base.

- bpo-31602: Fix an assertion failure in `zipimporter.get_source()` in case
  of a bad `zlib.decompress()`. Patch by Oren Milman.

- bpo-31592: Fixed an assertion failure in Python parser in case of a bad
  `unicodedata.normalize()`. Patch by Oren Milman.

- bpo-31588: Raise a `TypeError` with a helpful error message when class
  creation fails due to a metaclass with a bad ``__prepare__()`` method.
  Patch by Oren Milman.

- bpo-31574: Importlib was instrumented with two dtrace probes to profile
  import timing.

- bpo-31566: Fix an assertion failure in `_warnings.warn()` in case of a bad
  ``__name__`` global. Patch by Oren Milman.

- bpo-31506: Improved the error message logic for object.__new__ and
  object.__init__.

- bpo-31505: Fix an assertion failure in `json`, in case
  `_json.make_encoder()` received a bad `encoder()` argument. Patch by Oren
  Milman.

- bpo-31492: Fix assertion failures in case of failing to import from a
  module with a bad ``__name__`` attribute, and in case of failing to access
  an attribute of such a module. Patch by Oren Milman.

- bpo-31478: Fix an assertion failure in `_random.Random.seed()` in case the
  argument has a bad ``__abs__()`` method. Patch by Oren Milman.

- bpo-31336: Speed up class creation by 10-20% by reducing the overhead in
  the necessary special method lookups.  Patch by Stefan Behnel.

- bpo-31415: Add ``-X importtime`` option to show how long each import
  takes. It can be used to optimize application's startup time.  Support the
  :envvar:`PYTHONPROFILEIMPORTTIME` as an equivalent way to enable this.

- bpo-31410: Optimized calling wrapper and classmethod descriptors.

- bpo-31353: :pep:`553` - Add a new built-in called ``breakpoint()`` which
  calls ``sys.breakpointhook()``.  By default this imports ``pdb`` and calls
  ``pdb.set_trace()``, but users may override ``sys.breakpointhook()`` to
  call whatever debugger they want.  The original value of the hook is saved
  in ``sys.__breakpointhook__``.

- bpo-17852: Maintain a list of open buffered files, flush them before
  exiting the interpreter.  Based on a patch from Armin Rigo.

- bpo-31315: Fix an assertion failure in imp.create_dynamic(), when
  spec.name is not a string. Patch by Oren Milman.

- bpo-31311: Fix a crash in the ``__setstate__()`` method of
  `ctypes._CData`, in case of a bad ``__dict__``. Patch by Oren Milman.

- bpo-31293: Fix crashes in true division and multiplication of a timedelta
  object by a float with a bad as_integer_ratio() method. Patch by Oren
  Milman.

- bpo-31285: Fix an assertion failure in `warnings.warn_explicit`, when the
  return value of the received loader's get_source() has a bad splitlines()
  method. Patch by Oren Milman.

- bpo-30406: Make ``async`` and ``await`` proper keywords, as specified in
  :pep:`492`.

Library
-------

- bpo-30058: Fixed buffer overflow in select.kqueue.control().

- bpo-31672: ``idpattern`` in ``string.Template`` matched some non-ASCII
  characters. Now it uses ``-i`` regular expression local flag to avoid
  non-ASCII characters.

- bpo-31701: On Windows, faulthandler.enable() now ignores MSC and COM
  exceptions.

- bpo-31728: Prevent crashes in `_elementtree` due to unsafe cleanup of
  `Element.text` and `Element.tail`. Patch by Oren Milman.

- bpo-31671: Now ``re.compile()`` converts passed RegexFlag to normal int
  object before compiling. bm_regex_compile benchmark shows 14% performance
  improvements.

- bpo-30397: The types of compiled regular objects and match objects are now
  exposed as `re.Pattern` and `re.Match`.  This adds information in pydoc
  output for the re module.

- bpo-31675: Fixed memory leaks in Tkinter's methods splitlist() and split()
  when pass a string larger than 2 GiB.

- bpo-31673: Fixed typo in the name of Tkinter's method adderrorinfo().

- bpo-31648: Improvements to path predicates in ElementTree: Allow
  whitespace around predicate parts, i.e. "[a = 'text']" instead of
  requiring the less readable "[a='text']". Add support for text comparison
  of the current node, like "[.='text']". Patch by Stefan Behnel.

- bpo-30806: Fix the string representation of a netrc object.

- bpo-31638: Add optional argument ``compressed`` to
  ``zipapp.create_archive``, and add option ``--compress`` to the command
  line interface of ``zipapp``.

- bpo-25351: Avoid venv activate failures with undefined variables

- bpo-20519: Avoid ctypes use (if possible) and improve import time for
  uuid.

- bpo-28293: The regular expression cache is no longer completely dumped
  when it is full.

- bpo-31596: Added pthread_getcpuclockid() to the time module

- bpo-27494: Make 2to3 accept a trailing comma in generator expressions. For
  example, ``set(x for x in [],)`` is now allowed.

- bpo-30347: Stop crashes when concurrently iterate over itertools.groupby()
  iterators.

- bpo-30346: An iterator produced by itertools.groupby() iterator now
  becomes exhausted after advancing the groupby iterator.

- bpo-31556: Cancel asyncio.wait_for future faster if timeout <= 0

- bpo-31540: Allow passing a context object in
  :class:`concurrent.futures.ProcessPoolExecutor` constructor. Also, free
  job resources in :class:`concurrent.futures.ProcessPoolExecutor` earlier
  to improve memory usage when a worker waits for new jobs.

- bpo-31516: ``threading.current_thread()`` should not return a dummy thread
  at shutdown.

- bpo-31525: In the sqlite module, require the sqlite3_prepare_v2 API. Thus,
  the sqlite module now requires sqlite version at least 3.3.9.

- bpo-26510: argparse subparsers are now required by default.  This matches
  behaviour in Python 2. For optional subparsers, use the new parameter
  ``add_subparsers(required=False)``. Patch by Anthony Sottile. (As of
  3.7.0rc1, the default was changed to not required as had been the case
  since Python 3.3.)

- bpo-27541: Reprs of subclasses of some collection and iterator classes
  (`bytearray`, `array.array`, `collections.deque`,
  `collections.defaultdict`, `itertools.count`, `itertools.repeat`) now
  contain actual type name insteads of hardcoded name of the base class.

- bpo-31351: python -m ensurepip now exits with non-zero exit code if pip
  bootstrapping has failed.

- bpo-31389: ``pdb.set_trace()`` now takes an optional keyword-only argument
  ``header``. If given, this is printed to the console just before debugging
  begins.

Documentation
-------------

- bpo-31537: Fix incorrect usage of ``get_history_length`` in readline
  documentation example code. Patch by Brad Smith.

- bpo-30085: The operator functions without double underscores are preferred
  for clarity. The one with underscores are only kept for
  back-compatibility.

Build
-----

- bpo-31696: Improve compiler version information in :data:`sys.version`
  when Python is built with Clang.

- bpo-31625: Stop using ranlib on static libraries. Instead, we assume ar
  supports the 's' flag.

- bpo-31624: Remove support for BSD/OS.

- bpo-22140: Prevent double substitution of prefix in python-config.sh.

- bpo-31569: Correct PCBuild/ case to PCbuild/ in build scripts and
  documentation.

- bpo-31536: Avoid wholesale rebuild after `make regen-all` if nothing
  changed.

IDLE
----

- bpo-31460: Simplify the API of IDLE's Module Browser. Passing a widget
  instead of an flist with a root widget opens the option of creating a
  browser frame that is only part of a window.  Passing a full file name
  instead of pieces assumed to come from a .py file opens the possibility of
  browsing python files that do not end in .py.

- bpo-31649: IDLE - Make _htest, _utest parameters keyword only.

- bpo-31559: Remove test order dependence in idle_test.test_browser.

- bpo-31459: Rename IDLE's module browser from Class Browser to Module
  Browser. The original module-level class and method browser became a
  module browser, with the addition of module-level functions, years ago.
  Nested classes and functions were added yesterday.  For
  back-compatibility, the virtual event <<open-class-browser>>, which
  appears on the Keys tab of the Settings dialog, is not changed. Patch by
  Cheryl Sabella.

- bpo-31500: Default fonts now are scaled on HiDPI displays.

- bpo-1612262: IDLE module browser now shows nested classes and functions.
  Original patches for code and tests by Guilherme Polo and Cheryl Sabella,
  respectively.

C API
-----

- bpo-28280: Make `PyMapping_Keys()`, `PyMapping_Values()` and
  `PyMapping_Items()` always return a `list` (rather than a `list` or a
  `tuple`). Patch by Oren Milman.

- bpo-31532: Fix memory corruption due to allocator mix in getpath.c between
  Py_GetPath() and Py_SetPath()

- bpo-25658: Implement :pep:`539` for Thread Specific Storage (TSS) API: it
  is a new Thread Local Storage (TLS) API to CPython which would supersede
  use of the existing TLS API within the CPython interpreter, while
  deprecating the existing API. PEP written by Erik M. Bray, patch by
  Masayuki Yamamoto.


What's New in Python 3.7.0 alpha 1?
===================================

*Release date: 2017-09-19*

Security
--------

- bpo-29781: SSLObject.version() now correctly returns None when handshake
  over BIO has not been performed yet.

- bpo-29505: Add fuzz tests for float(str), int(str), unicode(str); for
  oss-fuzz.

- bpo-30947: Upgrade libexpat embedded copy from version 2.2.1 to 2.2.3 to
  get security fixes.

- bpo-30730: Prevent environment variables injection in subprocess on
  Windows.  Prevent passing other environment variables and command
  arguments.

- bpo-30694: Upgrade expat copy from 2.2.0 to 2.2.1 to get fixes of multiple
  security vulnerabilities including: CVE-2017-9233 (External entity
  infinite loop DoS), CVE-2016-9063 (Integer overflow, re-fix),
  CVE-2016-0718 (Fix regression bugs from 2.2.0's fix to CVE-2016-0718) and
  CVE-2012-0876 (Counter hash flooding with SipHash). Note: the
  CVE-2016-5300 (Use os-specific entropy sources like getrandom) doesn't
  impact Python, since Python already gets entropy from the OS to set the
  expat secret using ``XML_SetHashSalt()``.

- bpo-30500: Fix urllib.parse.splithost() to correctly parse fragments. For
  example, ``splithost('//127.0.0.1#@evil.com/')`` now correctly returns the
  ``127.0.0.1`` host, instead of treating ``@evil.com`` as the host in an
  authentication (``login@host``).

- bpo-29591: Update expat copy from 2.1.1 to 2.2.0 to get fixes of
  CVE-2016-0718 and CVE-2016-4472. See
  https://sourceforge.net/p/expat/bugs/537/ for more information.

Core and Builtins
-----------------

- bpo-31490: Fix an assertion failure in `ctypes` class definition, in case
  the class has an attribute whose name is specified in ``_anonymous_`` but
  not in ``_fields_``. Patch by Oren Milman.

- bpo-31471: Fix an assertion failure in `subprocess.Popen()` on Windows, in
  case the env argument has a bad keys() method. Patch by Oren Milman.

- bpo-31418: Fix an assertion failure in `PyErr_WriteUnraisable()` in case
  of an exception with a bad ``__module__`` attribute. Patch by Oren Milman.

- bpo-31416: Fix assertion failures in case of a bad warnings.filters or
  warnings.defaultaction. Patch by Oren Milman.

- bpo-28411: Change direct usage of PyInterpreterState.modules to
  PyImport_GetModuleDict(). Also introduce more uniformity in other code
  that deals with sys.modules. This helps reduce complications when working
  on sys.modules.

- bpo-28411: Switch to the abstract API when dealing with
  ``PyInterpreterState.modules``. This allows later support for all dict
  subclasses and other Mapping implementations.  Also add a
  ``PyImport_GetModule()`` function to reduce a bunch of duplicated code.

- bpo-31411: Raise a TypeError instead of SystemError in case
  warnings.onceregistry is not a dictionary. Patch by Oren Milman.

- bpo-31344: For finer control of tracing behaviour when testing the
  interpreter, two new frame attributes have been added to control the
  emission of particular trace events: ``f_trace_lines`` (``True`` by
  default) to turn off per-line trace events; and ``f_trace_opcodes``
  (``False`` by default) to turn on per-opcode trace events.

- bpo-31373: Fix several possible instances of undefined behavior due to
  floating-point demotions.

- bpo-30465: Location information (``lineno`` and ``col_offset``) in
  f-strings is now (mostly) correct.  This fixes tools like flake8 from
  showing warnings on the wrong line (typically the first line of the file).

- bpo-30860: Consolidate CPython's global runtime state under a single
  struct.  This improves discoverability of the runtime state.

- bpo-31347: Fix possible undefined behavior in _PyObject_FastCall_Prepend.

- bpo-31343: Include sys/sysmacros.h for major(), minor(), and makedev().
  GNU C libray plans to remove the functions from sys/types.h.

- bpo-31291: Fix an assertion failure in `zipimport.zipimporter.get_data` on
  Windows, when the return value of ``pathname.replace('/','\\')`` isn't a
  string. Patch by Oren Milman.

- bpo-31271: Fix an assertion failure in the write() method of
  `io.TextIOWrapper`, when the encoder doesn't return a bytes object. Patch
  by Oren Milman.

- bpo-31243: Fix a crash in some methods of `io.TextIOWrapper`, when the
  decoder's state is invalid. Patch by Oren Milman.

- bpo-30721: ``print`` now shows correct usage hint for using Python 2
  redirection syntax.  Patch by Sanyam Khurana.

- bpo-31070: Fix a race condition in importlib _get_module_lock().

- bpo-30747: Add a non-dummy implementation of _Py_atomic_store and
  _Py_atomic_load on MSVC.

- bpo-31095: Fix potential crash during GC caused by ``tp_dealloc`` which
  doesn't call ``PyObject_GC_UnTrack()``.

- bpo-31071: Avoid masking original TypeError in call with * unpacking when
  other arguments are passed.

- bpo-30978: str.format_map() now passes key lookup exceptions through.
  Previously any exception was replaced with a KeyError exception.

- bpo-30808: Use _Py_atomic API for concurrency-sensitive signal state.

- bpo-30876: Relative import from unloaded package now reimports the package
  instead of failing with SystemError.  Relative import from non-package now
  fails with ImportError rather than SystemError.

- bpo-30703: Improve signal delivery. Avoid using Py_AddPendingCall from
  signal handler, to avoid calling signal-unsafe functions. The tests I'm
  adding here fail without the rest of the patch, on Linux and OS X. This
  means our signal delivery logic had defects (some signals could be lost).

- bpo-30765: Avoid blocking in pthread_mutex_lock() when
  PyThread_acquire_lock() is asked not to block.

- bpo-31161: Make sure the 'Missing parentheses' syntax error message is
  only applied to SyntaxError, not to subclasses. Patch by Martijn Pieters.

- bpo-30814: Fixed a race condition when import a submodule from a package.

- bpo-30736: The internal unicodedata database has been upgraded to Unicode
  10.0.

- bpo-30604: Move co_extra_freefuncs from per-thread to per-interpreter to
  avoid crashes.

- bpo-30597: ``print`` now shows expected input in custom error message when
  used as a Python 2 statement. Patch by Sanyam Khurana.

- bpo-30682: Removed a too-strict assertion that failed for certain
  f-strings, such as eval("f'\\\n'") and eval("f'\\\r'").

- bpo-30501: The compiler now produces more optimal code for complex
  condition expressions in the "if", "while" and "assert" statement, the
  "if" expression, and generator expressions and comprehensions.

- bpo-28180: Implement :pep:`538` (legacy C locale coercion). This means
  that when a suitable coercion target locale is available, both the core
  interpreter and locale-aware C extensions will assume the use of UTF-8 as
  the default text encoding, rather than ASCII.

- bpo-30486: Allows setting cell values for __closure__. Patch by Lisa
  Roach.

- bpo-30537: itertools.islice now accepts integer-like objects (having an
  __index__ method) as start, stop, and slice arguments

- bpo-25324: Tokens needed for parsing in Python moved to C. ``COMMENT``,
  ``NL`` and ``ENCODING``. This way the tokens and tok_names in the token
  module don't get changed when you import the tokenize module.

- bpo-29104: Fixed parsing backslashes in f-strings.

- bpo-27945: Fixed various segfaults with dict when input collections are
  mutated during searching, inserting or comparing.  Based on patches by
  Duane Griffin and Tim Mitchell.

- bpo-25794: Fixed type.__setattr__() and type.__delattr__() for
  non-interned attribute names.  Based on patch by Eryk Sun.

- bpo-30039: If a KeyboardInterrupt happens when the interpreter is in the
  middle of resuming a chain of nested 'yield from' or 'await' calls, it's
  now correctly delivered to the innermost frame.

- bpo-28974: ``object.__format__(x, '')`` is now equivalent to ``str(x)``
  rather than ``format(str(self), '')``.

- bpo-30024: Circular imports involving absolute imports with binding a
  submodule to a name are now supported.

- bpo-12414: sys.getsizeof() on a code object now returns the sizes which
  includes the code struct and sizes of objects which it references. Patch
  by Dong-hee Na.

- bpo-29839: len() now raises ValueError rather than OverflowError if
  __len__() returned a large negative integer.

- bpo-11913: README.rst is now included in the list of distutils standard
  READMEs and therefore included in source distributions.

- bpo-29914: Fixed default implementations of __reduce__ and
  __reduce_ex__(). object.__reduce__() no longer takes arguments,
  object.__reduce_ex__() now requires one argument.

- bpo-29949: Fix memory usage regression of set and frozenset object.

- bpo-29935: Fixed error messages in the index() method of tuple, list and
  deque when pass indices of wrong type.

- bpo-29816: Shift operation now has less opportunity to raise
  OverflowError. ValueError always is raised rather than OverflowError for
  negative counts. Shifting zero with non-negative count always returns
  zero.

- bpo-24821: Fixed the slowing down to 25 times in the searching of some
  unlucky Unicode characters.

- bpo-29102: Add a unique ID to PyInterpreterState.  This makes it easier to
  identify each subinterpreter.

- bpo-29894: The deprecation warning is emitted if __complex__ returns an
  instance of a strict subclass of complex.  In a future versions of Python
  this can be an error.

- bpo-29859: Show correct error messages when any of the pthread_* calls in
  thread_pthread.h fails.

- bpo-29849: Fix a memory leak when an ImportError is raised during from
  import.

- bpo-28856: Fix an oversight that %b format for bytes should support
  objects follow the buffer protocol.

- bpo-29723: The ``sys.path[0]`` initialization change for bpo-29139 caused
  a regression by revealing an inconsistency in how sys.path is initialized
  when executing ``__main__`` from a zipfile, directory, or other import
  location. The interpreter now consistently avoids ever adding the import
  location's parent directory to ``sys.path``, and ensures no other
  ``sys.path`` entries are inadvertently modified when inserting the import
  location named on the command line.

- bpo-29568: Escaped percent "%%" in the format string for classic string
  formatting no longer allows any characters between two percents.

- bpo-29714: Fix a regression that bytes format may fail when containing
  zero bytes inside.

- bpo-29695: bool(), float(), list() and tuple() no longer take keyword
  arguments. The first argument of int() can now be passes only as
  positional argument.

- bpo-28893: Set correct __cause__ for errors about invalid awaitables
  returned from __aiter__ and __anext__.

- bpo-28876: ``bool(range)`` works even if ``len(range)`` raises
  :exc:`OverflowError`.

- bpo-29683: Fixes to memory allocation in _PyCode_SetExtra.  Patch by Brian
  Coleman.

- bpo-29684: Fix minor regression of PyEval_CallObjectWithKeywords. It
  should raise TypeError when kwargs is not a dict.  But it might cause segv
  when args=NULL and kwargs is not a dict.

- bpo-28598: Support __rmod__ for subclasses of str being called before
  str.__mod__. Patch by Martijn Pieters.

- bpo-29607: Fix stack_effect computation for CALL_FUNCTION_EX. Patch by
  Matthieu Dartiailh.

- bpo-29602: Fix incorrect handling of signed zeros in complex constructor
  for complex subclasses and for inputs having a __complex__ method. Patch
  by Serhiy Storchaka.

- bpo-29347: Fixed possibly derefere